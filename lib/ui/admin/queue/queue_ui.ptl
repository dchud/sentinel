# $Id$

_q_exports = [
    '_q_index',
    'add',
    'create',
    'receive',
    ]

import os
import stat
import traceback

from quixote import get_publisher
from quixote.errors import AccessError, PublishError, TraversalError
from quixote import form2
from quixote.html import html_quote

from canary.loader import Batch, Queue, Parser
from canary.qx_defs import MyForm
from canary.source_catalog import SourceCatalog, Source
from canary.ui.admin.admin_ui import title_bar
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages


def _q_index [html] (request):
    header('Queue:')
    """
    <h2>Queue</h2>
    """
    footer()


class QueueActions:

    _q_exports = [
        '_q_index',
        'edit',
        ]

    def __init__ (self, batch_id):
        self.batch_id = batch_id
        
    def _q_index [html] (self, request):
        header('Admin: Term summary')
        """
        <h2>Term summary</h2>
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.batch_id = int(self.batch_id)
            if action == 'edit':
                return edit(request, self.batch_id)
            elif action == 'add':
                return add(request, self.batch_id)
            elif action == 'receive':
                return receive(request, self.batch_id)
            elif action == 'delete':
                return delete(request, self.batch_id)
            elif action == 'dedupe':
                return dedupe(request, self.batch_id)
            else:
                raise TraversalError
        except:
            import traceback
            print traceback.print_exc()
            return not_found('queue')
            
            
    def edit [html] (self, request):
        
        context = get_publisher().context
        
        batch = Batch(uid=self.batch_id)
        batch.load(context)
        
        source_catalog = context.get_source_catalog()
        # Sort terms by their token
        sources = [(id, source.name) for id, source in source_catalog.sources.items()]
        sources.sort()
        
        form = MyForm(context)
        form.add(form2.StringWidget, 'batch_name', 
            title='Batch name',
            value=batch.name,
            size=40,
            required=True)
        form.add(form2.SingleSelectWidget, 'source_id', 
            title='Source',
            options=[(id, name, id) for id, name in sources],
            value=batch.source_id,
            sort=True,
            required=True)
        form.add_submit('edit', 'edit')
        
        def render [html] ():
            header('Edit batch')
            title_bar('Edit batch %s' % self.batch_id)
            form.render()
            footer()
        
        if not form.is_submitted():
            form.get_widget('batch_name').set_value(batch.name)
            form.get_widget('source_id').set_value(batch.source_id)
            return render()
            
        has_changed = False
        if not form['batch_name'] == batch.name:
            has_changed = True
            batch.name = form['batch_name']
        if not form['source_id'] == batch.source_id:
            has_changed = True
            batch.source_id = form['source_id']
        
        if form.has_errors():
            return render()
        
        if has_changed:
            try:
                batch.save(context)
                add_message('Edited batch %s' % self.batch_id)
                form.logger.info(str('Edited batch %s' % self.batch_id))
            except:
                add_message('Could not edit batch')
                form.logger.info(str('Could not edit batch'))
        else:
            add_message('Batch unchanged')
        
        request.redirect(str('/admin/queue/list'))




def add [html] (request, batch_id=None):
    
    context = get_publisher().context
    source_catalog = context.get_source_catalog()
    # Sort terms by their token
    sources = [(id, source.name) for id, source in source_catalog.sources.items()]
    sources.sort()

    batch_name = ''
    if batch_id:
        batch = Batch(uid=batch_id)
        batch.load(context  )
        batch_name = batch.name
    
    header('Upload records')
    title_bar('Upload records')

    if has_messages():
        render_messages()
    
    """
    <form enctype='multipart/form-data'
        method='POST'
        action='receive'>
    <p>
    Source:<br/>
        <select name='source_id'><br/>

    """
    for id, name in sources:
        """
        <option value='%s'>%s
        """ % (id, name)
    """
        </select>
    </p>

    <p>
    File to upload: <br/>
        <input type='file' name='upload' size='50'/>
    </p>

    <p>
    Expected #records: <br/>
        <input type='text' name='num_records' size='4' />
    </p>
    
    <p>
    Batch name: <br/>
        <input type='text' name='batch_name' value='%s' size='30' />
    </p>
    """ % batch_name
    
    """
    <p>
    Find duplicates?: <br/>
        <input type='checkbox' name='find_duplicates' value='yes'/>
    </p>
    
    <p>
        <input type='submit' value='Upload' />
    </p>
    </form>
    """
    footer()



def list [html] (request):

    context = get_publisher().context
    source_catalog = context.get_source_catalog()

    header('List editing queues')
    title_bar('List editing queues')
    if has_messages():
        render_messages()

    """
    <table cellspacing='5' class='gentable'>
    <tr>
        <th>Batch</th>
        <th>Name</th>
        <th>Source</th>
        <th>Status (unclaimed/claimed/curated/total (% done))</th>
        <th>Load date</th>
        <th>Actions</th>
    </tr>
    """
    queue = Queue()
    queue.load(context)
    sort_list = [(b.name.lower(), b) for b in queue.batches]
    sort_list.sort()
    for n, batch in sort_list:
        batch_stats = batch.get_statistics(context)

        source_id = batch.source_id
        source = source_catalog.get_source(source_id)
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (batch.uid, batch.name, source.name)
        
        # Avoid division by zero for empty batches
        if batch.num_records > 0:
            percent_done = float(batch_stats['curated']) / batch.num_records * 100.0
        else:
            percent_done = 0
        """
            <td>%s / %s / %s / %s (%s%s done)</td>
        """ % (batch_stats['unclaimed'],
            batch_stats['claimed'],
            batch_stats['curated'],
            batch.num_records,
            str('%2.1f' % percent_done),
            str('%'))
        """
            <td>%s</td>
            <td>
                [<a href='/admin/queue/%s/edit'>edit</a>]
                [<a href='/admin/queue/%s/add'>add</a>]
                [<a href='/admin/queue/%s/dedupe'>dedupe</a>]
                [<a href='/admin/queue/%s/delete'>delete</a>]
            </td>
        </tr>
        """ % (str(batch.date_added)[0:10], 
            batch.uid, batch.uid, batch.uid, batch.uid)
    """
    </table>
    """
    
    footer()
    

def receive [html] (request, batch_id=None):

    result = []
    form = request.form
    context = get_publisher().context
    source_catalog = context.get_source_catalog()
        
    try:
        source_id = int(form.get('source_id'))
        source = source_catalog.get_source(source_id)
    except:
        add_message('Please choose a source.')
        return add(request)

    try:
        num_records = int(form.get('num_records'))
    except:
        num_records = 0
    
    # FIXME: Think through this better.  Should clean up empty files at least.
    try:
        upload = request.form.get('upload')
        size = os.stat(upload.tmp_filename)[stat.ST_SIZE]
        if not upload.base_filename or size == 0:
            add_message('Nothing uploaded.')
    except:
        add_message('Upload failed.')
        return add(request)

    try:
        if batch_id:
            batch = Batch(batch_id)
            batch.load(context)
        else:
            batch_name = form.get('batch_name', '')
            if batch_name:
                queue = Queue()
                queue.load(context)
                batch = queue.get_batch_by_name(batch_name)
                if batch:
                    batch.load(context)
                else:
                    batch = Batch(file_name=upload.tmp_filename, 
                        source_id=source_id)
                    batch.name = form.get('batch_name') or ''
                    batch.save(context)
            
        mapped_terms = source_catalog.get_mapped_terms(source_id)
        parser = Parser(source)
        records = parser.parse(upload.tmp_filename, mapped_terms=mapped_terms)
        batch.add_records(records)
        batch.save(context)
        
        if form.get('find_duplicates', '') == 'yes':
            batch.find_duplicates(context)
                
        if num_records != len(records):
            add_message('Batch saved: Record count mismatch, %s specified, %s found' % (num_records, len(records)))

        
    except:
        print traceback.print_exc()
        add_message('Unable to load batch.')

    if has_messages():
        # FIXME:  do cleanup here?
        return add(request, batch_id=batch_id)

    header('Uploaded records')
    """
    <p>You just uploaded <code>%s</code> (%d bytes)<br>
    """ % (html_quote(upload.base_filename), size)
    """
    which is temporarily stored in <code>%s</code>.</p>
    """ % html_quote(upload.tmp_filename)
    """
    <p>And has id %s and date_added %s.</p>
    """ % (batch.uid, batch.date_added)

    footer()


def create [html] (request):
    
    context = get_publisher().context
    source_catalog = context.get_source_catalog()

    # Sort terms by their token
    sources = [(id, source.name) for id, source in source_catalog.sources.items()]
    sources.sort()

    form = MyForm(context)
    form.add(form2.SingleSelectWidget, name='source_id', title='Source',
        options=[(id, name, id) for id, name in sources],
        sort=True,
        required=True)
    form.add(form2.StringWidget, 'batch_name', title='Batch name',
        size=25, required=True)
    form.add_submit('create', 'create')
    
    def render [html] ():
        header('Create batch')
        title_bar('Create batch')
        form.render()
        footer()

    if not form.is_submitted():
        return render()
        
    try:
        batch = Batch(source_id=form['source_id'])
        batch.name = form['batch_name']
        batch.save(context)
        add_message('Created batch %s' % batch.uid)
        form.logger.info(str('Created batch %s' % batch.uid))
    except:
        add_message('Could not create batch')
        form.logger.info(str('Could not create batch'))
    
    request.redirect(str('/admin'))


def delete [html] (request, batch_id):
    context = get_publisher().context
    source_catalog = context.get_source_catalog()

    try:
        batch = Batch(batch_id)
        batch.load(context)
    except:
        return not_found('batch')
       
    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this batch?',
        value=False)
    form.add_submit('delete', 'delete')
    
    def render [html] ():
        header('Delete batch')
        title_bar('Delete batch')
        if has_messages():
            render_messages()
        """
        <p>
        "%s" (%s)
        </p>
        """ % (batch.name, batch.uid)
        form.render()
        footer()
    
    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    are_you_sure = form['are_you_sure']
    if are_you_sure:
        # Make sure they're absolutely certain!
        if request.get_form_var('are_you_certain', None) == 'YES':
            form.logger.info(str('Deleting batch %s' % batch.uid))
            batch.load(context, show='all', size='all')
            batch.delete(context)
            add_message('Deleted batch')
        else:
            # Add a second widget to double-verify they're certain
            form.add(form2.StringWidget, 'are_you_certain',
                title='Are you ABSOLUTELY certain?',
                required=True,
                hint='Type "YES" exactly to double-verify',
                value='No.')
            add_message('Please be ABSOLUTELY certain; you are about to DELETE THIS WHOLE BATCH.')
            return render()
    else:
        add_message('Batch not deleted')

    request.redirect(str('/admin'))


def dedupe [html] (request, batch_id):

    context = get_publisher().context
    try:
        batch = Batch(batch_id)
        batch.load(context)
    except:
        return not_found('batch')
        
    batch.find_duplicates(context)
    add_message('Ran dedupe on batch')
    request.redirect(str('/admin'))
    
