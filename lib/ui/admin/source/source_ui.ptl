# $Id$

_q_exports = [
    '_q_index',
    'edit',
    'delete',
    'terms',
    ]

import re

from quixote import get_publisher
from quixote.errors import AccessError, TraversalError
from quixote import form2

from dulcinea.database import get_transaction

from canary.ui.admin.admin_ui import title_bar
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.ui.pages import has_messages, add_message, render_messages
from canary.qx_defs import MyForm
from canary.source_catalog import SourceCatalog, Source, Term


def _q_index [html] (request):
    header('Source:')
    """
    <h2>Source</h2>
    """
    footer()


class SourceActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, source_id):
        self.source_id = source_id


    def _q_index [html] (self, request):
        header('Admin: Source summary')
        """
        <h2>Source summary</h2>
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            if action == 'edit':
                return edit(request, self.source_id)
            elif action == 'terms':
                return terms(request, self.source_id)
            elif action == 'delete':
                return delete(self.source_id)
            else:
                raise TraversalError
        except:
            return not_found('source')



class SourceForm (MyForm):

    def __init__ (self):
        MyForm.__init__(self)
        self.add(form2.IntWidget, 'source_uid', title='Source uid',
            size=3, required=False)
        self.add(form2.StringWidget, 'source_name', title='Name',
            size=30, required=True)
        self.add(form2.TextWidget, 'source_desc', title='Description',
            rows=4, cols=64, required=False)
        self.add(form2.StringWidget, 're_result_sep',
            title='Result separator regexp',
            size='40', required=False)
        self.add(form2.StringWidget, 're_term_token',
            title='Term token regexp',
            size='40', required=False)
        self.add(form2.StringWidget, 'sfx_pattern',
            title='SFX pattern',
            size='60', required=False)
        self.add_submit('submit', 'submit')


def create [html] (request):

    form = SourceForm()

    def render [html] ():
        header('Create source')
        title_bar('Create Source')
        form.render()
        footer()

    if not form.is_submitted():
        return render()

    source_name = form['source_name']
    source_desc = form['source_desc']
    if source_name and not source_name == '':
        if str(' ') in source_name:
            form.set_error('source_name', 'Name cannot contain spaces')
    else:
        form.set_error('source_name', 'Name cannot be blank')

    if form['re_result_sep']:
        try:
            test_re_result_sep = re.compile(form['re_result_sep'])
        except:
            form.set_error('re_result_sep', 'Invalid regular expression')

    if form['re_term_token']:
        try:
            test_re_term_token = re.compile(form['re_term_token'])
        except:
            form.set_error('re_term_token', 'Invalid regular expression')

    if form.has_errors():
        return render()

    if source_desc:
        source = Source(name=source_name, description=source_desc)
    else:
        source = Source(name=source_name)

    if form['re_result_sep']:
        source.re_result_sep = form['re_result_sep']

    if form['re_term_token']:
        source.re_term_token = form['re_term_token']
        
    if form['sfx_pattern']:
        source.sfx_pattern = form['sfx_pattern']

    try:
        cursor = get_publisher().get_cursor()
        source.save(cursor)
        source_catalog = SourceCatalog()
        source_catalog.load_sources(cursor, True)
        get_publisher().set_source_catalog(source_catalog)
        cursor.close()
        form.logger.info(str('Created source %s' % source_name))
        add_message('Created source %s' % source_name)
        request.redirect(str('/admin/sources'))
    except:
        form.logger.info(str('Unable to create source'))
        add_message('Unable to create source')
        request.redirect(str('/admin/sources'))




def edit [html] (request, source_id=None):

    form = SourceForm()

    publisher = get_publisher()
    source_catalog = get_publisher().get_source_catalog()
    source = source_catalog.get_source(source_id)
    if source == None:
        return not_found('source')


    def render [html] ():
        header('Edit source')
        title_bar('Edit Source')
        form.render()
        """
        <h5>Source last modified: %s</h5>
        """ % str(source.date_modified)[0:10]   # FIXME in source_catalog
        footer()

    if not form.is_submitted():
        form.get_widget('source_uid').set_value(source.uid)
        form.get_widget('source_name').set_value(source.name)
        form.get_widget('source_desc').set_value(source.description)
        form.get_widget('re_result_sep').set_value(source.re_result_sep)
        form.get_widget('re_term_token').set_value(source.re_term_token)
        form.get_widget('sfx_pattern').set_value(source.sfx_pattern)
        return render()

    source_uid = form['source_uid']
    source_name = form['source_name']
    source_desc = form['source_desc']
    if not source_uid == source.uid:
        form.set_error('source_uid', 'Source uid cannot be changed')
        form.get_widget('source_uid').set_value(source.uid)
    if source_name and not source_name == '':
        if str(' ') in source_name:
            form.set_error('source_name', 'Name cannot contain spaces')
    else:
        form.set_error('source_name', 'Name cannot be blank')

    if form['re_result_sep']:
        try:
            test_re_result_sep = re.compile(form['re_result_sep'])
        except:
            form.set_error('re_result_sep', 'Invalid regular expression')

    if form['re_term_token']:
        try:
            test_re_term_token = re.compile(form['re_term_token'])
        except:
            form.set_error('re_term_token', 'Invalid regular expression')

    if form.has_errors():
        return render()

    source.name = source_name
    if not source_desc == None:
        source.description = source_desc
    if form['re_result_sep']:
        source.re_result_sep = form['re_result_sep']
        form.logger.debug(str('re_result_sep = "%s"' % form['re_result_sep']))
    if form['re_term_token']:
        source.re_term_token = form['re_term_token']
        form.logger.debug(str('re_term_token = "%s"' % form['re_term_token']))
    if form['sfx_pattern']:
        source.sfx_pattern = form['sfx_pattern']
    try:
        cursor = get_publisher().get_cursor()
        source.save(cursor)
        source_catalog = SourceCatalog()
        source_catalog.load_sources(cursor)
        get_publisher().set_source_catalog(source_catalog)
        cursor.close()
        form.logger.info(str('Edited source %s' % source.uid))
        add_message('Edited source %s' % source.name)
        request.redirect(str('/admin/sources'))
    except:
        form.logger.error(str('Unable to edit source %s' % source.uid))
        add_message('Unable to edit source %s' % source.uid)
        request.redirect(str('/admin/sources'))


class DeleteSourceForm (MyForm):

    def __init__ (self):
        MyForm.__init__(self)
        self.add(form2.IntWidget, 'source_uid', title='Source id', required=True)
        self.add(form2.CheckboxWidget, 'are_you_sure',
                 title='Are you sure you want to delete this source?',
                 value=False)
        self.add_submit('delete', 'delete')


def delete [html] (source_id=None):

    form = DeleteSourceForm()

    source_catalog = get_publisher().get_source_catalog()
    source = source_catalog.get_source(source_id)
    if source == None:
        return not_found('source')

    def render [html] ():
        header('Delete source')
        title_bar('Delete source')
        form.render()
        footer()

    if not form.is_submitted():
        form.get_widget('source_uid').set_value(source.uid)
        return render()

    if not form['source_uid'] == source.uid:
        form.set_error('source_uid', 'Source id cannot change')
        form.get_widget('source_uid').set_value(source.uid)

    if form.has_errors():
        return render()

    are_you_sure = form['are_you_sure']
    if are_you_sure:
        try:
            cursor = get_publisher().get_cursor()
            source_catalog.delete_source(cursor, source.uid)
            new_source_catalog = SourceCatalog()
            new_source_catalog.load_sources(cursor, True)
            get_publisher().set_source_catalog(new_source_catalog)
            cursor.close()
        except:
            form.logger.error(str('Unable to delete source %s' % source.uid))
            PublishError
        form.logger.info(str('Deleted source %s' % source.uid))
        header('Admin: Source deleted')
        title_bar('Source deleted')
    else:
        header('Admin: Source not deleted')
        title_bar('Source not deleted')
    footer()



def terms [html] (request, source_id=None):

    publisher = get_publisher()
    source_catalog = get_publisher().get_source_catalog()
    source = source_catalog.get_source(source_id)
    if source == None:
        return not_found('source')

    header('Source terms')
    title_bar('Source terms')

    if has_messages():
        render_messages()
    
    """
    <h3>Terms for source '%s' (uid=%s, <a href='/admin/source/%s/edit'>edit</a>)</h3>
    """ % (source.name, source_id, source_id)

    """
    <table cellspacing='3' class='gentable'>
        <tr>
            <th>uid</th>
            <th>name</th>
            <th>desc</th>
            <th>token</th>
            <th>multi?</th>
            <th>map id</th>
            <th>action</th>
        </tr>
    """

    # Sort terms by their token
    terms = [(term.token, id) for id, term in source.terms.items()]
    terms.sort()
    for (token, term_id) in terms:
        term = source.terms[term_id]
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>
                [<a href='/admin/term/%s/edit'>edit</a>]
                [<a href='/admin/term/%s/delete'><font size='-1'>delete</font></a>]
            </td>
        </tr>
        """ % (term.uid, term.name, term.description,
               term.token, term.is_multivalue, term.mapped_term_id,
               term.uid, term.uid)
        
    """
        <tr>
            <td colspan='7'>
            Create a new term:
            </td>
        </tr>
    """

    """
        <tr>
            <form action='/admin/term/create' method='post'>
            <td>-</td>
            <td>
                <input type='text' name='term_name' size='15'>
                <input type='text' name='term_source_id' size='3' value='%s' />
            </td>
            <td><input type='text' name='term_desc' size='30'></td>
            <td><input type='text' name='term_token' size='5'></td>
            <td><input type='checkbox' name='is_multivalue'></td>
            <td><input type='text' name='mapped_term_id' size='3' value='-1'></td>
            <td><input type='submit' value='create'></td>
            </form>
        </tr>
    """ % source_id

    """
    </table>
    """

    footer()


