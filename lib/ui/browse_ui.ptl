import urllib

from quixote import get_publisher

from canary.browse import records_by_year, records_by_year_index
from canary.browse import records_by_heading, records_by_heading_index
from canary.browse import records_by_journal, records_by_journal_index
from canary.browse import records_by_methodology, records_by_methodology_index
from canary.study import Methodology
from canary.ui.pages import not_found
from canary.ui.pageframe import header, footer


class Browse:

    _q_exports = [
        '_q_index',
        ]
        
    def __init__ (self, request):
        pass

    def _q_index [html] (self, request):
        header('Browse')
        """
        <h2>Browse</h2>
        
        <p>
        You can browse the database by <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>,
        <a href='/browse/methodology'>study methodology</a>,
        or by <a href='/browse/heading'>subject heading</a>.
        
        """
        footer()
    
    def _q_lookup (self, request, name):
        try:
            if name == 'year':
                return YearBrowseIndex(request)
            #elif name == 'heading':
            #    return HeadingBrowseIndex(request)
            elif name == 'journal':
                return JournalBrowseIndex(request)
            elif name == 'methodology':
                return MethodologyBrowseIndex(request)
        except:
            return not_found('index')
            

def render_record_row [html] (record):
    
    source_catalog = get_publisher().get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = record.get_mapped_metadata(complete_term_map)
    link_width = '20%'
    """
    <tr>
        <td align='left' valign='top'>
            <a href='/record/%s'>%s</a> <br />
            %s <br />
            <font size='-1'>%s</font>
        </td>
        <td align='center' valign='top' width='%s'>
            [links]
        </td>
    </tr>
    """ % (record.uid, ', '.join(mapped_metadata['author']),
        mapped_metadata['title'], mapped_metadata['source'], link_width)



class BrowseIndex:
    
    _q_exports = [
        '_q_index',
        ]
    
    def __init__ (self):
        self.type = 'superclass'
        
    def _q_index [html] (self, request):
        pass
        
    def render_records [html] (self, name, records):
        header('Browse by %s: %s' % (self.type.capitalize(), name))

        count = len(records)
        if count > 0:
    
            if count == 1:
                article_text = 'article'
            else:
                article_text = 'articles'
    
            """
            <h2><a href='/browse/%s'>Browse by %s</a>: %s (%s %s)</h2>
            """ % (self.type, self.type.capitalize(), name, count, article_text)
    
            """
            <table width='100%' cellspacing='5' cellpadding='5'>
            """
            for record in records:
                render_record_row(record)
            """
            </table>
            """
        else:
            return not_found(self.type)
            
    
        footer()



class YearBrowseIndex (BrowseIndex):
    
    _q_exports = [
        '_q_index',
        ]
        
    def __init__ (self, request):
        self.type = 'year'
        
    def _q_index [html] (self, request):
        header('Browse by Year')
        """
        <h2>Browse by Year</h2>
    
        <p>
    Below is a list of the number of articles in the Canary Database by their
    year of publication.
        </p>
    
        <table cellspacing='3' class='gentable'>
            <tr>
                <th align='center' width='20%'># articles</th>
                <th align='left'>Year</th>
            </tr>
        """
        cursor = get_publisher().get_cursor()
        source_catalog = get_publisher().get_source_catalog()
        complete_term_map = source_catalog.get_complete_mapping()
        records = records_by_year_index(cursor, complete_term_map)
        cursor.close()
        for record in records:
            year_count, year = record
            if not year == 0:
                """
                <tr>
                    <td>%s</td>
                    <td align='center'><a href='/browse/year/%s'>%s</a></td>
                </tr>
                """ % (year_count, year, year)
        """
        </table>
        """
        footer()
        

    def _q_lookup (self, request, year):
        try:
            if year:
                year = int(year)
                cursor = get_publisher().get_cursor()
                source_catalog = get_publisher().get_source_catalog()
                complete_term_map = source_catalog.get_complete_mapping()
                records = records_by_year(cursor, year, term_map=complete_term_map)
                if len(records) == 0:
                    raise Exception('No records found')
                cursor.close()
                return self.render_records(year, records)
            else:
                raise Error
        except:
            import traceback
            print traceback.print_exc()
            return not_found(self.type)
            



class HeadingBrowseIndex (BrowseIndex):

    _q_exports = [
        '_q_index',
        ]
        
    def __init__ (self, request):
        self.type = 'heading'
        
    def _q_index [html] (self, request):
        header('Browse by Heading')
        """
        <h2>Browse by Heading</h2>
    
        <p>
        Below is a list of the most well-used MeSH headings (indexed by
        NLM) as found in our curated articles.  Please note that in many
        cases, a single article might be indexed with the same heading multiple
        times, when multiple qualifers are attached to the MeSH heading:
        <ul>
            <li>'<b># uses</b>' is the total number of times a heading
        appears as an index term;</li>
            <li>'<b># articles</b>' is the total number of articles in which
        the same heading appears as an index term at least once.</li>
        </ul>
        </p>
        """
    
        """
        <table width='70%' cellspacing='3' cellpadding='3'>
            <tr>
                <th align='center' width='20%'># uses</th>
                <th align='center' width='15%'># articles</th>
                <th align='left'>Subject heading</th>
            </tr>
        """
        
        cursor = get_publisher().get_cursor()
        headings = records_by_heading_index(cursor)
        cursor.close()
        for heading in headings:
            term, term_count, id_count = heading
            encoded_heading = urllib.quote_plus(term)
            """
            <tr>
                <td align='center'>%(term_count)s</td>
                <td align='center'>%(id_count)s</td>
                <td align='left'><a href='/browse/heading/%(encoded_heading)s'>%(term)s</a></td>
            </tr>
            """ % vars()
        """
        </table>
        """
        footer()

    
    def _q_lookup (self, request, name):
        try:
            if name:
                unencoded_name = urllib.unquote_plus(name)
                cursor = get_publisher().get_cursor()
                records = records_by_heading(unencoded_name, cursor)
                cursor.close()
                return self.render_records(unencoded_name, records)
            else:
                raise Error
        except:
            return not_found(self.type)
            



class JournalBrowseIndex (BrowseIndex):
    
    _q_exports = [
        '_q_index',
        ]
        
    def __init__ (self, request):
        self.type = 'journal'
        
    def _q_index [html] (self, request):

        header('Browse by %s' % self.type.capitalize())
        """
        <h2>Browse by Journal</h2>
    
        <p>
    Below is a list of the number of articles in the Canary Database by the
    journal in which the articles appear.
        </p>
    
        <table cellspacing='3' class='gentable'>
            <tr>
                <th align='center'># articles</th>
                <th align='left'>Journal</th>
            </tr>
        """
        
        cursor = get_publisher().get_cursor()
        source_catalog = get_publisher().get_source_catalog()
        complete_term_map = source_catalog.get_complete_mapping()
        results = records_by_journal_index(cursor, complete_term_map)
        cursor.close()
        for result in results:
            count, issn, title, abbr = result
            if str('.') in title:
                title = title[0:title.index(str('.'))]
                """
                <tr>
                    <td align='center'>%s</td>
                    <td align='left'><a href='/browse/journal/%s'>%s</a></td>
                </tr>
                """ % (count, issn, title)
            else:
                continue
    
        """
        </table>
        """
        footer()

    def _q_lookup (self, request, issn=0):
        try:
            if issn:
                cursor = get_publisher().get_cursor()
                source_catalog = get_publisher().get_source_catalog()
                complete_term_map = source_catalog.get_complete_mapping()
                title, records = records_by_journal(cursor, issn, 
                    term_map=complete_term_map)
                if len(records) == 0:
                    raise Exception('No records found')
                if str('.') in title:
                    title = title[0:title.index(str('.'))]
                else:
                    title = '-'
                cursor.close()
    
                return self.render_records(title, records)
        except:
            import traceback
            print traceback.print_exc()
            return not_found(self.type)
            


class MethodologyBrowseIndex (BrowseIndex):
        
    def __init__ (self, request):
        self.type = 'methodology'
        
    def _q_index [html] (self, request):

        header('Browse by Methodology')
        """
        <h2>Browse by Methodology</h2>
    
        <p>
    The Canary database curators determine, for each included study, the type
    of methodology employed by the researchers (using <a
    href='/about/classification_protocol'>this classification protocol</a>).  For
    detailed explanations of each, see our <a 
    href='/about/study_methodologies'>study methodology overview</a>.
        </p>
    
        <p>
    Below is a list of the number of articles in the Canary Database by their
    methodology.
        </p>
    
        <table cellspacing='3' class='gentable'>
            <tr>
                <th align='center'># articles</th>
                <th align='left'>Methodology</th>
            </tr>
        """
        cursor = get_publisher().get_cursor()
        records = records_by_methodology_index(cursor)
        cursor.close()
        meths = [(Methodology().get_text_value(Methodology.TYPES, 
                meth_id), meth_id, count) for meth_id, count in records]
        meths.sort()
        for meth_name, meth_id, count in meths:
            """
            <tr>
                <td align='center'>%s</td>
                <td align='left'><a href='/browse/methodology/%s'>%s</a></td>
            </tr>
            """ % (count, meth_id, meth_name.capitalize())
        """
        </table>
        """
        footer()


    def _q_lookup (self, request, name):
        try:
            if name:
                meth_id = int(name)
                cursor = get_publisher().get_cursor()
                records = records_by_methodology(cursor, meth_id)
                if len(records) == 0:
                    raise Exception('No records found')
                cursor.close()
                
                return self.render_records(Methodology().get_text_value(Methodology.TYPES,
                    meth_id).capitalize(), records)
            else:
                raise Error
        except:
            return not_found(self.type)
            
    

