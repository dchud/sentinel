from time import time

from quixote import get_publisher, get_session_manager
from quixote.errors import AccessError

from dulcinea.database import get_transaction
from dulcinea.persistent_session import DulcineaSession

from canary.qx_defs import MyDulcineaUser, NotLoggedInError
# CAUSES cycle and ImportError
#from canary.ui.search import Search
from canary.ui.pageframe import header, footer


def _q_index [html] (request):
    package_name = str('.').join(__name__.split(str('.'))[:-1])
    module_name = __name__
    module_file = __file__

    header('Index')

    """
    <p class='mission'>
    The <b>Canary Database</b> contains studies in the biomedical literature
    that explore the use of wildlife, domestic, and companion animals as
    "sentinels" for the effects of chemical, biological, and physical hazards
    in the environment that may be a risk to human health.
    </p>

    <p>
    The Canary Database allows you to locate sentinel studies according to:
    </p>

    <!--
    <table width='70%' border='0' cellspacing='10' cellpadding='5'>
        <tr>
            <td align='left' valign='top' width='50%'>
    -->
                <ul type='circle'>
                    <li>Hazards</li>
                    <li>Species</li>
                    <li>Disease outcomes (animal)</li>
                    <li>Study types</li>
    <!--
                </ul>
            </td>
            <td align='left' valign='top' width='50%'>
                <ul type='circle'>
    -->
                    <li>Authors</li>
                    <li>Subjects</li>
                    <li>Journals</li>
                </ul>
    <!--
            </td>
        </tr>
    </table>
    -->

    <p>
    You can browse the database by
        <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>,
        <a href='/browse/study_type'>study type</a>, or by
        <a href='/browse/heading'>subject heading</a>.
    </p>


    <p>
    Learn about several <a href='/about/examples'>known animal sentinels</a>
    and other <a href='/about/examples#possible'>possible sentinel events</a>.
    </p>


    <!--
    <h2>Note to Testers!</h2>

    <p>
    Please complete <a href='http://curtis.med.yale.edu/~dlc33/website_tester_feedback_form.doc'>this feedback form</a> (MS Word) and email the form to
    <b>sentinelstudies@yale.edu</b>, or fax to (203) 785-7391.
    Feel free to also attach additional comments where appropriate.
    </p>

    <p>
    Thank you!
    </p>
    -->

    """

    footer()


def _q_exception_handler [html] (request, exc):
    import string
    print string.join((request.get_path(),
                       exc.title,
                       exc.description,), '::')
    if isinstance(exc, NotLoggedInError):
        path = request.get_path()
        request.redirect(str('/user/login?go=%s' % (path)))
    elif isinstance(exc, AccessError):
        path = request.get_path()
        header('Access not allowed')
        """
        <h2>Access not allowed</h2>
        <p>
        The page you have requested is restricted.  If you feel you should
        have access to it, please <a href='/about/contact_us'>contact the
        site administrators</a>.
        </p>
        <p>
        You can <a href='/user'>return to your page</a>.
        </p>
        """
        footer()
    else:
        header('Error')
        """
        <h2>An error occured</h2>
        <p>
        Something went wrong.  Perhaps you requested a page that doesn't
        exist, or once existed, but has since been eaten by the canary.
        </p>
        """
        footer()


def not_found [html] (item_type='item'):
    header('%s not found' % item_type.capitalize())
    """
    <h2>%s not found</h2>

    <p>
    The requested %s was not found.
    </p>
    """ % (item_type.capitalize(), item_type)
    footer()



# FIXME: hide this somehow or at least discourage abuse better?
# NOTE: run this regularly from a cronjob with wget or equiv
def reaper [plain] (request):

    # FIXME: Cleaner way of handling realtime config data?
    db_root = get_publisher().get_root()
    # 3600 is one hour in seconds
    if db_root.has_key('last_reaper_time') \
        and time() - db_root['last_reaper_time'] < 3600:
        return 'not ok: run too recently'

    reap_counter = 0
    session_mgr = get_session_manager()
    for session_id in session_mgr.sorted_keys():
        existing_session = session_mgr[session_id]
        # 270000 is 75 hours in seconds, long enough to last a weekend
        if existing_session.get_access_age() > 270000:
            del(session_mgr[session_id])
            reap_counter += 1

    db_root['last_reaper_time'] = time()
    get_transaction().commit()
    return 'ok: %s session(s) reaped' % reap_counter
