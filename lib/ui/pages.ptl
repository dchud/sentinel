from time import time

from quixote import get_publisher, get_session_manager
from quixote.errors import AccessError, SessionError
from quixote.form2 import PasswordWidget, StringWidget, SubmitWidget


from dulcinea.database import get_transaction
from dulcinea.persistent_session import DulcineaSession

from canary.qx_defs import MyDulcineaUser, NotLoggedInError, MyForm
from canary.ui.pageframe import header, footer
# CAUSES cycle and ImportError
#from canary.ui.search import Search


def _q_index [html] (request):
    package_name = str('.').join(__name__.split(str('.'))[:-1])
    module_name = __name__
    module_file = __file__

    header('Index')

    """
    <p class='mission'>
    The <b>Canary Database</b> contains studies in the biomedical literature
    that explore the use of wildlife, domestic, and companion animals as
    "sentinels" for the effects of chemical, biological, and physical hazards
    in the environment that may be a risk to human health.
    </p>

    <p>
    The Canary Database allows you to locate sentinel studies according to:
    </p>

    <!--
    <table width='70%' border='0' cellspacing='10' cellpadding='5'>
        <tr>
            <td align='left' valign='top' width='50%'>
    -->
                <ul type='circle'>
                    <li>Hazards</li>
                    <li>Species</li>
                    <li>Disease outcomes (animal)</li>
                    <li>Study types</li>
    <!--
                </ul>
            </td>
            <td align='left' valign='top' width='50%'>
                <ul type='circle'>
    -->
                    <li>Authors</li>
                    <li>Subjects</li>
                    <li>Journals</li>
                </ul>
    <!--
            </td>
        </tr>
    </table>
    -->

    <p>
    You can browse the database by
        <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>,
        <a href='/browse/study_type'>study type</a>, or by
        <a href='/browse/heading'>subject heading</a>.
    </p>


    <p>
    Learn about several <a href='/about/examples'>known animal sentinels</a>
    and other <a href='/about/examples#possible'>possible sentinel events</a>.
    </p>


    <!--
    <h2>Note to Testers!</h2>

    <p>
    Please complete <a href='http://curtis.med.yale.edu/~dlc33/website_tester_feedback_form.doc'>this feedback form</a> (MS Word) and email the form to
    <b>sentinelstudies@yale.edu</b>, or fax to (203) 785-7391.
    Feel free to also attach additional comments where appropriate.
    </p>

    <p>
    Thank you!
    </p>
    -->

    """

    footer()


def _q_exception_handler [html] (request=None, exc):
    
    import string
    err_text = string.join((request.get_path(),
        exc.title,
        exc.description,), '::')
    print 'Error: %s' % err_text
    
    if isinstance(exc, NotLoggedInError):
        
        path = request.get_path()
        request.redirect(str('/login?go=%s' % (path)))
        
    elif isinstance(exc, AccessError):
        
        path = request.get_path()
        header('Access not allowed')
        """
        <h2>Access not allowed</h2>
        <p>
        The page you have requested is restricted.  If you feel you should
        have access to it, please <a href='/about/contact_us'>contact the
        site administrators</a>.
        </p>
        <p>
        You can <a href='/user'>return to your page</a>.
        </p>
        """
        footer()
        
    elif isinstance(exc, SessionError):
        session_mgr = get_session_manager()
        session_mgr.revoke_session_cookie(request)
        header('Expired or invalid session')
        """
        <h2>Expired or invalid session</h2>
        
        <p>
        Your session is invalid or has expired.  Please log 
        in again to start a new session.
        </p>
        """
        # FIXME:  clean up when form2 allows is_submitted control
        #form = LoginForm()
        #form.render()
        
        path = request.get_path()
        """
        <form method='post' action='/login'>
        
        <b>Your user id *</b>: <br />
        <input type='text' name='user_id' size='10'> <br />
        
        <b>Password *</b>: <br />
        <input type='password' name='user_pass' size='10'> <br />
        <input type='hidden' name='go' value='%s'>
        <input type='submit' name='login' value='login'>
        </form>
        """ % path

        footer()
        
    else:
        
        header('Error')
        """
        <h2>An error occured</h2>
        <p>
        Something went wrong.  Perhaps you requested a page that doesn't
        exist, or once existed, but has since been eaten by the canary.
        </p>
        """
        footer()


def not_found [html] (item_type='item'):
    header('%s not found' % item_type.capitalize())
    """
    <h2>%s not found</h2>

    <p>
    The requested %s was not found.
    </p>
    """ % (item_type.capitalize(), item_type)
    footer()


class LoginForm (MyForm):

    def __init__ (self):
        MyForm.__init__(self)
        self.add(StringWidget, 'user_id', title='Your user id',
                 size=10, required=1)
        self.add(PasswordWidget, 'user_pass', title='Password',
                 size=10, required=1)
        self.add_hidden('go', None)
        self.add(SubmitWidget, 'login', 'login')


def login [html] (request):

    # redirect if the user is already logged in
    try:
        if request.session.user != None:
            request.redirect(str('/user'))
    except:
        pass
        
    form = LoginForm()

    def render [html] ():
        header('Log in')
        """
        <h3>Log in:</h3>
        """
        form.render()
        footer()

    if not form.is_submitted():
        return render()

    user_id = form['user_id']
    user_pass = form['user_pass']
    user_db = get_publisher().get_user_db()
    user = user_db.get_user(user_id)
    if user == None:
        form.set_error('user_id', 'Invalid user id or password.')
    else:
        if not user.valid_password(user_pass):
            form.set_error('user_id', 'Invalid user id or password')

    if form.has_errors():
        return render()

    user_db = get_publisher().get_user_db()
    user = user_db.get_user(user_id)
    
    if not user == None:
        # allow user to have multiple sessions, but deal correctly
        # with expired session cookies (pages.reaper expires old sessions)
        session_mgr = get_publisher().session_mgr
        request.session.set_actual_user(user)
        get_transaction().commit()
        
        form.logger.info(str('User %s logged in' % user.id))
        
        if form['go']:
            return request.redirect(form['go'])
        else:
            return request.redirect(str('/user/'))
    else:
        request.session.user = None
        get_transaction().commit()
        return not_found('user')


def logout [html] (request):

    if request.session.user is None:
        header('Not logged in.')
        """
        <h2>Not logged in</h2>

        <p>
        You were not logged in.
        </p>

        <p>
        You can <a href='/login'>log in</a>.
        </p>
        """
    else:
        old_user_id = request.session.user.id
        get_session_manager().expire_session(request)
        header('Log out')
        form = LoginForm()
        form.logger.info(str('User %s logged out' % old_user_id))
        """
        <h2>Logged out</h2>

        <p>
        You have logged out.
        </p>

        <p>
        You can <a href='/login'>log in</a> again.
        </p>
        """
    footer()


# FIXME: hide this somehow or at least discourage abuse better?
# NOTE: run this regularly from a cronjob with wget or equiv
def reaper [plain] (request):

    # FIXME: Cleaner way of handling realtime config data?
    db_root = get_publisher().get_root()
    # 3600 is one hour in seconds
    if db_root.has_key('last_reaper_time') \
        and time() - db_root['last_reaper_time'] < 3600:
        return 'not ok: run too recently'

    reap_counter = 0
    session_mgr = get_session_manager()
    for session_id in session_mgr.sorted_keys():
        existing_session = session_mgr[session_id]
        # 270000 is 75 hours in seconds, long enough to last a weekend
        if existing_session.get_access_age() > 270000:
            del(session_mgr[session_id])
            reap_counter += 1

    db_root['last_reaper_time'] = time()
    get_transaction().commit()
    return 'ok: %s session(s) reaped' % reap_counter
