# $Id$

from time import time

from quixote import get_publisher, get_request, get_session_manager
from quixote.errors import AccessError, SessionError
from quixote import form2

from canary.qx_defs import NotLoggedInError, MyForm
from canary.ui.pageframe import header, footer
from canary.user import get_user_by_id


def _q_index [html] (request):
    package_name = str('.').join(__name__.split(str('.'))[:-1])
    module_name = __name__
    module_file = __file__

    header('Index')

    """
<table border='0' cellspacing='0' cellpadding='0'>
    <tr valign='top'>
    <td width='400' valign='top' class='rightspace'>

    <h1>The Canary Database</h1>
    <p>
    The Canary Database contains studies in the biomedical literature
    that explore the use of wildlife, domestic, and companion animals as
    &quot;sentinels&quot; for the effects of chemical, biological, and 
    physical hazards in the environment that may be a risk to human health.
    </p>

    <h3>
    The Canary Database allows you to locate and visualize patterns
    in sentinel studies according to:
    </h3>

    <table width='70%' border='0' cellspacing='10' cellpadding='5'>
        <tr>
            <td align='left' valign='top'>
                <ul type='circle'>
                    <li>Exposures</li>
                    <li>Disease outcomes (animal)</li>
                    <li>Species (and types)</li>
                </ul>
            </td>
            <td align='left' valign='top'>
                <ul type='circle'>
                    <li>Study methodologies</li>
                    <li>Authors</li>
                    <li>Journals</li>
                    <li>Locations</li>
                </ul>
            </td>
        </tr>
    </table>

    <p>
    You can browse the database by
        <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>, or by
        <a href='/browse/methodology'>methodology</a>.
    </p>

    </td>

    <td valign='top'>

    <div class='news'>
        <div class='news-head'>
            Beta tester questionnaire
        </div>
        <h3>Attention beta testers!</h3>
        <p>
        Please fill out <a href='/about/questionnaire'>this questionnaire</a>. 
        Your continuing support and feedback helps us to improve 
        the site.
        </p>
        
    </div>

    <div class='news'>
    
        <div class='news-head'>
            Take a tour
        </div>
        <p>
        Take a quick tour of the Canary Database.
    
            <a href='/about/tour' title='Take a tour'>
            <img border='0' src='/images/tour-record-small.jpg' 
            alt='small tour image'/></a>
        </p>
    </div>
    
    </td>
    </tr>
</table>


    <!--
    <h2>Note to Testers!</h2>

    <p>
    Please complete <a href='http://curtis.med.yale.edu/~dlc33/website_tester_feedback_form.doc'>this feedback form</a> (MS Word) and email the form to
    <b>sentinelstudies@yale.edu</b>, or fax to (203) 785-7391.
    Feel free to also attach additional comments where appropriate.
    </p>

    <p>
    Thank you!
    </p>
    -->

    """

    footer()


def _q_exception_handler [html] (request=None, exc):
    
    import string
    err_text = string.join((request.get_path(),
        exc.title,
        exc.description,), '::')
    print 'Error: %s' % err_text
    
    if isinstance(exc, NotLoggedInError):
        
        path = request.get_path()
        request.redirect(str('/login?go=%s' % (path)))
        
    elif isinstance(exc, AccessError):
        
        path = request.get_path()
        header('Access not allowed')
        """
        <h2>Access not allowed</h2>
        <p>
        The page you have requested is restricted.  If you feel you should
        have access to it, please <a href='/about/contact_us'>contact the
        site administrators</a>.
        </p>
        <p>
        You can <a href='/user'>return to your page</a>.
        </p>
        """
        footer()
        
    elif isinstance(exc, SessionError):
        session_mgr = get_session_manager()
        session_mgr.revoke_session_cookie(request)
        header('Expired or invalid session')
        """
        <h2>Expired or invalid session</h2>
        
        <p>
        Your session is invalid or has expired.  Please log 
        in again to start a new session.
        </p>
        """
        # FIXME:  clean up when form2 allows is_submitted control
        #form = LoginForm(context)
        #form.render()
        
        path = request.get_path()
        """
        <form method='post' action='/login'>
        
        <b>Your user id *</b>: <br />
        <input type='text' name='user_id' size='10'> <br />
        
        <b>Password *</b>: <br />
        <input type='password' name='user_pass' size='10'> <br />
        <input type='hidden' name='go' value='%s'>
        <input type='submit' name='login' value='login'>
        </form>
        """ % path

        footer()
        
    else:
        
        header('Error')
        """
        <h2>An error occured</h2>
        <p>
        Something went wrong.  Perhaps you requested a page that doesn't
        exist, or once existed, but has since been eaten by the canary.
        </p>
        """
        footer()


def not_found [html] (item_type='item'):
    header('%s not found' % item_type.capitalize())
    """
    <h2>%s not found</h2>

    <p>
    The requested %s was not found.
    </p>
    """ % (item_type.capitalize(), item_type)
    footer()


class LoginForm (MyForm):

    def __init__ (self, context):
        MyForm.__init__(self, context)
        self.add(form2.StringWidget, 'user_id', title='Your user id',
                 size=10, required=True)
        self.add(form2.PasswordWidget, 'user_pass', title='Password',
                 size=10, required=True)
        self.add_hidden('go', None)
        self.add_submit('login', 'login')


def login [html] (request):

    context = get_publisher().context
    # redirect if the user is already logged in
    try:
        if request.session.user != None:
            request.redirect(str('/user'))
    except:
        pass
        
    form = LoginForm(context)

    def render [html] ():
        header('Log in')
        """
        <h3>Log in:</h3>
        
        <p>
        <b>Please note</b> that while the Canary Database is in private beta
        mode, <b>all access must be authorized</b>.  If you have been invited to be
        a beta tester and require access, or are having trouble logging in
        with the access information already provided to you, please 
        <a href='/about/contact_us'>contact us</a> for assistance.
        </p>
        """
        form.render()
        footer()

    if not form.is_submitted():
        return render()

    user_id = form['user_id']
    user_pass = form['user_pass']
    user = get_user_by_id(context, user_id)
    if user == None:
        form.set_error('user_id', 'Invalid user id or password.')
    else:
        if not user.valid_password(user_pass):
            form.set_error('user_id', 'Invalid user id or password')

    if form.has_errors():
        """
        for k, v in form.__dict__.items():
            print 'form: %s == %s' % (k, v)
        for w in form.widgets:
            if w.error:
                print 'widget %s error: %s' % (w.name, w.error)
        """
        return render()

    session_mgr = get_session_manager()
    request.session.set_user(user)
        
    form.logger.info(str('User %s logged in' % user.id))
        
    if form['go']:
        return request.redirect(form['go'])
    else:
        return request.redirect(str('/user/'))


def logout [html] (request):

    context = get_publisher().context
    
    if request.session.user is None:
        header('Not logged in.')
        """
        <h2>Not logged in</h2>

        <p>
        You were not logged in.
        </p>

        <p>
        You can <a href='/login'>log in</a>.
        </p>
        """
    else:
        old_user_id = request.session.user.id
        get_session_manager().expire_session(request)
        header('Log out')
        form = LoginForm(context)
        form.logger.info(str('User %s logged out' % old_user_id))
        """
        <h2>Logged out</h2>

        <p>
        You have logged out.
        </p>

        <p>
        You can <a href='/login'>log in</a> again.
        </p>
        """
    footer()


def add_message (msg):
    """
    Add arbitrary text messages (typically warnings) to the session,
    to be rendered on next page view.  Initialize request.session.messages
    if necessary.
    """
    get_request().session.add_message(msg)

def has_messages ():
    return get_request().session.has_messages()
        
def render_messages [html] ():
    # Show any messages added to the session, then remove upon rendering.
    session = get_request().session
    try:
        messages = session.messages.split(str('~~'))
        messages = [m for m in messages if not m == '']
        if len(messages) > 0:
            """
            <p>
            <ul>
            """
            for message in messages:
                """
                <li><span style='color:red;'>%s</span></li>
                """ % message
            """
            </ul>
            </p>
            """
            session.clear_messages()
    except:
        import traceback
        print traceback.print_exc()


# FIXME: hide this somehow or at least discourage abuse better?
# NOTE: run this regularly from a cronjob with wget or equiv
def reaper [plain] (request):

    context = get_publisher().context
    # FIXME: Cleaner way of handling realtime config data?
    db_root = context.get_root()
    # 3600 is one hour in seconds
    if db_root.has_key('last_reaper_time') \
        and time() - db_root['last_reaper_time'] < 3600:
        return 'not ok: run too recently'

    reap_counter = 0
    session_mgr = get_session_manager()
    for session_id in session_mgr.sorted_keys():
        existing_session = session_mgr[session_id]
        # 270000 is 75 hours in seconds, long enough to last a weekend
        if existing_session.get_access_age() > 270000:
            del(session_mgr[session_id])
            reap_counter += 1

    db_root['last_reaper_time'] = time()
    return 'ok: %s session(s) reaped' % reap_counter
