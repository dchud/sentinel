# $Id$

_q_exports = [
    '_q_index',
    'delete',
    ]

import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

import canary.context
from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.record import SubjectHeading
from canary.study import find_risk_factors, RiskFactor, Study
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_risk_factors, render_pipeline
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages


def _q_index [html] (request):
    header('RiskFactor:')
    """
    <h2>RiskFactor</h2>
    """
    footer()


class RiskFactorActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, risk_factor_id):
        self.risk_factor_id = risk_factor_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.risk_factor_id = int(self.risk_factor_id)
            if action == 'delete':
                return delete(self.risk_factor_id)
            else:
                raise TraversalError
        except:
            return not_found('risk factor')




def find [html] (request):

    queued_record = QueuedRecord(request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(queued_record.study_id)
    study_concepts = getattr(study, str('risk_factors'))
    
    context = canary.context.Context()
    source_catalog = context.get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = queued_record.get_mapped_metadata(term_map=complete_term_map)
    
    # It's possible (w/qualifiers) that subjects can repeat, so thin out multiples
    subject_list = mapped_metadata['subject'] or []
    subjects = []
    for subject in subject_list:
        heading = SubjectHeading(subject)
        if not heading.term in subjects:
            subjects.append(heading.term)
    
    subjects.sort()
    select_options = [('-', '-', '-')]
    if len(subjects) > 0:
        concept_terms = [c.term for c in study_concepts]
        for subject in subjects:
            if not subject in concept_terms:
                select_options.append((subject, subject, subject))
    
    form = MyForm()
    form.add(form2.StringWidget, 'search_term',
        title='Add any risk factor:',
        size='30',
        required=False)
    form.add(form2.SingleSelectWidget, 'record_subject',
        title='Or use index term:',
        size=1,
        options=select_options,
        required=True)
    form.add_submit('find_find', 'find')
    form.add_submit('find_add', 'add')
    
        
    def render [html] ():
        header('Find risk factor', show_javascript=True)
        """
        <h3>Find risk factor</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
    
    if not form['record_subject'] == '-':
        search_term = form['record_subject']
    else:
        search_term = form['search_term']
        
    risk_factors = find_risk_factors(search_term)
    if len(risk_factors) == 0:
        form.set_error('search_term', 'No risk factors found.')
        
    if form.has_errors() \
        or has_messages():
        return render()

    
    header('Find risk factor', show_javascript=True)
    """
    <h3>Find risk factor</h3>
    """
    render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
    render_queued_record(queued_record)
    render_messages()
    form.render()
    render_found_risk_factors(study, risk_factors, search_term)
    render_unclaim_block()
    footer()





def add [html] (request):
    
    queued_record = QueuedRecord(request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(queued_record.study_id)
    
    form = MyForm()
    form.action_url = 'add'
    form.add(form2.IntWidget, name='concept_source_id', value=None, required=True)
    form.add(form2.IntWidget, name='concept_id', value=None, required=True)
    form.add(form2.StringWidget, name='term', value=None, required=True)
    form.add_submit('add', 'add')
    
    def render [html] ():
        header('Add risk factor', show_javascript=True)
        """
        <h3>Find risk factor</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        render_risk_factors(study)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    risk_factor = RiskFactor()
    
    try:
        risk_factor.concept_id = form['concept_id']
    except:
        form.set_error('concept_id', 'Invalid concept id.')
        
    try:
        if risk_factor.UMLS_SOURCES.has_key(int(form['concept_source_id'])):
            risk_factor.concept_source_id = form['concept_source_id']
    except:
        form.set_error('concept_source_id', 'Must be valid concept source.')
    
    risk_factor.term = form['term']
    
    if form.has_errors():
        return render()
    
    try:
        study.add_risk_factor(risk_factor)
        risk_factor.save()
        study.add_history(curator_user_id=request.session.user.get_id(),
            message='Added risk factor "%s"' % risk_factor.term)
        study.save()
        form.logger.info(str('Added risk factor %s' % risk_factor.uid))
        add_message('Added risk factor')
        request.redirect(str('../curate_three'))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()



def delete [html] (risk_factor_id):
    
    request = get_request()
    queued_record = QueuedRecord(request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(queued_record.study_id)
    risk_factor = study.get_risk_factor(risk_factor_id)

    form = MyForm()
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this risk factor?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete risk factor', show_javascript=True)
        """
        <h3>Delete risk factor</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('../..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Deleting risk factor %s (%s).
        </p>
        """ % (risk_factor.term, risk_factor.UMLS_SOURCES[risk_factor.concept_source_id])
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            study.delete_risk_factor(risk_factor)
            study.add_history(curator_user_id=request.session.user.get_id(),
                message='Deleted risk factor "%s"' % risk_factor.term)
            study.save()
            add_message('RiskFactor deleted')
            form.logger.info(str('Deleted risk factor %s' % risk_factor_id))
        except:
            add_message('Unable to delete risk factor')
            form.logger.error(str('Unable to delete risk factor %s' % risk_factor_id))
    else:
        add_message('RiskFactor not deleted')

    request.redirect(str('/edit/study/%s/curate_three' % request.queued_record_id))
    
    
    
def render_found_risk_factors [html] (study, risk_factors, search_term):
    
    if len(risk_factors) == 0:
        return
        
    """
    <h4>Risk Factors found:</h4>
    
    <table class='gentable' id='risk_factors'>
        <tr>
            <th>umls id</th>
            <th>source</th>
            <th>preferred term</th>
            <th>synonyms</th>
            <th>actions</th>
        </tr>
    """
    
    for rf in risk_factors:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (rf.concept_id, rf.UMLS_SOURCES[rf.concept_source_id], 
            rf.term, '; '.join(rf.synonyms))
        
        if not study.has_risk_factor(rf):
            """
            <td>
                [<a href='add?concept_source_id=%s&amp;concept_id=%s&amp;term=%s'>add</a>]
            </td>
            """ % (rf.concept_source_id, rf.concept_id, urllib.quote_plus(rf.term))
        else:
            this_risk_factor = study.get_risk_factor_from_risk_factor(rf)
            if not this_risk_factor == None:
                """
                <td>
                    [<a href='%s/delete'>delete</a>]
                </td>
                """ % this_risk_factor.uid
            else:
                print 'Error: unable to find risk factor:', risk_factor
                """
                <td>
                    [error]
                </td>
                """
        
        """
        </tr>
        """
    """
    </table>
    """
    
