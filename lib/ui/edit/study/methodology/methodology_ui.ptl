_q_exports = [
    '_q_index',
    'create',
    'detail',
    'delete',
    'edit',
    ]


from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote.form2 import StringWidget, RadiobuttonsWidget, CheckboxWidget, SubmitWidget

from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import get_current_study, get_queued_record
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_pipeline
from canary.qx_defs import MyDulcineaUser, MyForm
from canary.study import Methodology
from canary.utils import is_valid_email, is_valid_password



def _q_index [html] (request):
    header('Methodology:')
    """
    <h2>Methodology</h2>
    """
    footer()


class MethodologyActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, methodology_id):
        self.methodology_id = methodology_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.methodology_id = int(self.methodology_id)
            if action == 'edit':
                return edit(self.methodology_id)
            elif action == 'detail':
                return detail(self.methodology_id)
            elif action == 'delete':
                return delete(self.methodology_id)
            else:
                raise TraversalError
        except:
            return not_found('methodology')



class MethodologyTypeForm (MyForm):
    
    def __init__ (self):
        MyForm.__init__(self)
        self.add(RadiobuttonsWidget, 'study_type', 
            value=None,
            title='Study type:',
            hint='Select a study type',
            options=[
                ('experimental', 'Manipulated exposures (experimental)?', 'experimental'),
                ('descriptive', 'A single sample group (descriptive)?', 'descriptive'),
                ('aggregate', 'Exposures measured in aggregate (aggregate)?', 'aggregate'),
                ('cohort', 'Forward directionality (cohort)?', 'cohort'),
                ('case control', 'Backward directionality (case control)?', 'case control'),
                ('cross sectional', 'Simultaneous directionality (cross sectional)?', 'cross sectional'),
                ],
            sort=False,
            required=True)
        self.add(SubmitWidget, 'continue', value='continue')


def create [html] (request):

    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    form = MethodologyTypeForm()

    def render [html] ():
        header('Create methodology', show_javascript=True)
        """
        <h3>Create methodology</h3>
        """
        render_pipeline(article_type, step=4, url_prefix='..')
        render_queued_record(queued_record)
        render_messages()
        """
        <form action='create' method='post'>
        """
        # Got to be sure to render the form_token
        form.get_widget('_form_id').render()
        
        """
        <h3>Manipulated exposures?</h3>
        <input type='radio' name='study_type'
            id='experimental' value='experimental' />
        <label for='experimental'>Experimental</label>

        <h3>No group comparisons?</h3>
        <input type='radio' name='study_type'
            id='descriptive' value='descriptive' />
        <label for='descriptive'>Descriptive</label>
    
        <h3>How was exposure measured?</h3>
        
        <div id='exposure-left'>
            <h4>Aggregate</h4>
            <input type='radio' name='study_type'
                id='aggregate' value='aggregate' />
            <label for='aggregate'>Aggregate</label>
        </div>
        
        <div id='exposure-right'>
            <h4>Individual -- Directionality?</h4>
            <input type='radio' name='study_type'
                id='cohort' value='cohort' />
            <label for='cohort'>Forward (cohort)</label>
    
            <input type='radio' name='study_type'
                id='case_control' value='case control' />
            <label for='case_control'>Backward (case control)</label>
    
            <input type='radio' name='study_type'
                id='cross_sectional' value='cross sectional' />
            <label for='cross_sectional'>Simultaneous (cross sectional)</label>
        </div>
        
        <div id='exposure-buttons' style='clear: both'>
            <input type='submit' name='continue' value='continue' />
        </div>
        
        </form>
        """
        
        render_unclaim_block()
        footer()

    #if not form.is_submitted():
    #    return render()
        
    if not form['study_type']:
        add_message('Please choose a study type')

    if form.has_errors() \
        or has_messages():
        return render()

    methodology = Methodology()
    methodology.study_id = study.uid
    methodology.set_study_type(form['study_type'])
        
    try:
        methodology.save(cursor)
        form.logger.info(str('Created methodology %s' % methodology.uid))
        request.redirect(str('%s/detail' % methodology.uid))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()


def detail [html] (methodology_id):

    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
        return not_found('methodology')
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    methodology = study.get_methodology(methodology_id)
    
    print 'calling create_form()'
    form = methodology.create_form()
    print 'got form'
    
    def render [html] ():
        header('Describe methodology', show_javascript=True)
        """
        <h3>Describe methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
        
    methodology.process_form(form)
    
    if form.has_errors():
        return render()
        
    try:
        print 'calling methodology.save()'
        methodology.save(cursor)
        print 'done'
        form.logger.info(str('Updated methodology %s' % methodology.uid))
        if form.get_submit() == 'update':
            return render()
        elif form.get_submit() == 'finish':
            request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()
        
    
def edit [html] (methodology_id):

    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
        return not_found('methodology')
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    methodology = study.get_methodology(methodology_id)
    
    form = methodology.create_form()
    form.add_submit('cancel', 'cancel')
    
    def render [html] ():
        header('Edit methodology', show_javascript=True)
        """
        <h3>Edit methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record, )
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
        
    methodology.process_form(form)
    
    if form.has_errors():
        return render()
        
    try:
        if form.get_submit() in ['update', 'finish']:
            methodology.save(cursor)
            form.logger.info(str('Updated methodology %s' % methodology.uid))
            if form.get_submit() == 'update':
                return render()
            elif form.get_submit() == 'finish':
                request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
        elif form.get_submit() == 'cancel':
            request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()



def delete [html] (methodology_id):
    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
        return not_found('methodology')
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    methodology = study.get_methodology(methodology_id)

    form = MyForm()
    form.add(CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this methodology?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete methodology', show_javascript=True)
        """
        <h3>Delete methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            methodology.delete(cursor)
            add_message('Methodology deleted')
            form.logger.info(str('Deleted methodology %s' % methodology_id))
        except:
            add_message('Unable to delete methodology')
            form.logger.error(str('Unable to delete user %s' % methodology_id))
    else:
        add_message('Methodology not deleted')

    request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
