from quixote import get_publisher, get_request

from canary.gazeteer import Feature
from canary.loader import QueuedRecord
from canary.record import SubjectHeading
from canary.study import Study
from canary.ui.pageframe import header, footer


def get_queued_record (cursor, id):
    
    try:
        queued_record = QueuedRecord()
        queued_record.uid = int(id)
        queued_record.load(cursor)
        return queued_record
    except:
        # FIXME: proper error handling
        print 'study_ui.get_queued_record(): queued_record unavailable'
        return None

def get_current_study (cursor, id):
    
    try:
        current_study = Study(int(id))
        current_study.load(cursor)
        return current_study
    except:
        return None

def render_queued_record [html] (queued_record, abstract=True):
    source_catalog = get_publisher().get_source_catalog()
    #source = source_catalog.get_source(queued_record.source_id)
    # FIXME: this is a hack!
    source = source_catalog.get_source(queued_record.metadata.keys()[0][0])
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = queued_record.get_mapped_metadata(term_map=complete_term_map)

    """
    <div class='queued_record'>
        <p>
            "%s", <em>%s</em>
        </p>
    """ % (mapped_metadata['title'] or '-', mapped_metadata['source'] or '-')
    
    if abstract:
        if not mapped_metadata['abstract'] == '':
            """
        <div class='label'>
            <span id='abstract-link'>Show/hide abstract</span>
        </div>
        <div class='abstract'>
            <p>
                <b>Abstract:</b> <br />
            """
            mapped_metadata['abstract']
            """
            </p>
        </div>
            """
        else:
            """
        <p>
        No abstract available.
        </p>
            """
    """
    </div>
    """
    
def is_same_user (queued_record):
    
    try:
        if queued_record.user_id == get_request().session.user.get_id():
            return True
        else:
            return False
    except:
        return False
        

def get_sfx_link (source_id, unique_identifier):
    source_catalog = get_publisher().get_source_catalog()
    source = source_catalog.get_source(source_id)
    query_string = source.sfx_pattern.replace('[[UI]]', unique_identifier)
    # FIXME!
    base_url = 'http://sfx.library.yale.edu/sfx_local?'
    return base_url + query_string
    
    
def claimed_by_other_user [html] ():
    header('Curate:  Record claimed by other user')
    """
    <h3>Curate:  Record claimed by other user</h3>
    
    <p>
    Sorry, that record has already been claimed by another user.
    </p>
    
    <p>
    You can return to the <a href='/edit'>editing queue</a>.
    </p>
    
    <p>
    You can <a href='/user'>go to your page</a>.
    </p>
    """
    footer()


def render_unclaim_block [html] ():
    queued_record_id = get_request().queued_record_id
    """
    <div id='unclaim'>
        <p>
    You have claimed this record; if you want to unclaim it, allowing
    another curator to curate it, you can <a href='/edit/study/%s/unclaim'>unclaim
    it here</a>.
        </p>
    </div>
    """ % queued_record_id
    
    
def render_exposures [html] (study):
    """
    <table class='gentable' id='exposures'>
        <tr>
            <th>exposure</th>
            <th>source</th>
            <th>actions</th>
        </tr>
    """
    for exp in study.exposures:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>
                [<a href='exposure/%s/delete'>delete</a>]
            </td>
        </tr>
        """ % (exp.term, exp.UMLS_SOURCES[exp.concept_source_id], exp.uid)
    """
    </table>
    """

def render_subject_selector [html] (record, study, concept_type):
    
    if not concept_type in ['exposures', 'outcomes', 'species']:
        return

    study_concepts = getattr(study, str(concept_type))
    source_catalog = get_publisher().get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = record.get_mapped_metadata(term_map=complete_term_map)
    
    # It's possible (w/qualifiers) that subjects can repeat, so thin out multiples
    subject_list = mapped_metadata['subject'] or []
    subjects = []
    for subject in subject_list:
        heading = SubjectHeading(subject)
        if not heading.term in subjects:
            subjects.append(heading.term)
    
    subjects.sort()
    """
    <select name='record_subject' size='1'>
        <option value='-'>-</option>
    """
    if len(subjects) > 0:
        concept_terms = [concept.term for concept in study_concepts]
        for subject in subjects:
            if not subject in concept_terms:
                """
            <option value='%s'>%s</option>
                """ % (subject, subject)
    """
    </select>
    """
    
def render_outcomes [html] (study):
    """
    <table class='gentable' id='outcomes'>
        <tr>
            <th>outcome</th>
            <th>source</th>
            <th>actions</th>
        </tr>
    """
    for outcome in study.outcomes:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>[<a href='outcome/%s/delete'>delete</a>]</td>
        </tr>
        """ % (outcome.term, outcome.UMLS_SOURCES[outcome.concept_source_id], 
            outcome.uid)
    """
    </table>
    """

def render_species [html] (study):
    """
    <table class='gentable' id='species'>
        <tr>
            <th>species</th>
            <th>source</th>
            <th>actions</th>
        </tr>
    """
    for spec in study.species:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>[<a href='species/%s/delete'>delete</a>]</td>
        </tr>
        """ % (spec.term, spec.UMLS_SOURCES[spec.concept_source_id], 
            spec.uid)
    """
    </table>
    """


def render_locations [html] (cursor, study):
    gazeteer = get_publisher().get_gazeteer()
    """
    <table class='gentable' id='locations'>
        <tr>
            <th>name</th>
            <th>type</th>
            <th>region</th>
            <th>country</th>
            <th>lat/long</th>
            <th>actions</th>
        </tr>
    """
    for location in study.locations:
        feature = Feature(uid=location.feature_id)
        feature.load(cursor)
        if gazeteer.fips_codes.has_key((feature.country_code, feature.adm1)):
            region_name = gazeteer.fips_codes[(feature.country_code, feature.adm1)]
        else:
            region_name = ''

        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>[<a href='location/%s/delete'>delete</a>]</td>
        </tr>
        """ % (feature.name, gazeteer.feature_codes[feature.feature_type],
            region_name, gazeteer.country_codes[feature.country_code],
            '%.2f / %.2f' % (feature.latitude, feature.longitude),
            location.uid)
    """
    </table>
    """


def render_pipeline [html] (article_type, step=1, url_prefix='.'):
    # Note that placeholder at steps[0] allows step number == steps[N]
    steps = [
        ('PLACEHOLDER', 'MAKES STEP INDEX LINE UP'),
        ('curate_one', 'Type'),
        ('curate_two', 'Data?'),
        ('curate_three', 'Exp/Out/Spec/Loc'),
        ('curate_four', 'Methodology'),
        ('summary', 'Summary'),
        ]
        
    """
    <div id='pipeline'>
        
        <ul>
    """
    if step == 1:
        render_pipeline_item(steps[1], url_prefix=url_prefix, is_link=True, is_active=True)
    else:
        render_pipeline_item(steps[1], url_prefix=url_prefix, is_link=True)
    
    if article_type in ['irrelevant']:
        render_pipeline_item(steps[2], url_prefix=url_prefix)
        render_pipeline_item(steps[3], url_prefix=url_prefix)
        render_pipeline_item(steps[4], url_prefix=url_prefix)
        
    #elif article_type in ['unknown', 'traditional', 'descriptive', 
    #    'review', 'exposures only', 'outcomes only']:
    #    if step == 2:
    #        render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True, is_active=True)
    #        render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True)
    #        render_pipeline_item(steps[4], url_prefix=url_prefix)
    #    elif step == 3:
    #        render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True)
    #        render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True, is_active=True)
    #        render_pipeline_item(steps[4], url_prefix=url_prefix)
    #    else:
    #        render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True)
    #        render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True)
    #        render_pipeline_item(steps[4], url_prefix=url_prefix)

    #elif article_type == 'curated':
    else:
        if step == 2:
            render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True, is_active=True)
            render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[4], url_prefix=url_prefix, is_link=True)
        elif step == 3:
            render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True, is_active=True)
            render_pipeline_item(steps[4], url_prefix=url_prefix, is_link=True)
        elif step == 4:
            render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[4], url_prefix=url_prefix, is_link=True, is_active=True)
        else:
            render_pipeline_item(steps[2], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[3], url_prefix=url_prefix, is_link=True)
            render_pipeline_item(steps[4], url_prefix=url_prefix, is_link=True)
        
    if step == 5:
        render_pipeline_item(steps[5], url_prefix=url_prefix, is_link=True, is_active=True)
    else:
        render_pipeline_item(steps[5], url_prefix=url_prefix, is_link=True)
    
    """    
        </ul>
        
    </div>
    """

def render_pipeline_item [html] (step, url_prefix='.', is_link=False, is_active=False):
    
    url, name = step
    if is_active:
        """
            <li id='active'><a href='%s/%s'>%s</a></li>
        """ % (url_prefix, url, name)
    else:
        if is_link:
            """
            <li><a href='%s/%s'>%s</a></li>
            """ % (url_prefix, url, name)
        else:
            """
            <li>%s</li>
            """ % name

 
