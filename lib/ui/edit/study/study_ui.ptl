_q_exports = [
    '_q_index',
    'curate_one',
    'curate_two',
    'curate_three',
    'curate_four',
    'summary',
    'unclaim',
    ]

from log4py import Logger

from quixote import get_publisher, get_request
from quixote.errors import AccessError, PublishError, TraversalError
from quixote.form2 import CheckboxWidget, RadiobuttonsWidget, SubmitWidget

from dulcinea.database import get_transaction

from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.study import Study
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import get_current_study, get_queued_record
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import claimed_by_other_user, render_unclaim_block
from canary.ui.record_ui import render_methodologies

    
def title_bar [html] (action=''):
    """
    <h2>
        <a href='/edit/'>Edit</a>
    """
    if not action == '':
        ' : %s' % (action)
    """
    </h2>
    """


def _q_index [html] (request):
    header('Edit')
    title_bar('Edit')
    """
    <h2>a study</h2>
    """
    footer()

 
class StudyActions:

    _q_exports = [
        '_q_index',
        'methodology',
        'exposure',
        #'outcome',
        #'species',
        #'location',
        ]

    from canary.ui.edit.study import methodology
    from canary.ui.edit.study import exposure
    #from canary.ui.edit.study import outcomes
    

    def __init__ (self, queued_record_id):
        try:
            self.queued_record_id = int(queued_record_id)
            get_request().queued_record_id = self.queued_record_id
        except:
            return not_found('record')

    def _q_index [html] (self, request):
        request.redirect(str('curate_one'))
        
    def _q_lookup [html] (self, request, action):
        try:
            if action == 'curate_one':
                return curate_one(request, self.queued_record_id)
            elif action == 'curate_two':
                return curate_two(request, self.queued_record_id)
            elif action == 'curate_three':
                return curate_three(request, self.queued_record_id)
            elif action == 'curate_four':
                return curate_four(request, self.queued_record_id)
            elif action == 'summary':
                return summary(request, self.queued_record_id)
            elif action == 'unclaim':
                return unclaim(request, self.queued_record_id)
            elif action == 'methodology':
                print 'action == methodology'
                print 'returning methodology from _q_lookup()'
                return methodology
            elif action == 'exposure':
                print 'action == exposure'
                return exposure
            #elif action == 'outcome':
            #    return outcome(request, self.queued_record_id)
            #elif action == 'species':
            #    return species(request, self.queued_record_id)
            #elif action == 'location':
            #    return location(request, self.queued_record_id)
            else:
                raise TraversalError
        except:
            return not_found('study')


def curate_one [html] (request, queued_record_id):
    
    print 'curate_one()'
    session = request.session
    cursor = get_publisher().get_cursor()
    
    try:
        queued_record_id = int(queued_record_id)
    except:
        raise(TraversalError)
    
    print 'loading record'
    queued_record = get_queued_record(cursor, queued_record_id)
    # if it's None, bail
    # FIXME: best way?  or is that right?

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
            
    if queued_record.study_id >= 0:
        study = get_current_study(cursor, queued_record.study_id)
    else:
        study = None
    

    # if it's not already, set its status to CLAIMED and its curator 
    record_updated = False

    if queued_record.status == queued_record.STATUS_UNCLAIMED:
        queued_record.status = queued_record.STATUS_CLAIMED
        record_updated = True
    
    if queued_record.user_id == '':
        queued_record.user_id = session.user.get_id()
        record_updated = True

    if record_updated:
        print 'updating record'
        queued_record.save(cursor)

    print 'checking article type'
    a_type = 'none'
    article_type = 'unknown'
    
    if not study == None:
        article_type = study.get_article_type(text=True)
        if article_type in ['irrelevant', 'traditional', 'descriptive', 'review']:
            a_type = 'is_%s' % article_type

    print 'generating form'
    form = MyForm()
    form.add(RadiobuttonsWidget, 
        name='article_type',
        title='Choose an article type:',
        value=str(a_type),
        #hint='Select a type',
        options=[
            ('is_irrelevant', 'Irrelevant', 'is_irrelevant'),
            ('is_traditional', 'Traditional', 'is_traditional'),
            ('is_descriptive', 'Descriptive', 'is_descriptive'),
            ('is_review', 'Review', 'is_review'),
            ('none', 'None of these (To be classified)', 'none'),
            ],
        sort=False,
        required=True)
    form.add(SubmitWidget, 'continue', value='continue')

    def render [html] ():
        print 'render()'
        header('Curate: select type')
        """
        <h3>Curate: select type</h3>
        """
        render_pipeline(article_type, step=1)
        render_queued_record(queued_record)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    if form.has_errors():
        return render()
    
    # Initialize, if necessary
    if study == None:
        study = Study()
    
    print 'article_type ==', form['article_type']
    
    # check for all values; it might be updated to any
    if form['article_type'] == 'is_irrelevant':
        study.set_article_type('irrelevant')
    elif form['article_type'] == 'is_traditional':
        study.set_article_type('traditional')
    elif form['article_type'] == 'is_descriptive':
        study.set_article_type('descriptive')
    elif form['article_type'] == 'is_review':
        study.set_article_type('review')
    elif form['article_type'] == 'none':
        study.set_article_type('unknown')
    
    print 'updating record and study'
    study.set_status('claimed')
    study.record_id = queued_record_id
    study.curator_user_id = session.user.get_id()
    study.save(cursor)
    queued_record.curator_user_id = study.curator_user_id
    queued_record.study_id = study.uid
    queued_record.save(cursor)
    cursor.close()
    
    #form.logger.info(str('saved record %s as study %s step one' % \
    #    (queued_record.uid, study.uid)))
    
    article_type = study.get_article_type(text=True)
    
    if article_type in ['irrelevant', 'traditional']:
        request.redirect(str('summary'))
    else:
        request.redirect(str('curate_two'))



def curate_two [html] (request, queued_record_id):
    
    print 'curate_two()'
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    # 'traditional' studies don't get this layer of classification
    if article_type == 'traditional':
        request.redirect(str('summary'))

    print 'setting up form'
    form = MyForm()
    form.add(CheckboxWidget, 
        'has_exposures',
        title='Animal environmental exposures', 
        value=study.has_exposures)
    form.add(CheckboxWidget, 
        'has_outcomes',
        title='Animal health outcomes', 
        value=study.has_outcomes)
    form.add(CheckboxWidget,
        'has_relationships',
        title='Animal exposure/outcome relationships',
        value=study.has_relationships)
    form.add(CheckboxWidget, 
        'has_interspecies',
        title='Differing susceptibilities among species',
        value=study.has_interspecies)
    form.add(CheckboxWidget,
        'has_exposure_linkage',
        title='Shared animal and human exposures',
        value=study.has_exposure_linkage)
    form.add(CheckboxWidget,
        'has_outcome_linkage',
        title='Linkage between animal exposure/outcome and human health outcomes',
        value=study.has_outcome_linkage)
    form.add(CheckboxWidget,
        'has_genomic',
        title='Linkage to genomic data',
        value=study.has_genomic)
    
    form.add(SubmitWidget, 'continue', value='continue')
    
    def render [html] ():
        header('Curate: specify included data')
        """
        <h3>Curate: specify included data</h3>
        """
        render_pipeline(article_type, step=2)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Indicate whether the study includes each of the following kinds of data.
        </p>
        """
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()

    print 'processing'
    for bool_item in [
        'has_exposures',
        'has_outcomes',
        'has_relationships',
        'has_interspecies',
        'has_exposure_linkage',
        'has_outcome_linkage',
        'has_genomic',
        ]:
        if form[bool_item]:
            setattr(study, str(bool_item), True)
        else:
            setattr(study, str(bool_item), False)
    
    # studies noted as article_type['review'] must stay as 'review'
    if not article_type == 'review':
        
        if study.has_exposures:
            if study.has_outcomes:
                study.set_article_type('curated')
            else:
                study.set_article_type('exposures only')
        
        elif study.has_outcomes:
            # study.has_exposures must == False
            study.set_article_type('outcomes only')
            
        else:
            # FIXME: is this correct?
            study.set_article_type('traditional')
            
    if form.has_errors():
        return render()

    study.save(cursor)
    cursor.close()
    
    # re-assign value here as it should have changed
    article_type = study.get_article_type(text=True)

    form.logger.info(str('saved study %s (%s) step two' % (study.uid, article_type)))
    
    if article_type in ['traditional',]:
        request.redirect(str('summary'))
    else:
        request.redirect(str('curate_three'))


def curate_three [html] (request, queued_record_id):

    print 'curate_three()'
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    if article_type in ['traditional',]:
        request.redirect(str('summary'))

    header('Curate: exposures, outcomes, species, locations')
    """
    <h3>Curate: exposures, outcomes, species, locations</h3>
    """
    render_pipeline(article_type, step=3)
    render_queued_record(queued_record)
    render_messages()
    """
    <p>
    Add the following information as necessary.
    </p>
    """
    
    if study.has_exposures:
        """
        <h4>Exposures</h4>
        <p>
        This is where you will add exposures.
        </p>
        """
        
    if study.has_outcomes:
        """
        <h4>Outcomes</h4>
        <p>
        This is where you will add outcomes.
        </p>
        """
        
    """    
    <h4>Locations</h4>
    <p>
    This is where you will add locations.
    </p>
    
    <h4>Species</h4>
    <p>
    This is where you will add species.
    </p>
    """

    """
    <h4>Continue</h4>
    <p>
    """
    if article_type == 'curated':
        """
        Next step: <a href='curate_four'>add methodologies</a>.
        """
    else:
        """
        Next step: <a href='summary'>summary</a>.
        """
    """
    </p>
    """
    
    render_unclaim_block()
    footer()
    

def curate_four [html] (request, queued_record_id):
    
    print 'curate_four()'
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    if not article_type == 'curated':
        request.redirect(str('summary'))

    header('Curate: specify methodology')
    """
    <h3>Curate: specify methodology</h3>
    """
    render_pipeline(article_type, step=4)
    render_queued_record(queued_record)
    render_messages()

    """
    <h4>Methodologies</h4>
    <p>
    """
    render_methodologies(study, show_actions=True)
    if len(study.methodologies) == 0:
        """
        You must <a href='methodology/create'>add a methodology</a>.
        """
    else:
        """
        <p>
        You can <a href='methodology/create'>add a methodology</a>.
        </p>
        
        <p>
        You can <a href='summary'>continue to the summary</a>.
        """
    """
    </p>
    """
    render_unclaim_block()
    footer()


def summary [html] (request, queued_record_id):
    
    print 'summary()'
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()

    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    print 'checking for required minimums'
    if study.has_exposures \
        and len(study.exposures) == 0:
        #add_message('You must add at least one exposure.')
        pass
    print 'check1'
    if study.has_outcomes \
        and len(study.outcomes) == 0:
        #add_message('You must add at least one outcome.')
        pass
    print 'check2'
    if article_type == 'curated' \
        and len(study.species) == 0:
        # FIXME
        #add_message('You must add at least one species')
        pass
    print 'check3'
    if has_messages():
        request.redirect(str('curate_three'))

    print 'creating form'
    form = MyForm()
    form.add_submit('finish', 'finish')
    
    def render [html] ():
        print 'render()'
        header('Curate: summary')
        """
        <h3>Curate: summary</h3>
        """
        render_pipeline(article_type, step=5)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Please review all of the information you have provided
        and make changes as needed.
        </p>
        """
        
        """
        <h4>Article type: %s</h4>
        """ % article_type

        if article_type == 'curated':
            render_methodologies(study)
        
        form.render()
        render_unclaim_block()
        footer()
        
    if not form.is_submitted():
        return render()
        
    # FIXME: when are type errors (e.g. IntWidget) thrown?  when has_errors()
    # is called after study.process_summary_form() non-int data gets in.  
    # Reverse for now.  Still, bad data shows with errors, why not refreshed 
    # from db?
    if form.has_errors():
        return render()
    
    if form.get_submit() == str('update'):
        cursor.close()
        form.logger.info(str('Updated study %s' % study.uid))
        request.redirect(str('summary'))
    elif form.get_submit() == str('finish'):
        print 'updating queued record'
        queued_record.status = queued_record.STATUS_CURATED
        queued_record.save(cursor)
        cursor.close()
        form.logger.info(str('Finished curating study %s' % study.uid))
        request.redirect(str('/edit'))
    else:
        print 'no submit button matched name %s' % form.get_submit()
        request.redirect(str('summary'))


def unclaim [html] (request, queued_record_id):
    
    session = request.session
    queued_record = QueuedRecord()
    queued_record.uid = int(queued_record_id)
    
    cursor = get_publisher().get_cursor()
    queued_record.load(cursor)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if queued_record.user_id != session.user.get_id():
            print 'user mismatch'
            return claimed_by_other_user()
    elif queued_record.status == queued_record.STATUS_UNCLAIMED:
        return not_claimed()

    form = MyForm()
    form.add(CheckboxWidget, 'are_you_sure', 
        title='Are you sure?', value=False)
    form.add(SubmitWidget, 'unclaim', value='unclaim')

    def render [html] ():
        header('Curate: Unclaim study')
        """
        <h3>Curate: Unclaim study</h3>
        """
        render_queued_record(queued_record)
        form.render()
        footer()
    
    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    are_you_sure = form['are_you_sure']
    if are_you_sure:
        session.queued_record = None
        queued_record.status = queued_record.STATUS_UNCLAIMED
        queued_record.user_id = ''
        queued_record.save(cursor)
        header('Edit: Study unclaimed')
        """
        <h3>Edit:  Study unclaimed</h3>
        """
        form.logger.info(str('study %s unclaimed by %s' % \
            (queued_record.uid, session.user.get_id())))
    else:
        header('Edit: Study not unclaimed')
        """
        <h3>Edit: Study not unclaimed</h3>
        """
    
    """
        <p>
        You can go back to the <a href='/edit'>editing queue</a>.
        </p>
        
        <p>
        You can <a href='/user'>go to your page</a>.
        </p>
    """

    cursor.close()
    footer()
    
    
    
def not_claimed [html] ():
    header('Curate:  Record not claimed')
    """
    <h3>Curate:  Record not claimed</h3>
    
    <p>
    Sorry, you cannot unclaim that record.
    </p>
    
    <p>
    You can return to the <a href='/edit'>editing queue</a>.
    </p>
    
    <p>
    You can <a href='/user'>go to your page</a>.
    </p>
    """
    footer()
    


def render_pipeline [html] (article_type, step=1):
    # Note that placeholder at steps[0] allows step number == steps[N]
    steps = [
        ('PLACEHOLDER', 'MAKES STEP INDEX LINE UP'),
        ('curate_one', 'Type'),
        ('curate_two', 'Data?'),
        ('curate_three', 'Exp/Out/Spec/Loc'),
        ('curate_four', 'Methodology'),
        ('summary', 'Summary'),
        ]
        
    print 'render_pipeline(article_type=%s, step=%s)' % (article_type, step)
    """
    <div id='pipeline'>
        
        <ul>
    """
    if step == 1:
        render_pipeline_item(steps[1], is_link=True, is_active=True)
    else:
        render_pipeline_item(steps[1], is_link=True)
    
    if article_type in ['irrelevant', 'traditional']:
        render_pipeline_item(steps[2])
        render_pipeline_item(steps[3])
        render_pipeline_item(steps[4])
        
    elif article_type in ['unknown', 'descriptive', 'review', 
        'exposures only', 'outcomes only']:
        if step == 2:
            render_pipeline_item(steps[2], is_link=True, is_active=True)
            render_pipeline_item(steps[3], is_link=True)
            render_pipeline_item(steps[4])
        elif step == 3:
            render_pipeline_item(steps[2], is_link=True)
            render_pipeline_item(steps[3], is_link=True, is_active=True)
            render_pipeline_item(steps[4])
        else:
            render_pipeline_item(steps[2], is_link=True)
            render_pipeline_item(steps[3], is_link=True)
            render_pipeline_item(steps[4])

    elif article_type == 'curated':
        if step == 2:
            render_pipeline_item(steps[2], is_link=True, is_active=True)
            render_pipeline_item(steps[3], is_link=True)
            render_pipeline_item(steps[4], is_link=True)
        elif step == 3:
            render_pipeline_item(steps[2], is_link=True)
            render_pipeline_item(steps[3], is_link=True, is_active=True)
            render_pipeline_item(steps[4], is_link=True)
        elif step == 4:
            render_pipeline_item(steps[2], is_link=True)
            render_pipeline_item(steps[3], is_link=True)
            render_pipeline_item(steps[4], is_link=True, is_active=True)
        else:
            render_pipeline_item(steps[2], is_link=True)
            render_pipeline_item(steps[3], is_link=True)
            render_pipeline_item(steps[4], is_link=True)
        
    if step == 5:
        render_pipeline_item(steps[5], is_link=True, is_active=True)
    else:
        render_pipeline_item(steps[5], is_link=True)
    
    """    
        </ul>
        
    </div>
    """

def render_pipeline_item [html] (step, is_link=False, is_active=False):
    
    url, name = step
    if is_active:
        """
            <li id='active'><a href='%s'>%s</a></li>
        """ % (url, name)
    else:
        if is_link:
            """
            <li><a href='%s'>%s</a></li>
            """ % (url, name)
        else:
            """
            <li>%s</li>
            """ % name
