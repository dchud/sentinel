_q_exports = [
    '_q_index',
    'curate_one',
    'curate_two',
    'curate_three',
    'curate_four',
    'summary',
    'unclaim',
    ]

from log4py import Logger

from quixote import get_publisher, get_request
from quixote.errors import AccessError, PublishError, TraversalError
from quixote.form2 import CheckboxWidget, RadiobuttonsWidget, SubmitWidget

from dulcinea.database import get_transaction

from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.study import Study
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import get_current_study, get_queued_record
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import claimed_by_other_user, render_unclaim_block
from canary.ui.edit.study.utils import render_exposures, render_outcomes, render_species
from canary.ui.edit.study.utils import render_pipeline
from canary.ui.record_ui import render_methodologies

    
def title_bar [html] (action=''):
    """
    <h2>
        <a href='/edit/'>Edit</a>
    """
    if not action == '':
        ' : %s' % (action)
    """
    </h2>
    """


def _q_index [html] (request):
    header('Edit')
    title_bar('Edit')
    """
    <h2>a study</h2>
    """
    footer()

 
class StudyActions:

    _q_exports = [
        '_q_index',
        'methodology',
        'exposure',
        'outcome',
        'species',
        #'location',
        ]

    from canary.ui.edit.study import methodology
    from canary.ui.edit.study import exposure
    from canary.ui.edit.study import outcome
    from canary.ui.edit.study import species
    

    def __init__ (self, queued_record_id):
        try:
            self.queued_record_id = int(queued_record_id)
            get_request().queued_record_id = self.queued_record_id
        except:
            return not_found('record')

    def _q_index [html] (self, request):
        request.redirect(str('curate_one'))
        
    def _q_lookup [html] (self, request, action):
        try:
            if action == 'curate_one':
                return curate_one(request, self.queued_record_id)
            elif action == 'curate_two':
                return curate_two(request, self.queued_record_id)
            elif action == 'curate_three':
                return curate_three(request, self.queued_record_id)
            elif action == 'curate_four':
                return curate_four(request, self.queued_record_id)
            elif action == 'summary':
                return summary(request, self.queued_record_id)
            elif action == 'unclaim':
                return unclaim(request, self.queued_record_id)
            elif action == 'methodology':
                return methodology
            elif action == 'exposure':
                return exposure
            elif action == 'outcome':
                return outcome
            elif action == 'species':
                return species
            #elif action == 'location':
            #    return location(request, self.queued_record_id)
            else:
                raise TraversalError
        except:
            return not_found('study')


def curate_one [html] (request, queued_record_id):
    
    session = request.session
    cursor = get_publisher().get_cursor()
    
    try:
        queued_record_id = int(queued_record_id)
    except:
        raise(TraversalError)
    
    queued_record = get_queued_record(cursor, queued_record_id)
    # if it's None, bail
    # FIXME: best way?  or is that right?

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
            
    if queued_record.study_id >= 0:
        study = get_current_study(cursor, queued_record.study_id)
    else:
        study = None
    

    # if it's not already, set its status to CLAIMED and its curator 
    record_updated = False

    if queued_record.status == queued_record.STATUS_UNCLAIMED:
        queued_record.status = queued_record.STATUS_CLAIMED
        record_updated = True
    
    if queued_record.user_id == '':
        queued_record.user_id = session.user.get_id()
        record_updated = True

    print 'updating queued_record'
    if record_updated:
        queued_record.save(cursor)

    a_type = 'none'
    article_type = 'none'
    
    print 'setting article_type'
    if not study == None:
        article_type = study.get_article_type(text=True)
        if article_type in ['irrelevant', 'traditional', 'descriptive', 'review']:
            a_type = 'is_%s' % article_type

    print 'setting up form'
    form = MyForm()
    form.add(RadiobuttonsWidget, 
        name='article_type',
        title='Choose an article type:',
        value=str(a_type),
        #hint='Select a type',
        options=[
            ('is_irrelevant', 'Irrelevant', 'is_irrelevant'),
            ('is_traditional', 'Traditional', 'is_traditional'),
            ('is_descriptive', 'Descriptive', 'is_descriptive'),
            ('is_review', 'Review', 'is_review'),
            ('none', 'None of these (To be classified)', 'none'),
            ],
        sort=False,
        required=True)
    form.add(SubmitWidget, 'continue', value='continue')

    def render [html] ():
        header('Curate: select type', show_javascript=True)
        """
        <h3>Curate: select type</h3>
        """
        render_pipeline(article_type, step=1)
        render_queued_record(queued_record)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    if form.has_errors():
        return render()
    
    # Initialize, if necessary
    if study == None:
        study = Study()
    
    # check for all values; it might be updated to any
    if form['article_type'] == 'is_irrelevant':
        study.set_article_type('irrelevant')
    elif form['article_type'] == 'is_traditional':
        study.set_article_type('traditional')
    elif form['article_type'] == 'is_descriptive':
        study.set_article_type('descriptive')
    elif form['article_type'] == 'is_review':
        study.set_article_type('review')
    elif form['article_type'] == 'none':
        study.set_article_type('unknown')
    
    study.set_status('claimed')
    study.record_id = queued_record_id
    study.curator_user_id = session.user.get_id()
    study.save(cursor)
    queued_record.curator_user_id = study.curator_user_id
    queued_record.study_id = study.uid
    queued_record.save(cursor)
    cursor.close()
    
    #form.logger.info(str('saved record %s as study %s step one' % \
    #    (queued_record.uid, study.uid)))
    
    article_type = study.get_article_type(text=True)
    
    if article_type in ['irrelevant']:
        request.redirect(str('summary'))
    else:
        request.redirect(str('curate_two'))



def curate_two [html] (request, queued_record_id):
    
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    # 'irrelevant' studies don't get this layer of classification
    if article_type in ['irrelevant']:
        request.redirect(str('summary'))

    form = MyForm()
    form.add(CheckboxWidget, 
        'has_exposures',
        title='Animal environmental exposures', 
        value=study.has_exposures)
    form.add(CheckboxWidget, 
        'has_outcomes',
        title='Animal health outcomes', 
        value=study.has_outcomes)
    form.add(CheckboxWidget,
        'has_relationships',
        title='Animal exposure/outcome relationships',
        value=study.has_relationships)
    form.add(CheckboxWidget, 
        'has_interspecies',
        title='Differing susceptibilities among species',
        value=study.has_interspecies)
    form.add(CheckboxWidget,
        'has_exposure_linkage',
        title='Shared animal and human exposures',
        value=study.has_exposure_linkage)
    form.add(CheckboxWidget,
        'has_outcome_linkage',
        title='Linkage between animal exposure/outcome and human health outcomes',
        value=study.has_outcome_linkage)
    form.add(CheckboxWidget,
        'has_genomic',
        title='Linkage to genomic data',
        value=study.has_genomic)
    
    form.add(SubmitWidget, 'continue', value='continue')
    
    def render [html] ():
        header('Curate: specify included data', show_javascript=True)
        """
        <h3>Curate: specify included data</h3>
        """
        render_pipeline(article_type, step=2)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Indicate whether the study includes each of the following kinds of data.
        </p>
        """
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()

    for bool_item in [
        'has_exposures',
        'has_outcomes',
        'has_relationships',
        'has_interspecies',
        'has_exposure_linkage',
        'has_outcome_linkage',
        'has_genomic',
        ]:
        if form[bool_item]:
            setattr(study, str(bool_item), True)
        else:
            setattr(study, str(bool_item), False)
    
    # studies noted as article_type['review'] must stay as 'review'
    if not article_type in ['traditional', 'descriptive', 'review']:
        
        if study.has_exposures:
            
            if study.has_outcomes:
                study.set_article_type('curated')
            else:
                study.set_article_type('exposures only')
        
        elif study.has_outcomes:
            
            study.set_article_type('outcomes only')
            
            
    if form.has_errors():
        return render()

    print 'updating study'
    study.save(cursor)
    cursor.close()
    
    form.logger.info(str('saved study %s step two' % study.uid))
    
    request.redirect(str('curate_three'))


def curate_three [html] (request, queued_record_id):

    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    if article_type in ['irrelevant']:
        request.redirect(str('summary'))

    header('Curate: exposures, outcomes, species, locations', show_javascript=True)
    """
    <h3>Curate: exposures, outcomes, species, locations</h3>
    """
    render_pipeline(article_type, step=3)
    render_queued_record(queued_record)
    render_messages()
    
    if study.has_exposures:
        """
    <fieldset>
        <legend>Exposures</legend>
        """
        render_exposures(study)
        """
        <form method='POST' action='exposure/find'>
            <p>
            Add an exposure:
            <input type='text' name='search_term' size='30' />
            <input type='submit' name='find' value='find' />
            </p>
        </form>
    </fieldset>
        """
        
    if study.has_outcomes:
        """
    <fieldset>
        <legend>Outcomes</legend>
        """
        render_outcomes(study)
        """
        <form method='POST' action='outcome/find'>
            <p>
            Add an outcome:
            <input type='text' name='search_term' size='30' />
            <input type='submit' name='find' value='find' />
            </p>
        </form>
    </fieldset>
        """
        
    """    
    <fieldset>
        <legend>Species</legend>
    """
    render_species(study)
    """
        <form method='POST' action='species/find'>
            <p>
            Add a species:
            <input type='text' name='search_term' size='30' />
            <input type='submit' name='find' value='find' />
            </p>
        </form>
    </fieldset>
    """

    """
    <fieldset>
        <legend>Locations</legend>
        <p>
        This is where you will add locations.
        </p>
    </fieldset>
    """


    """
    <h4>Continue</h4>
    <p>
    Next step: <a href='curate_four'>add methodologies</a>.
    </p>
    """
    
    render_unclaim_block()
    footer()
    

def curate_four [html] (request, queued_record_id):
    
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    if article_type in ['irrelevant']:
        request.redirect(str('summary'))

    header('Curate: specify methodology', show_javascript=True)
    """
    <h3>Curate: specify methodology</h3>
    """
    render_pipeline(article_type, step=4)
    render_queued_record(queued_record)
    render_messages()

    """
    <h4>Methodologies</h4>
    <p>
    """
    render_methodologies(study, show_actions=True)
    if article_type in ['curated'] \
        and len(study.methodologies) == 0:
        """
        You must <a href='methodology/create'>add a methodology</a>.
        """
    else:
        """
        <p>
        You can <a href='methodology/create'>add a methodology</a>.
        </p>
        
        <p>
        You can <a href='summary'>continue to the summary</a>.
        """
    """
    </p>
    """
    render_unclaim_block()
    footer()


def summary [html] (request, queued_record_id):
    
    session = request.session
    cursor = get_publisher().get_cursor()
    queued_record = get_queued_record(cursor, queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()

    study = get_current_study(cursor, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    if article_type == 'curated':
        
        if len(study.exposures) == 0:
            add_message('You must add at least one exposure.')
        
        if len(study.outcomes) == 0:
            add_message('You must add at least one outcome.')
        
        if len(study.species) == 0:
            add_message('You must add at least one species')
        
    if has_messages():
        request.redirect(str('curate_three'))

    form = MyForm()
    form.add_submit('finish', 'finish')
    
    def render [html] ():
        header('Curate: summary', show_javascript=True)
        """
        <h3>Curate: summary</h3>
        """
        render_pipeline(article_type, step=5)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Please review all of the information you have provided
        and make changes as needed.
        </p>
        """
        
        """
        <h4>Article type: %s</h4>
        """ % article_type

        if not article_type in ['irrelevant']:
            """
            <table class='gentable' id='summary'>
            """
            
            if study.has_exposures \
                and len(study.exposures) > 0:
                render_summary_concept_row(study.exposures, 'exposures')
                
            if study.has_outcomes \
                and len(study.outcomes) > 0:
                render_summary_concept_row(study.outcomes, 'outcomes')
                
            if len(study.species) > 0:
                render_summary_concept_row(study.species, 'species')
                
            """
            </table>
            """

        if not article_type in ['irrelevant']:
            render_methodologies(study)
        
        form.render()
        render_unclaim_block()
        footer()
        
    if not form.is_submitted():
        return render()
        
    if form.has_errors():
        return render()
    
    if form.get_submit() == str('update'):
        cursor.close()
        form.logger.info(str('Updated study %s' % study.uid))
        request.redirect(str('summary'))
    elif form.get_submit() == str('finish'):
        queued_record.status = queued_record.STATUS_CURATED
        queued_record.save(cursor)
        cursor.close()
        form.logger.info(str('Finished curating study %s' % study.uid))
        request.redirect(str('/edit'))
    else:
        request.redirect(str('summary'))


def unclaim [html] (request, queued_record_id):
    
    session = request.session
    queued_record = QueuedRecord()
    queued_record.uid = int(queued_record_id)
    
    cursor = get_publisher().get_cursor()
    queued_record.load(cursor)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if queued_record.user_id != session.user.get_id():
            return claimed_by_other_user()
    elif queued_record.status == queued_record.STATUS_UNCLAIMED:
        return not_claimed()

    form = MyForm()
    form.add(CheckboxWidget, 'are_you_sure', 
        title='Are you sure?', value=False)
    form.add(SubmitWidget, 'unclaim', value='unclaim')

    def render [html] ():
        header('Curate: Unclaim study', show_javascript=True)
        """
        <h3>Curate: Unclaim study</h3>
        """
        render_queued_record(queued_record)
        form.render()
        footer()
    
    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    are_you_sure = form['are_you_sure']
    if are_you_sure:
        session.queued_record = None
        queued_record.status = queued_record.STATUS_UNCLAIMED
        queued_record.user_id = ''
        queued_record.save(cursor)
        header('Edit: Study unclaimed')
        """
        <h3>Edit:  Study unclaimed</h3>
        """
        form.logger.info(str('study %s unclaimed by %s' % \
            (queued_record.uid, session.user.get_id())))
    else:
        header('Edit: Study not unclaimed')
        """
        <h3>Edit: Study not unclaimed</h3>
        """
    
    """
        <p>
        You can go back to the <a href='/edit'>editing queue</a>.
        </p>
        
        <p>
        You can <a href='/user'>go to your page</a>.
        </p>
    """

    cursor.close()
    footer()
    
    
    
def not_claimed [html] ():
    header('Curate:  Record not claimed')
    """
    <h3>Curate:  Record not claimed</h3>
    
    <p>
    Sorry, you cannot unclaim that record.
    </p>
    
    <p>
    You can return to the <a href='/edit'>editing queue</a>.
    </p>
    
    <p>
    You can <a href='/user'>go to your page</a>.
    </p>
    """
    footer()
    

def render_summary_concept_row [html] (concepts, concept_name):
    """
    <tr>
        <th>%s</th>
        <td>
    """ % concept_name.capitalize()
    '; '.join([con.term for con in concepts])
    """
        </td>
    </tr>
    """
