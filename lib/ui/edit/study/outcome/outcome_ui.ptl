_q_exports = [
    '_q_index',
    'delete',
    ]

import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import get_current_study, get_queued_record
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_outcomes, render_pipeline
from canary.qx_defs import MyForm
from canary.study import find_outcomes, Outcome



def _q_index [html] (request):
    header('Outcome:')
    """
    <h2>Outcome</h2>
    """
    footer()


class OutcomeActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, outcome_id):
        self.outcome_id = outcome_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.outcome_id = int(self.outcome_id)
            if action == 'delete':
                return delete(self.outcome_id)
            else:
                raise TraversalError
        except:
            return not_found('outcome')




def find [html] (request):

    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    
    form = MyForm()
    form.add(form2.StringWidget, 'search_term',
        title='Specify the outcome to add:',
        size='30',
        required=True)
    form.add_submit('find', 'find')
    
        
    def render [html] ():
        header('Find outcome', show_javascript=True)
        """
        <h3>Find outcome</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
    
    outcomes = find_outcomes(cursor, form.get_widget('search_term').get_value())
    if len(outcomes) == 0:
        form.set_error('search_term', 'No outcomes found.')
        
    if form.has_errors() \
        or has_messages():
        return render()

    
    header('Find outcome', show_javascript=True)
    """
    <h3>Find outcome</h3>
    """
    render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
    render_queued_record(queued_record)
    render_messages()
    form.render()
    render_found_outcomes(study, outcomes, form['search_term'])
    render_unclaim_block()
    footer()





def add [html] (request):
    
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    
    form = MyForm()
    form.action_url = 'add'
    form.add(form2.IntWidget, name='concept_source_id', value=None, required=True)
    form.add(form2.IntWidget, name='concept_id', value=None, required=True)
    form.add(form2.StringWidget, name='term', value=None, required=True)
    form.add_submit('add', 'add')
    
    def render [html] ():
        header('Find outcome', show_javascript=True)
        """
        <h3>Find outcome</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        render_outcomes(study)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    outcome = Outcome()
    
    try:
        outcome.concept_id = form['concept_id']
    except:
        form.set_error('concept_id', 'Invalid concept id.')
        
    try:
        if outcome.UMLS_SOURCES.has_key(int(form['concept_source_id'])):
            outcome.concept_source_id = form['concept_source_id']
    except:
        form.set_error('concept_source_id', 'Must be valid concept source.')
    
    outcome.term = form['term']
    
    if form.has_errors():
        return render()
    
    try:
        study.add_outcome(outcome)
        outcome.save(cursor)
        form.logger.info(str('Added outcome %s' % outcome.uid))
        add_message('Added outcome')
        request.redirect(str('../curate_three'))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()



def delete [html] (outcome_id):
    
    request = get_request()
    cursor = get_publisher().get_cursor()
    try:
        queued_record = get_queued_record(cursor, request.queued_record_id)
    except:
        print 'no request.queued_record_id'
        return not_found('outcome')
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = get_current_study(cursor, queued_record.study_id)
    outcome = study.get_outcome(outcome_id)

    form = MyForm()
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this outcome?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete outcome', show_javascript=True)
        """
        <h3>Delete outcome</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('../..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Deleting outcome %s (%s).
        </p>
        """ % (outcome.term, outcome.UMLS_SOURCES[outcome.concept_source_id])
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            outcome.delete(cursor)
            add_message('Outcome deleted')
            form.logger.info(str('Deleted outcome %s' % outcome_id))
        except:
            add_message('Unable to delete outcome')
            form.logger.error(str('Unable to delete outcome %s' % outcome_id))
    else:
        add_message('Outcome not deleted')

    request.redirect(str('/edit/study/%s/curate_three' % request.queued_record_id))
    
    
    
def render_found_outcomes [html] (study, outcomes, search_term):
    
    if len(outcomes) == 0:
        return
        
    """
    <h4>Outcomes found:</h4>
    
    <table class='gentable' id='outcomes'>
        <tr>
            <th>umls id</th>
            <th>source</th>
            <th>preferred term</th>
            <th>synonyms</th>
            <th>actions</th>
        </tr>
    """
    
    for outcome in outcomes:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (outcome.concept_id, outcome.UMLS_SOURCES[outcome.concept_source_id], 
            outcome.term, '; '.join(outcome.synonyms))
        
        if not study.has_outcome(outcome):
            """
            <td>
                [<a href='add?concept_source_id=%s&amp;concept_id=%s&amp;term=%s'>add</a>]
            </td>
            """ % (outcome.concept_source_id, outcome.concept_id, urllib.quote_plus(outcome.term))
        else:
            this_outcome = study.get_outcome_from_outcome(outcome)
            if not this_outcome == None:
                """
                <td>
                    [<a href='%s/delete'>delete</a>]
                </td>
                """ % this_outcome.uid
            else:
                print 'Error: unable to find outcome:', outcome
                """
                <td>
                    [error]
                </td>
                """
        
        """
        </tr>
        """
    """
    </table>
    """
    
