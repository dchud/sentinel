from log4py import Logger

from quixote import get_publisher
from quixote.errors import AccessError, PublishError, TraversalError
from quixote.form2 import CheckboxWidget, TextWidget, SubmitWidget

from dulcinea.database import get_transaction

from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.qx_defs import MyForm
from canary.loader import QueuedRecord
from canary.study import Study


def exposures [html] (request, queued_record_id):
    
    print 'getting session and record'
    session = request.session
    cursor = get_publisher().get_cursor()
    
    # load the queued_record
    queued_record = QueuedRecord()
    queued_record.uid = int(queued_record_id)
    queued_record.load(cursor)
    print 'done'
   
    print 'creating study'
    # create a Study
    study = Study()
    study.record_id = queued_record.uid
    study.curator_user_id = session.user.get_id()
    study.is_exposures_only = True
    study.type = study.TYPE_EXPOSURES_ONLY
    
    print 'setting up form'
    form = MyForm()
    form.add(TextWidget, 'exposures', title='Exposures',
        rows=4, cols=60, wrap='virtual', required=False)
    form.add(CheckboxWidget, 'has_exposure_linkage', 
        title='Has exposure linkage to humans?', value=False)
    form.add(TextWidget, 'species', title='Species',
        rows=4, cols=60, wrap='virtual', required=False)
    form.add(CheckboxWidget, 'has_interspecies', 
        title='Has differing susceptabilities among species?', value=False)
    form.add(TextWidget, 'comments', title='Comments',
        rows=8, cols='60', wrap='virtual', required=False)
    form.add(SubmitWidget, 'submit', value='submit')

    def render [html] ():
        print 'rendering form'
        header('Curate review')
        """
        <h3>Curate review</h3>
        """
        form.render()
        footer()
    
    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    # set queued record state = finished
    comments = form['comments']
    if comments != None and comments != '':
        study.comments = comments

    # true by default / by definition
    study.meta['has_exposures'] = True
    study.meta['has_outcomes'] = False
    study.meta['has_outcome_linkage'] = False
    
    has_outcome_linkage = form['has_exposure_linkage']
    if has_exposure_linkage:
        study.meta['has_exposure_linkage'] = True
    
    has_interspecies = form['has_interspecies']
    if has_interspecies:
        study.meta['has_interspecies'] = True
        
    # save/update study
    study.status = study.STATUS_CURATED
    print 'saving/inserting study'
    study.save(cursor)
    
    # save/update queued_record
    print 'updating queued record status'
    queued_record.status = queued_record.STATUS_FINISHED
    print 'updating queued record'
    queued_record.save(cursor)

    # clean up    
    print 'cleaning up'
    cursor.close()

    # FIXME: should we just do this?
    # request.redirect('/edit/finished')
    
    header('Curate')
    """
    <h2>Record finished</h2>
    
    <p>
    Thank you!  The record has been saved.
    </p>
    
    <p>
    You can <a href='/user'>go to your page</a>.
    </p>
    
    <p>
    You can <a href='/edit'>go to the queue</a>.
    </p>
    """
    footer()
