# $Id$

_q_exports = [
    '_q_index',
    'delete',
    ]

import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

import canary.context
from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.record import SubjectHeading
from canary.study import find_species, Species, Study
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_species, render_pipeline


def _q_index [html] (request):
    header('Species:')
    """
    <h2>Species</h2>
    """
    footer()


class SpeciesActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, species_id):
        self.species_id = species_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.species_id = int(self.species_id)
            if action == 'delete':
                return delete(self.species_id)
            else:
                raise TraversalError
        except:
            return not_found('species')




def find [html] (request):

    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    study_concepts = getattr(study, str('species'))
    source_catalog = context.get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = queued_record.get_mapped_metadata(term_map=complete_term_map)
    
    # It's possible (w/qualifiers) that subjects can repeat, so thin out multiples
    subject_list = mapped_metadata['subject'] or []
    subjects = []
    for subject in subject_list:
        heading = SubjectHeading(subject)
        if not heading.term in subjects:
            subjects.append(heading.term)
    
    subjects.sort()
    select_options = [('-', '-', '-')]
    if len(subjects) > 0:
        concept_terms = [c.term for c in study_concepts]
        for subject in subjects:
            if not subject in concept_terms:
                select_options.append((subject, subject, subject))
        
    form = MyForm(context)
    form.add(form2.StringWidget, 'search_term',
        title='Specify the species to add:',
        size='30',
        required=False)
    form.add(form2.SingleSelectWidget, 'record_subject',
        title='Or use index term:',
        size=1,
        options=select_options,
        required=True)
    form.add_submit('find_find', 'find')
    form.add_submit('find_add', 'add')
    
        
    def render [html] ():
        header('Find species', show_javascript=True)
        """
        <h3>Find species</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if not form['record_subject'] == '-':
        search_term = form['record_subject']
    else:
        search_term = form['search_term']

    species_list = find_species(context, search_term)
    if len(species_list) == 0:
        form.set_error('search_term', 'No species found.')
        
    if form.has_errors() \
        or has_messages():
        return render()

    
    header('Find species', show_javascript=True)
    """
    <h3>Find species</h3>
    """
    render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
    render_queued_record(queued_record)
    render_messages()
    form.render()
    render_found_species(study, species_list, search_term)
    render_unclaim_block()
    footer()



def add [html] (request):
    
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    
    form = MyForm(context)
    form.action_url = 'add'
    form.add(form2.IntWidget, name='concept_source_id', value=None, required=True)
    form.add(form2.IntWidget, name='concept_id', value=None, required=True)
    form.add(form2.StringWidget, name='term', value=None, required=True)
    form.add_submit('add', 'add')
    
    def render [html] ():
        header('Find species', show_javascript=True)
        """
        <h3>Find species</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        render_species(study)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    spec = Species()
    
    try:
        spec.concept_id = form['concept_id']
    except:
        form.set_error('concept_id', 'Invalid concept id.')
        
    try:
        if spec.UMLS_SOURCES.has_key(int(form['concept_source_id'])):
            spec.concept_source_id = form['concept_source_id']
    except:
        form.set_error('concept_source_id', 'Must be valid concept source.')
    
    spec.term = form['term']
    
    if form.has_errors():
        return render()
    
    try:
        study.add_species(spec)
        spec.save(context)
        study.add_history(curator_user_id=request.session.user.get_id(),
            message='Added species "%s"' % spec.term)
        study.save(context)
        form.logger.info(str('Added species %s' % spec.uid))
        add_message('Added species')
        request.redirect(str('../curate_three'))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()



def delete [html] (species_id):
    
    request = get_request()
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    species = study.get_species(species_id)

    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this species?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete species', show_javascript=True)
        """
        <h3>Delete species</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('../..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Deleting species %s (%s).
        </p>
        """ % (species.term, species.UMLS_SOURCES[species.concept_source_id])
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            study.delete_species(context, species)
            study.add_history(curator_user_id=request.session.user.get_id(),
                message='Deleted species "%s"' % species.term)
            study.save(context)
            add_message('Species deleted')
            form.logger.info(str('Deleted species %s' % species_id))
        except:
            add_message('Unable to delete species')
            form.logger.error(str('Unable to delete species %s' % species_id))
    else:
        add_message('Species not deleted')

    request.redirect(str('/edit/study/%s/curate_three' % request.queued_record_id))
    
    
    
def render_found_species [html] (study, species, search_term):
    
    if len(species) == 0:
        return
        
    """
    <h4>species found:</h4>
    
    <table class='gentable' id='species'>
        <tr>
            <th>umls id</th>
            <th>source</th>
            <th>preferred term</th>
            <th>synonyms</th>
            <th>actions</th>
        </tr>
    """
    
    for spec in species:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (spec.concept_id, spec.UMLS_SOURCES[spec.concept_source_id], 
            spec.term, '; '.join(spec.synonyms))
        
        if not study.has_species(spec):
            """
            <td>
                [<a href='add?concept_source_id=%s&amp;concept_id=%s&amp;term=%s'>add</a>]
            </td>
            """ % (spec.concept_source_id, spec.concept_id, urllib.quote_plus(spec.term))
        else:
            this_spec = study.get_species_from_species(spec)
            if not this_spec == None:
                """
                <td>
                    [<a href='%s/delete'>delete</a>]
                </td>
                """ % this_spec.uid
            else:
                """
                <td>
                    [error]
                </td>
                """
        
        """
        </tr>
        """
    """
    </table>
    """
    
    
def types [html] (request):
    
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
            
    study = Study(context,queued_record.study_id)
    for spec in study.species:
        spec.clear_types()
        for type in spec.TYPES:
            var = request.get_form_var('species_%s_%s' % (spec.uid, type), '')
            if var:
                spec.add_type(type)
        spec.save(context)
        add_message('Updated species %s ("%s")' % (spec.uid, spec.term))
    
    # Force reload of this study to pick up species changes
    context.cache_delete('%s:%s' % (study.CACHE_KEY, study.uid))
    
    request.redirect(str('/edit/study/%s/curate_three' % queued_record.uid))
