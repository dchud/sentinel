_q_exports = ['_q_index',
              'view',
             ]

from log4py import Logger

from quixote import get_publisher
from quixote.errors import AccessError, PublishError, TraversalError

from canary.loader import Batch, Queue
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.ui.edit.study.utils import get_sfx_link
from canary.source_catalog import SourceCatalog


def title_bar [html] (action=''):
    """
    <h2>
        <a href='/edit/'>Edit</a>
    """
    if not action == '':
        ' : %s' % (action)
    """
    </h2>
    """


def _q_index [html] (request):
    header('Edit')
    title_bar('Edit')
    """
    <h2>a batch</h2>
    """
    footer()


class BatchActions:

    _q_exports = ['_q_index',
                 ]

    def __init__ (self, batch_id):
        self.batch_id = batch_id

    def _q_index [html] (self, request):
        header('Edit')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            if action == 'view':
                start = request.get_form_var('start', default=0)
                size = request.get_form_var('size', default=25)
                try:
                    start = int(start)
                    size = int(size)
                except ValueError:
                    return view(request, batch_id=self.batch_id)
                if start != None and size != None:
                    return view(request, batch_id=self.batch_id, start=start, size=size)
                elif start != None:
                    return view(request, batch_id=self.batch_id, start=start)
                elif size != None:
                    return view(request, batch_id=self.batch_id, size=size)
                else:
                    return view(request, batch_id=self.batch_id)
            else:
                raise TraversalError
        except:
            return not_found('batch')


def view [html] (request, batch_id=None, start=0, size=25):
    # FIXME: Refactor this, why is it all in a big try/except?
    
    header('Edit: View queued records')
    title_bar('View queued records, batch %s' % batch_id)
    
    try:
        cursor = get_publisher().get_cursor()
        batch = Batch()
        batch.uid = int(batch_id)
        #batch.load(cursor, start=start, size=size)
        # We avoid loading all metadata here because batches might be big
        # (i.e. too much metadata to load every time).
        batch.load(cursor, load_metadata=False)
        if not batch.name == '':
            """
            <h4>Batch: '%s'</h4>
            """ % batch.name
        else:
            """
            <h4>Batch: (unnamed)</h4>
            """
            
        if len(batch.queued_records) > 0:
            pager(batch, start, size)
            """
            <table cellspacing='5' id='batch_view' class='gentable'>
                <tr>
                    <th>id</th>
                    <th>Status</th>
                    <th>User</th>
                    <th>Title</th>
                    <th>Source</th>
                    <th>Actions</th>
                </tr>
            """
            
            for record_id, record in batch.queued_records.items()[start:start+size]:
                status = record.get_status()
                if not status == record.STATUS_CURATED:
                    """
                    <tr>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                        <td>%s</td>
                    """ % (record_id, record.get_status(text=True),
                        record.user_id, record.title, record.source)
                        
                    """
                        <td>
                            [<a href='%s'>sfx links</a>]
                    """ % get_sfx_link(batch.source_id, record.unique_identifier)
                    
                    if status == record.STATUS_UNCLAIMED:
                        """
                            [<a href='/edit/study/%s/curate_one'>curate</a>]
                        """ % record_id
                    elif status == record.STATUS_CLAIMED:
                        if record.user_id == request.session.user.get_id():
                            """
                            [<a href='/edit/study/%s/curate_one'>curate</a>]
                            [<a href='/edit/study/%s/unclaim'>unclaim</a>]
                            """ % (record_id, record_id)
                        else:
                            """
                            [claimed]
                            """
                """
                    </td>
                </tr>
                """    
            """
            </table>
            """
            pager(batch, start, size)
        cursor.close()
    except:
        raise PublishError

    footer()


def pager [html] (batch, start, size):
    
    # total number of pages, by size, in this list
    num_pages = len(batch.queued_records) / size

    # currently viewed page, as determined by size, within this list
    cur_page = start / size
    
    # no need to show the pager if there's only one page
    if num_pages > 1:
        '''
        <p>
        Browse: 
        '''
        for i in range(0, num_pages):
            start = str((i * size) + 1)
            end = str((i + 1) * size)
            text = start + '-' + end
            if i != cur_page:
                ' <a href="view?start=%s&size=%s">%s</a> ' % (i * size, size, text)
            else:
                ' <b>%s</b> ' % text
        '''
        </p>
        '''

