_q_exports = [
    '_q_index',
    'find',
    'pubmed',
    'view',
    ]


from time import localtime, strftime

from quixote import get_publisher, get_request
from quixote.errors import AccessError, PublishError, TraversalError
from quixote import form2

from canary.loader import Batch, Queue, Parser
from canary.qx_defs import MyForm
from canary.search import PubmedSearch, Search
from canary.ui.edit.study.utils import get_sfx_link
from canary.ui.pageframe import header, footer
from canary.ui.pages import add_message, has_messages, render_messages, not_found


def title_bar [html] (action=''):
    """
    <h2>
        <a href='/edit/'>Edit</a>
    """
    if not action == '':
        ' : %s' % (action)
    """
    </h2>
    """

class FindRecordForm (MyForm):
    
    def __init__ (self):
        MyForm.__init__(self)
        self.action_url = '/edit/find'
        self.add(form2.SingleSelectWidget, 'field',
            value='author',
            title='Find by:',
            hint='Choose a field to search',
            options=[
                ('author', 'author name', 'author'),
                ('title', 'title (partial ok)', 'title'),
                ('canary id', 'canary record id', 'canary id'),
                ('unique id', 'external unique id', 'unique id'),
                ],
            sort=False,
            required=True)
        self.add(form2.StringWidget, 'token',
            title='Search for',
            required=True)
        self.add(form2.CheckboxWidget, 'allow_curated',
            value=False,
            title='Show already curated records too?')
        self.add_submit('find', 'find')



def _q_index [html] (request):
    
    source_catalog = get_publisher().get_source_catalog()
    cursor = get_publisher().get_cursor()
    
    header('Edit: Curator control panel')
    title_bar('Curator control panel')
    
    if has_messages():
        render_messages()
        
    """
    <fieldset>
        <legend>Find/load records</legend>
        
        <div id='curator-panel-left'>
            <h4>Find existing record</h4>
    """
    form = FindRecordForm()
    form.render()
    """
        </div>
    """
    
    """
        <div id='curator-panel-right'>
            <h4>Load a record from Pubmed/MEDLINE</h4>
    """
    form = LoadPubmedForm(batch_options=get_pubmed_batch_list(cursor))
    form.render()
    """
        </div>
    </fieldset>
    """
    
    """
    <h3>Current editing queue</h3>
    
    <table cellspacing='5' class='gentable'>
    <tr>
        <th>Batch</th>
        <th>Name</th>
        <th>Source</th>
        <th>Status (unclaimed/claimed/curated/total (% done))</th>
        <th>Load date</th>
        <th>Actions</th>
    </tr>
    """
    queue = Queue()
    queue.load(cursor)
    sort_list = [(b.name.lower(), b) for b in queue.batches]
    sort_list.sort()
    for n, batch in sort_list:
        batch_stats = batch.get_statistics(cursor)

        source_id = batch.source_id
        source = source_catalog.get_source(source_id)
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (batch.uid, batch.name, source.name)
        
        # Avoid division by zero for empty batches
        if batch.num_records > 0:
            percent_done = float(batch_stats['curated']) / batch.num_records * 100.0
        else:
            percent_done = 0
        """
            <td>%s / %s / %s / %s (%s%s done)</td>
        """ % (batch_stats['unclaimed'],
            batch_stats['claimed'],
            batch_stats['curated'],
            batch.num_records,
            str('%2.1f' % percent_done),
            str('%'))
        """
            <td>%s</td>
            <td>[<a href='/edit/batch/%s/view'>view</a>]</td>
        </tr>
        """ % (str(batch.date_added)[0:10], batch.uid)
    """
    </table>
    """
    
    """
    <br />
    <br />
    <h3>My claimed records</h3>
    
    <table cellspacing='5' class='gentable'>
        <tr>
            <th>Record</th>
            <th>Batch</th>
            <th>Title</th>
            <th>Source</th>
            <th>Actions</th>
        </tr>
    """
    for batch in queue.batches:
        batch.load(cursor)
        for record_id, record in batch.queued_records.items():
            if record.status == record.STATUS_CLAIMED \
                and record.user_id == request.session.user.get_id():
                """
        <tr>
            <td>%s</td>
                """ % record_id
                
                """
            <td><a href='/edit/batch/%s/view'>%s</a></td>
                """ % (batch.uid, batch.name)
                
                """
            <td>%s</td>
            <td>%s</td>
                """ % (record.title, record.source)
                    
                """
            <td>
                [<a href='%s'>sfx links</a>]
                """ % get_sfx_link(batch.source_id, record.unique_identifier)
            
                """
                [<a href='/edit/study/%s/curate_one'>curate</a>]
                [<a href='/edit/study/%s/unclaim'>unclaim</a>]
                """ % (record_id, record_id)
                """
            </td>
        </tr>
                """    
    """
    </table>
    """
    footer()
    
    
    
def find [html] (request):
    
    form = FindRecordForm()
    
    def render [html] ():
        header('Edit: Find record')
        title_bar('Find record')
        form.render()
        footer()
        
    if not form.is_submitted():
        return render()
        
    field = form['field']
    token = form['token']
    allow_curated = False
    if form['allow_curated']:
        allow_curated = True
    
    if not field in ['canary id', 'unique id']:
        if len(form['token']) <= 2:
            form.set_error('token', 'Please search for at least three characters')
            
    if form.has_errors():
        return render()
    
    source_catalog = get_publisher().get_source_catalog()
    complete_mapping = source_catalog.get_complete_mapping()
    search = Search(field=field, token=token, allow_curated=allow_curated,
        allow_uncurated=True)
    
    try:
        cursor = get_publisher().get_cursor()
        results = search.search(cursor, term_mapping=complete_mapping)
    except:
        form.info(str('Unable to perform search'))
        form.set_error('token', 'Unable to perform search')
        return render()
        
    header('Edit: Find record')
    res = results.get_results()
    title_bar('Find record: "%s" (%s): %s result(s)' % (token, field, len(res)))
    render_results(res)
    footer()
    
    

class LoadPubmedForm (MyForm):
    
    def __init__ (self, batch_options=[]):
        MyForm.__init__(self)
        self.action_url = '/edit/pubmed'
        self.add(form2.IntWidget, 'pmid',
            title='PMID:',
            size=8,
            hint='Enter the PMID to load',
            required=False)
        self.add(form2.StringWidget, 'keywords',
            title='Keywords:',
            size=30,
            hint='Enter keywords to find',
            required=False)
        self.add(form2.SingleSelectWidget, 'batch_id',
            title='Add to batch:',
            options=batch_options,
            sort=False,
            required=True)
        self.add_hidden('queue', value='search')
        self.add_submit('find', 'find')


def get_pubmed_batch_list (cursor):

    source_catalog = get_publisher().get_source_catalog()
    pm_source = source_catalog.get_source_by_name('pubmed-medline')

    queue = Queue()
    queue.load(cursor)
    
    # Set up sort-by-name, but only for pubmed batches.
    batch_list = [(b.name.lower(), (b.uid, b.name, b.uid)) \
        for b in queue.batches \
        if b.source_id == pm_source.uid]
    batch_list.sort()
    
    # Eliminate the names used for sort, keep just the tuples
    batch_list = [t for n, t in batch_list]

    # Allow (require) a new batch if none exist.
    if batch_list == []:
        batch_list = [(-1, ' - new batch - ', -1)]
    
    return batch_list
    

def pubmed [html] (request):

    cursor = get_publisher().get_cursor()
    source_catalog = get_publisher().get_source_catalog()
    pm_source = source_catalog.get_source_by_name('pubmed-medline')

    queue = Queue()
    queue.load(cursor)
    batch_list = get_pubmed_batch_list(cursor)
    
    form = LoadPubmedForm(batch_options=batch_list)
    
    def render [html] ():
        header('Edit: Load from Pubmed')
        title_bar('Load from Pubmed')
        form.render()
        footer()
        
    if not form.is_submitted():
        return render()
    
    if not form['pmid'] \
        and not form['keywords']:
        form.set_error('pmid', 'Please enter a PMID, or keywords.')
        
    if form.has_errors():
        return render()

    pmsearch = PubmedSearch()
    if form['pmid']:
        pmid = form['pmid']
        data = pmsearch.fetch(pmid)
    else:
        keywords = form['keywords']
        data = pmsearch.search(keywords)
        
    mapped_terms = source_catalog.get_mapped_terms(pm_source.uid)
    parser = Parser(pm_source)
    recs = parser.parse(mapped_terms=mapped_terms, is_email=False, data=data)
    
    header('Edit: Load from Pubmed')
    if form['pmid']:
        title_bar('Load from Pubmed, PMID %s' % pmid)
    else:
        title_bar('Load from Pubmed, keywords "%s"' % keywords)
    
    if form['queue'] \
        and form['queue'] == 'add':
        queue = Queue()
        queue.load(cursor)
        batch = queue.get_batch(form['batch_id'])
        if not batch:
            batch = Batch(source_id=pm_source.uid)
            batch.name = 'pubmed-load-' + strftime(str('%Y-%m'), localtime())
        batch.add_records(recs)
        batch.save(cursor)
        add_message('Added record to batch %s' % batch.name)
        request.redirect(str('/edit'))
        
    else:
        if len(recs) > 0:
            """
            <table cellspacing='5' id='batch_view' class='gentable'>
                <tr>
                    <th>PMID</th>
                    <th>Authors</th>
                    <th>Title</th>
                    <th>Source</th>
                    <th>Actions</th>
                </tr>
            """
            for rec in recs:
                if not rec.metadata == {}:
                    mapped_metadata = rec.get_mapped_metadata(term_map=mapped_terms)
                    """
                <tr>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>[<a href='pubmed?pmid=%s&batch_id=%s&queue=add'>queue</a>]</td>
                </tr>
                    """ % (mapped_metadata['unique_identifier'],
                        ', '.join(mapped_metadata['author']),
                        mapped_metadata['title'],
                        mapped_metadata['source'],
                        mapped_metadata['unique_identifier'],
                        form['batch_id']
                        )
            """
            </table>
            """
        footer()
    

def render_results [html] (results):
    
    request = get_request()
    
    """
    <table cellspacing='5' id='batch_view' class='gentable'>
        <tr>
            <th>id</th>
            <th>Status</th>
            <th>User</th>
            <th>Title</th>
            <th>Source</th>
            <th>Actions</th>
        </tr>
    """
    
    for record in results:
        status = record.get_status()
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (record.uid, record.get_status(text=True),
            record.user_id, record.title, record.source)
            
        """
            <td>
                [<a href='/edit/study/%s/history'>history</a>]
        """ % record.uid
        
        if status == record.STATUS_UNCLAIMED:
            """
                [<a href='/edit/study/%s/curate_one'>curate</a>]
            """ % record.uid
        elif status == record.STATUS_CLAIMED:
            if record.user_id == request.session.user.get_id():
                """
                [<a href='/edit/study/%s/curate_one'>curate</a>]
                [<a href='/edit/study/%s/unclaim'>unclaim</a>]
                """ % (record.uid, record.uid)
            else:
                """
                [claimed]
                """
        elif status == record.STATUS_CURATED:
            """
                [<a href='/edit/study/%s/summary'>edit</a>]
            """ % record.uid
            
        """
            </td>
        </tr>
        """  
        
    """
    </table>
    """



