
import urllib

from quixote import get_publisher

from canary.ui.pageframe import header, footer


# FIXME: move to render ui??
def render_result_row [html] (authors,
                              title,
                              source,
                              pmid):
    link_width = '20%'
    """
    <tr>
        <td align='left' valign='top'>
            <a href='/record/%(pmid)s'>%(authors)s</a> <br />
            %(title)s <br />
            <font size='-1'>%(source)s</font>
        </td>
        <td align='center' valign='top' width='%(link_width)s'>
            <!--
            <a href='http://sfx.library.yale.edu/links?id=pmid:%(pmid)s'>
                <img border='0' src='/yale_sfx2_gif'>
            </a>
            -->
            <a href='http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?db=PubMed&cmd=Display&dopt=pubmed_pubmed&from_uid=%(pmid)s'>Pubmed related articles</a>
        </td>
    </tr>
    """ % vars()


class Browse:

    _q_exports = ['year',
                  'heading',
                  'journal',
                  'study_type',
                  ]


    def __init__ (self, request):
        pass    # no need to do anything special here


    def _q_index [html] (self, request):
        header('Browse')
        """
        <h2>Browse</h2>

        <p>
        You can browse the database by <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>,
        <a href='/browse/study_type'>study type</a>,
        or by <a href='/browse/heading'>subject heading</a>.

        """
        footer()


    def records_by_year (self):

        cursor = get_publisher().get_cursor()

        #cursor.execute("""
        #    SELECT authors, title, source, pubmed_id
        #    FROM sentinel_studies
        #    ORDER BY year_published DESC
        #    """)
        cursor.execute("""
            SELECT year_published, COUNT(year_published) AS yearcount
            FROM sentinel_studies
            GROUP BY year_published
            ORDER BY year_published DESC
            """)
        results = []
        while 1:
            row = cursor.fetchone()
            if row == None: break
            results.append((row[0], row[1]))
        cursor.close()
        return results


    def year [html] (self, request):

        header('Browse by Year')
        """
        <h2>Browse by Year</h2>

        <p>
Below is a list of the number of articles in the Canary Database by their
year of publication.
        </p>

        <table width='70%' cellspacing='3' cellpadding='3'>
            <tr>
                <th align='center' width='20%'># articles</th>
                <th align='left'>Year</th>
            </tr>
        """
        records = self.records_by_year()
        for record in records:
            year, year_count = record
            if not year == 0:
                """
                <tr>
                    <td align='center'>%(year_count)s</td>
                    <td align='left'><a href='/year/%(year)s'>%(year)s</a></td>
                </tr>
                """ % vars()
        """
        </table>
        """
        footer()



    def headings_by_term (self):

        cursor = get_publisher().get_cursor()

        cursor.execute("""
            SELECT term, COUNT(term) as termcount, COUNT(DISTINCT reference_id) AS idcount
            FROM reference_mesh
            GROUP BY term
            HAVING COUNT(term) > 4
            ORDER BY idcount DESC, term
            """)
        results = []
        while 1:
            row = cursor.fetchone()
            if row == None: break
            results.append((row[0], row[1], row[2]))

        cursor.close()
        return results


    def heading [html] (self, request):

        header('Browse by Heading')
        """
        <h2>Browse by Heading</h2>

        <p>
        Below is a list of the most well-used MeSH headings (indexed by
        NLM) as found in our curated articles.  Please note that in many
        cases, a single article might be indexed with the same heading multiple
        times, when multiple qualifers are attached to the MeSH heading:
        <ul>
            <li>'<b># uses</b>' is the total number of times a heading
        appears as an index term;</li>
            <li>'<b># articles</b>' is the total number of articles in which
        the same heading appears as an index term at least once.</li>
        </ul>
        </p>
        """

        """
        <table width='70%' cellspacing='3' cellpadding='3'>
            <tr>
                <th align='center' width='20%'># uses</th>
                <th align='center' width='15%'># articles</th>
                <th align='left'>Subject heading</th>
            </tr>
        """
        headings = self.headings_by_term()
        for heading in headings:
            term, term_count, id_count = heading
            encoded_heading = urllib.quote_plus(term)
            """
            <tr>
                <td align='center'>%(term_count)s</td>
                <td align='center'>%(id_count)s</td>
                <td align='left'><a href='/heading/%(encoded_heading)s'>%(term)s</a></td>
            </tr>
            """ % vars()
        """
        </table>
        """
        footer()


    def journals_by_journal (self):

        cursor = get_publisher().get_cursor()

        cursor.execute("""
            SELECT source, nlm_journal_code, COUNT(*)
            FROM sentinel_studies
            GROUP BY nlm_journal_code
            ORDER BY source
            """)
        results = []
        while 1:
            row = cursor.fetchone()
            if row == None: break
            results.append((row[0], row[1], row[2]))

        cursor.close()
        return results


    def journal [html] (self, request):

        header('Browse by Journal')
        """
        <h2>Browse by Journal</h2>

        <p>
Below is a list of the number of articles in the Canary Database by the
journal in which the articles appear.
        </p>

        <table width='70%' cellspacing='3' cellpadding='3'>
            <tr>
                <th align='center' width='20%'># articles</th>
                <th align='left'>Journal</th>
            </tr>
        """
        journals = self.journals_by_journal()
        for journal in journals:
            source, nlm_journal_code, count = journal
            if str('.') in source:
                title = source[0:source.index(str('.'))]
                """
                <tr>
                    <td align='center'>%(count)s</td>
                    <td align='left'><a href='/journal/%(nlm_journal_code)s'>%(title)s</a></td>
                </tr>
                """ % vars()
            else:
                continue

        """
        </table>
        """
        footer()


    def studies_by_type (self):

        cursor = get_publisher().get_cursor()

        cursor.execute("""
            SELECT methodology, COUNT(methodology) as mcount
            FROM reference_methodology
            GROUP BY methodology
            """)
        results = []
        while 1:
            row = cursor.fetchone()
            if row == None: break
            results.append((row[0], row[1]))

        cursor.close()
        return results


    def study_type [html] (self, request):

        header('Browse by Study Type')
        """
        <h2>Browse by Study Type</h2>

        <p>
The Canary database curators determine, for each included study, the type
of methodology employed by the researchers (using <a
href='/classification_protocol'>this classification protocol</a>).  For
detailed explanations of each, see our <a href='/study_types'>study type
overview</a>.
        </p>

        <p>
Below is a list of the number of articles in the Canary Database by their
study type.
        </p>

        <table width='70%' cellspacing='3' cellpadding='3'>
            <tr>
                <th align='center' width='20%'># articles</th>
                <th align='left'>Study Type</th>
            </tr>
        """
        dbmodel = get_publisher().get_dbmodel()
        types = self.studies_by_type()
        for type in types:
            s_type, count = type
            s_name = dbmodel.get_value_description(int(1), int(s_type))
            """
            <tr>
                <td align='center'>%(count)s</td>
                <td align='left'><a href='/study_type/%(s_type)s'>%(s_name)s</a></td>
            </tr>
            """ % vars()
        """
        </table>
        """
        footer()


