# $Id$

import string
import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError

from canary.gazeteer import Feature
from canary.loader import QueuedRecord
from canary.pubmed import Pubmed
from canary.qx_defs import NotLoggedInError
from canary.study import Study
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.utils import render_capitalized


_q_exports = [
    '_q_index',
    ]


def _q_index [html] (request):
    return not_found('record')


def _q_lookup (request, record_id):
    context = get_publisher().context
    try:
        record = QueuedRecord(context, record_id)
        study = Study(context, record.study_id)
        
        if not study.get_status(text=True) == 'curated':
            raise ValueError('Record not curated')
        if study.get_article_type(text=True) == 'irrelevant':
            raise ValueError('Irrelevant record')
        return render_record(record, study)
    except:
        import traceback
        print traceback.print_exc()
        return not_found('record')


def render_tagged_pubmed [plain] (record, mapped_metadata):
    request = get_request()
    request.response.set_content_type('text/plain')
    context = get_publisher().context
    source_catalog = context.get_source_catalog()
    output = []
    for source_id, term_id in record.metadata.keys():
        source = source_catalog.get_source(source_id)
        term = source.terms[term_id]
        if term.is_multivalue:
            for val in record.metadata[(source_id, term_id)]:
                output.append('%-04s- %s' % (term.token, val))
        else:
            output.append('%-04s- %s' % \
                (term.token, record.metadata[(source_id, term_id)]))
    '\n'.join(output)
            

def render_highlighted_value [html] (dbmodel, group_id, value, delim=' - '):
    value_desc = dbmodel.get_value_description(group_id, value)
    range = []
    group = dbmodel.get_group(group_id)
    keys = group.values.keys()
    keys.sort()
    for key in keys:
        value = group.values[key]
        if value_desc == value.description:
            style = 'chosen'
        else:
            style = 'not_chosen'
        range.append("""<span class='%s'>%s</span>""" % (style, value.description))
    return string.join(range, delim)


def render_indexing_row [html] (anchor_name, field, value):
    """
    <tr>
        <td align='left' valign='top' width='%s'>
            (<a href='/glossary#%s' title='Definition of %s'>?</a>) %s
        </td>
        <td align='left' valign='top'>%s</td>
    <tr>
    """ % ('25%', anchor_name, field, field, value)


def render_data_points [html] (study):
    data_points = [
        #('has_exposures', 'Exposures', 'Animal environmental exposures'),
        #('has_outcomes', 'Outcomes', 'Animal health outcomes'),
        ('has_relationships', 'Cause and Effect Analysis', 
            'Does the study include data on animal exposure/outcome relationships?'),
        ('has_interspecies', 'Interspecies susceptibility data', 
            'Does the study include data on differing susceptibilities among species?'),
        ('has_exposure_linkage', 'Shared exposures with humans', 
            'Does the study include data on shared animal and human exposures?'),
        ('has_outcome_linkage', 'Shared outcomes with humans', 
            'Does the study include data linking animal exposure/outcome and human health outcomes?'),
        ('has_genomic', 'Gene sequence data', 
            'Does the study include linkages to gene sequence data?'),
        ]
        
    """
        <div class='studytable'>
            <table cellspacing='0'>
    """
    
    try:
        """
                <tr>
        """
        for key, short, full in data_points:
            """
                    <th><acronym title='%s'>%s</acronym></th>
            """ % (full, short)
        """
                </tr>
            
                <tr>
        """
        for key, short, full in data_points:
            if getattr(study, str(key)):
                """
                    <td>Yes</td>
                """
            else:
                """
                    <td>No</td>
                """
        """
                </tr>
        """
    except:
        import traceback
        print traceback.print_exc()
    
    """
            </table>
        </div>
    """


def render_methodologies [html] (study, show_actions=False):
    """
        <div class='studytable'>
            <table cellspacing='0' cellpadding='5' id='methodologies'>
        
                <tr>
                    <th>Study type</th>
                    <th><acronym title='Sample size'>N</acronym></th>
                    <th><acronym title='Routes of exposure'>Routes</acronym></th>
                    <th>Sampling</th>
                    <th><acronym title='Controls from same population?'>Controls</acronym></th>
                    <th>Timing</th>
    """
    if show_actions:
        """
                    <th>Actions</th>
        """
    """
                </tr>
    """
    
    for meth in study.methodologies:
        
        study_type = meth.get_study_type(True)
        if study_type == 'experimental' \
            and meth.is_mesocosm:
            study_type = 'experimental (mesocosm)'
        elif study_type == 'cohort' \
            and meth.is_enclosure:
            study_type = 'cohort (enclosure)'
            
        """
                <tr>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
                    <td>%s</td>
        """ % (study_type, meth.sample_size, ', '.join(meth.get_routes(True)),
            meth.get_sampling(True), meth.get_controls(True),
            meth.get_timing(True))
        if show_actions:
            """
                    <td>
                        [<a href='/edit/study/%s/methodology/%s/edit'>edit</a>]
                        [<a href='/edit/study/%s/methodology/%s/delete'>delete</a>]
                    </td>
            """ % (study.record_id, meth.uid, study.record_id, meth.uid)
        """
                </tr>
        """
    """
            </table>
        </div>
    """

    
def render_locations [html] (study):
    context = get_publisher().context
    gazeteer = context.get_gazeteer()
    locs = []
    for location in study.locations:
        feature = Feature(uid=location.feature_id)
        feature.load(context)
        if gazeteer.fips_codes.has_key((feature.country_code, feature.adm1)):
            region_name = gazeteer.fips_codes[(feature.country_code, feature.adm1)]
        else:
            region_name = ''
        locs.append('%s (%s, %s, %s)' % (feature.name, 
            gazeteer.feature_codes[feature.feature_type],
            render_capitalized(region_name), 
            render_capitalized(gazeteer.country_codes[feature.country_code])))
        # lat/long = '%.2f / %.2f' % (feature.latitude, feature.longitude),
    """
                <tr>
                    <th valign='top'>Locations</th>
                    <td>
    """
    '; '.join([str(loc) for loc in locs])
    """
                    </td>
                </tr>
    """

def render_metadata_header [html] (mapped_metadata, show_abstract=False):
    
    authors = mapped_metadata['author']
    if authors == []:
        authors = ['[No authors listed]']
        
    """
    <table border='0' cellspacing='0' cellpadding='0'>
        <tr valign='top'>
            <td align='left' valign='top'>
                <h4>%s</h4>
            </td>
            <td align='left' valign='top'>
    """ % mapped_metadata['source']    
                #<h4>[links]</h4>
    """
            </td>
        </tr>
    </table>
    """
  
    """
    <h3>%s</h3>
    <h3>%s</h3>
    <p>
    %s
    </p>
    """ % (mapped_metadata['title'], 
        ', '.join(authors),
        mapped_metadata['affiliation'])


    if show_abstract:
        render_abstract(mapped_metadata)



def render_abstract [html] (mapped_metadata):
    """
    <table border='0' cellspacing='5' cellpadding='5'>

        <tr>
    """
    
    if not mapped_metadata['abstract'] == '':
        abstract = mapped_metadata['abstract']
    else:
        abstract = 'No abstract available.'

    """
            <td align='left' valign='top'>
                <p>
                %s
                </p>
            </td>
    """ % abstract
    """
        </tr>
    </table>
    """

def render_medline [html] (mapped_metadata):
    """
    <table border='0' cellspacing='5' cellpadding='5'>

        <tr>
            
            <td align='left' valign='top' width='40%'>
                <h4>MeSH Terms</h4>
                <p>
    """

    subjects = mapped_metadata['subject']
    if len(subjects) == 0:
        """
                None
        """
    else:
        sort_subjects = []
        for sub in subjects:
            if sub.startswith(str('*')):
                sort_subjects.append((sub[1:], sub))
            else:
                sort_subjects.append((sub, sub))
        sort_subjects.sort()
        for sort_sub, orig_sub in sort_subjects:
            """
                    %s <br/>
            """ % orig_sub

    """
                </p>
            </td>
    """
    
    pubmed_record_url = \
        "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=retrieve&db=pubmed&dopt=abstract&list_uids=%s" % \
        mapped_metadata['unique_identifier']
        
    pubmed_related_url = \
        "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=link&db=pubmed&dbFrom=pubmed&from_uid=%s" % \
        mapped_metadata['unique_identifier']

    """
            <td align='left' valign='top'>
            
                <h4>OpenURL:</h4>
                <p>
                <a name='id=pmid:%s' rel='alternate' title='OpenURL'> </a>
                </p>

                <h4>PMID: %s</h4>
    """ % (mapped_metadata['unique_identifier'],
        mapped_metadata['unique_identifier'])

    """
                <h4>Go to Pubmed:</h4>
                <p>
                [<a href='%s'>This Article</a>]
                [<a href='%s'>Related Articles</a>]
                </p>
    """ % (pubmed_record_url, pubmed_related_url)
            
    if len(mapped_metadata['keyword']) > 0:
        """
                <h4>Keywords</h4>
                <p>
        """
        sort_keywords = mapped_metadata['keyword']
        sort_keywords.sort()
        for keyword in sort_keywords:
            """
                %s <br />
            """ % keyword
        """
                </p>
        """
    
    if len(mapped_metadata['registrynum']) > 0:
        """
                <h4>Registry numbers</h4>
                <p>
        """
        sort_regnums = mapped_metadata['registrynum']
        sort_regnums.sort()
        for regnum in sort_regnums:
            """
                %s <br />
            """ % regnum
        """
                </p>
        """
                
                
    """
            </td>

        </tr>
    </table>
    """
    

def render_related [html] (study, mapped_metadata):
    
    context = get_publisher().context
    gazeteer = context.get_gazeteer()
    """
    <table border='0' cellspacing='5' cellpadding='5'>
        <tr>
            <td colspan='4' align='left' valign='top'>
                <h3>Find Related Records in the Canary Database</h3>
            </td>
        </tr>

        <tr>
            <td align='left' valign='top'>
    """
    authors = mapped_metadata['author']
    if len(authors) > 0:
        """
                <h4>Authors</h4>
                <p>
        """
        authors.sort()
        for author in authors:
            quoted_author = urllib.quote_plus(author)
            """
                    <a href='/search?q=author:"%s"'>%s</a> <br/>
            """ % (quoted_author, author)
        """
                </p>
        """

    """            
            </td>
            
            <td align='left' valign='top'>
                <h4>Journal</h4>
                <p>
                <a href='/browse/journal/%s'>%s</a> <br/>
                </p>
            </td>
    """ % (mapped_metadata['issn'], mapped_metadata['journal'])
    
    for concept in ('exposures', 'outcomes', 'species'):
        items = getattr(study, str(concept))
        if items:
            """
            <td align='left' valign='top'>
                <h4>%s</h4>
                <p>
            """ % concept.capitalize()
            for item in items:
                """
                    <a href='/search?q=%s:"%s"'>%s</a> <br />
                """ % (concept, item.term, item.term)
            """
                </p>
            </td>
            """
    if study.locations:
        """
        <td align='left' valign='top'>
            <h4>Locations</h4>
            <p>
        """
        for loc in study.locations:
            feature = Feature(uid=loc.feature_id)
            feature.load(context)
            if gazeteer.fips_codes.has_key((feature.country_code, feature.adm1)):
                region_name = render_capitalized(gazeteer.fips_codes[(feature.country_code, feature.adm1)])
            else:
                region_name = ''
            country_name = render_capitalized(gazeteer.country_codes[feature.country_code])
            """
                <a href='/search?q=location:"%s"+location:"%s"+location:"%s"'>%s (%s, %s)</a> <br />
            """ % (feature.name, region_name, country_name,
                feature.name, region_name, country_name)
        """
            </p>
        </td>
        """
        
            
    """
        </tr>
    </table>
    """
    
    
def render_export [html] (mapped_metadata):
    """
    <table border='0' cellspacing='5' cellpadding='5'>
        <tr>
            <td colspan='4' align='left' valign='top'>
                <h3>Export this record</h3>
                
                <p>
                Export this record to your reference manager by 
                clicking on the appropriate format below and using
                your web browser's "file -&gt; save as" menu function.
                Additional formats will be added as requested.
                </p>
                
                <ul>
                    <li>
                        <a href='?view=export&amp;format=pubmed'>Tagged/Pubmed (NLM)</a>
                    </li>
                </ul>
            </td>
        </tr>
    </table>
    """



def similar [html] (self, request):

    pubmed_query = ''

    exposure_set = []
    for exp in self.record.exposures:
        if not exp == '':
            exposure_set.append(exp)
    if len(exposure_set) > 0:
        exposure_or_set = '(' + string.join(exposure_set, ' OR ') + ')'
    else:
        exposure_or_set = ''

    outcome_set = []
    for outcome in self.record.outcomes:
        disease_text, relevance_int = outcome
        relevance_text = self.dbmodel.get_value_description(int(5), int(relevance_int))
        if not disease_text == '':
            outcome_set.append(disease_text)
    if len(outcome_set) > 0:
        outcome_or_set = '(' + string.join(outcome_set, ' OR ') + ')'
    else:
        outcome_or_set = ''

    if not exposure_or_set == '':
        if not outcome_or_set == '':
            pubmed_query = exposure_or_set + ' AND ' + outcome_or_set + ' AND human'
        else:
            pubmed_query = exposure_or_set + ' AND human'
    elif not outcome_or_set == '':
        pubmed_query = outcome_or_set + ' AND human'

    pubmed = Pubmed()
    result_count, query_key, webenv = pubmed.esearch(str(pubmed_query))
    pubmed.efetch(query_key, webenv)

    header('Similar')


    """
<h2>Similar articles from Pubmed</h2>

<table border='0' cellspacing='5' cellpadding='5'>

    <tr>

        <td align='left' valign='top'>
            %s
            <br/>
            (<a href='/record/%s'>Back to full record</a>)
        </td>

        <td align='left' valign='top'>

            <a href='http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?db=PubMed&cmd=Display&dopt=pubmed_pubmed&from_uid=%s'>Pubmed related articles</a>

            <!-- leave out for now...
            <a href="http://sfx.library.yale.edu/links?id=pmid:%s">
                <img border='0' src='/yale_sfx2_gif'>
            </a>
            -->

        </td>

    </tr>
    """ % (self.record.source,
           self.record.pubmed_id,
           self.record.pubmed_id,
           self.record.pubmed_id)

    """
    <tr>

        <td colspan='2'>
            <font size='+1'><b>%s</b></font> <br />
            <b>%s</b> <br />
            %s
        </td>

    </tr>
    """ % (self.record.title,
           self.record.authors,
           self.record.institution)

    """
    <tr>

        <td colspan='2'>

            <p>
Below are articles found by searching MEDLINE via Pubmed for the following
combination of the Causative Factors and Disease Outcome terms used by Canary
Database curators to describe this study:
            </p>

            <ul>
                <li><b>%s</b></li>
            </ul>

        </td>

    </tr>
    """ % (pubmed_query or 'No terms available for this record')

    """
    <tr>
        <td colspan='2'>
    """
    if result_count > 0:
        """
        <pre>
            %s
        </pre>
        """ % (pubmed.results)
    else:
        'No results available for this record'
    """
        </td>
    </tr>
    """

    """
</table>
    """
    footer()



def render_summary_concept_row [html] (concepts, concept_name):
    """
                <tr>
                    <th valign='top'>%s</th>
                    <td>
    """ % concept_name.capitalize()
    '; '.join([str(con.term) for con in concepts])
    """
                    </td>
                </tr>
    """


def render_record [html] (record, study):
    
    context = get_publisher().context
    source_catalog = context.get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    article_type = study.get_article_type(text=True)

    view = get_request().get_form_var('view', default='canary')
    format = get_request().get_form_var('format', default='')

    mapped_metadata = record.get_mapped_metadata(complete_term_map)

    if view == 'export':
        if format == 'pubmed':
            return render_tagged_pubmed(record, mapped_metadata)
            
    header('Record %s' % record.uid)
    render_metadata_header(mapped_metadata, show_abstract=False)
    """
    <h4>Article type: %s</h4>
    """ % article_type
    
    """
    <div id='citation-head'>
        <div id='top-menu-int'>
            <table border='0' cellpadding='0' cellspacing='0' width='675'>
                <tr>
    """
    
    for view_mode, view_name in (
        ('canary', 'Canary data'),
        ('abstract', 'Abstract'),
        ('medline', 'MEDLINE'),
        ('related', 'Related'),
        ('export', 'Export'),
        ):
        if view == view_mode:
            """
                    <td class='tab-highlite'>
                        <a href='?view=%s' class='tab-highlite'>%s</a>
                    </td>
            """ % (view_mode, view_name)
        else:
            """
                    <td>
                        <a href='?view=%s'>%s</a>
                    </td>
            """ % (view_mode, view_name)
        
    """
                <td class='dimmed'>
                    &nbsp;
                </td>
    """
    """
                </tr>
            </table>
        </div>    
    """
    
    if not article_type in ['irrelevant']:
        
        if view == 'canary':
        
            render_data_points(study)
            
            if len(study.exposures) > 0 \
                or len(study.risk_factors) > 0 \
                or len(study.outcomes) > 0 \
                or len(study.species) > 0 \
                or len(study.locations) > 0:
                """
            <div class='studytable'>
                <table cellspacing='0' class='head-left'>
                """
            
                if study.has_exposures \
                    and len(study.exposures) > 0:
                    render_summary_concept_row(study.exposures, 'exposures')
                    
                if study.risk_factors:
                    render_summary_concept_row(study.risk_factors, 'risk factors')
                    
                if study.has_outcomes \
                    and len(study.outcomes) > 0:
                    render_summary_concept_row(study.outcomes, 'outcomes')
                    
                if len(study.species) > 0:
                    render_summary_concept_row(study.species, 'species')
                    
                if len(study.locations) > 0:
                    render_locations(study)
                
                """
                </table>
            </div>
                """
    
            if not article_type in ['irrelevant'] \
                and len(study.methodologies) > 0:
                render_methodologies(study)
            
        elif view == 'abstract':
            render_abstract(mapped_metadata)
            
        elif view == 'medline':
            render_medline(mapped_metadata)
        
        elif view == 'related':
            render_related(study, mapped_metadata)
            
        elif view == 'export':
            render_export(mapped_metadata)

    
    """
    </div>
    """
    
    footer()



def render_record_row [html] (record, score=None):
    
    context = get_publisher().context
    source_catalog = context.get_source_catalog()
    complete_term_mapping = source_catalog.get_complete_mapping()
    mapped_md = record.get_mapped_metadata(term_map=complete_term_mapping)
    author = mapped_md['author']
    if author == []:
        author = ['[No authors listed]']
    """
                <tr>
                    <td align='left' valign='top'>
    """
    if score:
        """
                        <div class='relevance-box'>
                            <div class="relevance" style="width: %s%s"><img src='/images/pixel.gif' alt='' width='' height=''></div>
                        </div>
        """ % (int(score * 100), '%')
        
    """
                    <b><a href='/record/%s'>%s</a></b> 
                    <br />
                    %s
                    <br />
                    %s
    """ % (record.uid, ', '.join(author), mapped_md['title'], mapped_md['source'])
    
    """
                    </td>
                    
                    <td valign='top' width='20%'>
                        <!--
                        <a href='http://sfx.library.yale.edu/links?id=[[PMID]]'>
                            <img border='0' src='/yale_sfx2_gif'>
                        </a>
                        -->
                        <!--
                        <a href='http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?db=PubMed&cmd=Display&dopt=pubmed_pubmed&from_uid=[[PMID]]'>Pubmed related articles</a>
                        -->
                        <!--[links]-->
                    </td>
                </tr>
    """
