import string
import urllib

from quixote import get_publisher
from quixote.errors import TraversalError

from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.loader import QueuedRecord
from canary.pubmed import Pubmed
from canary.study import Study

_q_exports = [
    '_q_index',
    ]


def _q_index [html] (request):
    return not_found('record')


def _q_lookup (request, record_id):
    try:
        if (record_id):
            id = int(record_id)
            cursor = get_publisher().get_cursor()
            dbmodel = get_publisher().get_dbmodel()
            record = QueuedRecord(record_id)
            record.load(cursor)
            cursor.close()
            return render_record(record)
        else:
            raise TraversalError
    except:
        return not_found('record')



def render_highlighted_value [html] (dbmodel, group_id, value, delim=' - '):
    value_desc = dbmodel.get_value_description(group_id, value)
    range = []
    group = dbmodel.get_group(group_id)
    keys = group.values.keys()
    keys.sort()
    for key in keys:
        value = group.values[key]
        if value_desc == value.description:
            style = 'chosen'
        else:
            style = 'not_chosen'
        range.append("""<span class='%s'>%s</span>""" % (style, value.description))
    return string.join(range, delim)


def render_indexing_row [html] (anchor_name, field, value):
    """
    <tr>
        <td align='left' valign='top' width='%s'>
            (<a href='/glossary#%s' title='Definition of %s'>?</a>) %s
        </td>
        <td align='left' valign='top'>%s</td>
    <tr>
    """ % ('25%', anchor_name, field, field, value)


def render_data_points [html] (study):
    data_points = [
        #('has_exposures', 'Exposures', 'Animal environmental exposures'),
        #('has_outcomes', 'Outcomes', 'Animal health outcomes'),
        ('has_relationships', 'Relationships', 
            'Does the study include data on animal exposure/outcome relationships?'),
        ('has_interspecies', 'Interspecies', 
            'Does the study include data on differing susceptibilities among species?'),
        ('has_exposure_linkage', 'Shared exposures', 
            'Does the study include data on shared animal and human exposures?'),
        ('has_outcome_linkage', 'Shared outcomes', 
            'Does the study include data linking animal exposure/outcome and human health outcomes?'),
        ('has_genomic', 'Genomic', 
            'Does the study include linkages to genomic data?'),
        ]
        
    """
    <table cellspacing='3' class='studytable'>
    """
    
    try:
        """
            <tr>
        """
        for key, short, full in data_points:
            """
                <th><acronym title='%s'>%s</acronym></th>
            """ % (full, short)
        """
            </tr>
        
            <tr>
        """
        for key, short, full in data_points:
            if getattr(study, str(key)):
                """
                <td>Yes</td>
                """
            else:
                """
                <td>No</td>
                """
        """
            </tr>
        """
    except:
        import traceback
        print traceback.print_exc()
    
    """
    </table>
    """


def render_methodologies [html] (study, show_actions=False):
    """
    <table cellspacing='3' id='methodologies' class='studytable'>
    
        <tr>
            <th>Study type</th>
            <th><acronym title='Sample size'>N</acronym></th>
            <th><acronym title='Routes of exposure'>Routes</acronym></th>
            <th>Sampling</th>
            <th><acronym title='Controls from same population?'>Controls</acronym></th>
            <th>Timing</th>
    """
    if show_actions:
        """
            <th>Actions</th>
        """
    """
        </tr>
    """
    
    for meth in study.methodologies:
        
        study_type = meth.get_study_type(True)
        if study_type == 'experimental' \
            and meth.is_mesocosm:
            study_type = 'experimental (mesocosm)'
        elif study_type == 'cohort' \
            and meth.is_enclosure:
            study_type = 'cohort (enclosure)'
            
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (study_type, meth.sample_size, ', '.join(meth.get_routes(True)),
            meth.get_sampling(True), meth.get_controls(True),
            meth.get_timing(True))
        if show_actions:
            """
            <td>
                [<a href='/edit/study/%s/methodology/%s/edit'>edit</a>]
                [<a href='/edit/study/%s/methodology/%s/delete'>delete</a>]
            </td>
            """ % (study.record_id, meth.uid, study.record_id, meth.uid)
        """
        </tr>
        """
    """
    </table>
    """



def render_metadata_header [html] (mapped_metadata, show_abstract=False):
    
    """
    <table border='0' cellspacing='5' cellpadding='5'>

        <tr>

            <td align='left' valign='top'>
                %s
            </td>
    """ % mapped_metadata['source']
    
    """
            <td align='left' valign='top'>

                [links]
        
            </td>

        </tr>
    """
    
    """
        <tr>
    
            <td colspan='2'>
                <font size='+1'><b>%s</b></font> <br />
                <b>%s</b> <br />
                %s
            </td>
    
        </tr>
    """ % (mapped_metadata['title'], 
        ', '.join(mapped_metadata['author']),
        mapped_metadata['affiliation'])


    if show_abstract:
        render_abstract(mapped_metadata)

    """
    </table>
    """


def render_abstract [html] (mapped_metadata):
    print 'render_abstract()'
    """
    <table border='0' cellspacing='5' cellpadding='5'>

        <tr>
    """
    
    print 'checking for abs'
    if not mapped_metadata['abstract'] == '':
        abstract = mapped_metadata['abstract']
    else:
        abstract = 'No abstract available.'

    """
            <td align='left' valign='top' width='%s'>
                <b>Abstract:</b>
    
                <p>
                %s
                </p>
            </td>
    """ % ('55%', abstract)

    print 'doing subjects'
    """
            <td align='left' valign='top'>
                <b>Subject Headings</b>
                <p>
    """

    subjects = mapped_metadata['subject']
    if len(subjects) == 0:
        """
                None
        """
    else:
        subjects.sort()
        for subject in subjects:
            """
                    %s <br/>
            """ % subject

    """
                </p>
            </td>
        </tr>
    </table>
    """
    print 'done'


def similar [html] (self, request):

    pubmed_query = ''

    exposure_set = []
    for exp in self.record.exposures:
        if not exp == '':
            exposure_set.append(exp)
    if len(exposure_set) > 0:
        exposure_or_set = '(' + string.join(exposure_set, ' OR ') + ')'
    else:
        exposure_or_set = ''

    outcome_set = []
    for outcome in self.record.outcomes:
        disease_text, relevance_int = outcome
        relevance_text = self.dbmodel.get_value_description(int(5), int(relevance_int))
        if not disease_text == '':
            outcome_set.append(disease_text)
    if len(outcome_set) > 0:
        outcome_or_set = '(' + string.join(outcome_set, ' OR ') + ')'
    else:
        outcome_or_set = ''

    if not exposure_or_set == '':
        if not outcome_or_set == '':
            pubmed_query = exposure_or_set + ' AND ' + outcome_or_set + ' AND human'
        else:
            pubmed_query = exposure_or_set + ' AND human'
    elif not outcome_or_set == '':
        pubmed_query = outcome_or_set + ' AND human'

    pubmed = Pubmed()
    result_count, query_key, webenv = pubmed.esearch(str(pubmed_query))
    pubmed.efetch(query_key, webenv)

    header('Similar')


    """
<h2>Similar articles from Pubmed</h2>

<table border='0' cellspacing='5' cellpadding='5'>

    <tr>

        <td align='left' valign='top'>
            %s
            <br/>
            (<a href='/record/%s'>Back to full record</a>)
        </td>

        <td align='left' valign='top'>

            <a href='http://www.ncbi.nlm.nih.gov:80/entrez/query.fcgi?db=PubMed&cmd=Display&dopt=pubmed_pubmed&from_uid=%s'>Pubmed related articles</a>

            <!-- leave out for now...
            <a href="http://sfx.library.yale.edu/links?id=pmid:%s">
                <img border='0' src='/yale_sfx2_gif'>
            </a>
            -->

        </td>

    </tr>
    """ % (self.record.source,
           self.record.pubmed_id,
           self.record.pubmed_id,
           self.record.pubmed_id)

    """
    <tr>

        <td colspan='2'>
            <font size='+1'><b>%s</b></font> <br />
            <b>%s</b> <br />
            %s
        </td>

    </tr>
    """ % (self.record.title,
           self.record.authors,
           self.record.institution)

    """
    <tr>

        <td colspan='2'>

            <p>
Below are articles found by searching MEDLINE via Pubmed for the following
combination of the Causative Factors and Disease Outcome terms used by Canary
Database curators to describe this study:
            </p>

            <ul>
                <li><b>%s</b></li>
            </ul>

        </td>

    </tr>
    """ % (pubmed_query or 'No terms available for this record')

    """
    <tr>
        <td colspan='2'>
    """
    if result_count > 0:
        """
        <pre>
            %s
        </pre>
        """ % (pubmed.results)
    else:
        'No results available for this record'
    """
        </td>
    </tr>
    """

    """
</table>
    """
    footer()



def render_summary_concept_row [html] (concepts, concept_name):
    """
    <tr>
        <th>%s</th>
        <td>
    """ % concept_name.capitalize()
    '; '.join([con.term for con in concepts])
    """
        </td>
    </tr>
    """


def render_record [html] (record):
    
    try:
        cursor = get_publisher().get_cursor()
        source_catalog = get_publisher().get_source_catalog()
        complete_term_map = source_catalog.get_complete_mapping()
        study = Study(uid=record.study_id)
        study.load(cursor)
        article_type = study.get_article_type(text=True)
    except:
        import traceback
        print 'error on record load'
        print traceback.print_exc()
        return not_found('record')
    
    header('Record %s' % record.uid)
    print 'getting md'
    mapped_metadata = record.get_mapped_metadata(complete_term_map)
    render_metadata_header(mapped_metadata, show_abstract=False)
    print 'rendered md header'
    """
    <h4>Article type: %s</h4>
    """ % article_type

    if not article_type in ['irrelevant']:
        
        render_data_points(study)
        
        print 'checking for concepts'
        """
        <table class='gentable' id='summary'>
        """
        
        if study.has_exposures \
            and len(study.exposures) > 0:
            render_summary_concept_row(study.exposures, 'exposures')
            
        if study.has_outcomes \
            and len(study.outcomes) > 0:
            render_summary_concept_row(study.outcomes, 'outcomes')
            
        if len(study.species) > 0:
            render_summary_concept_row(study.species, 'species')
            
        """
        </table>
        """

    if not article_type in ['irrelevant'] \
        and len(study.methodologies) > 0:
        print 'rendering meths'
        render_methodologies(study)
    
    print 'rendering abstract'
    render_abstract(mapped_metadata)
    
    print 'done'
    footer()
    
