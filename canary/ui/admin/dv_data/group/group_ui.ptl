# $Id$

_q_exports = [
    '_q_index',
    'create',
    'delete',
    'edit',
    'values',
    ]

import re

from quixote import get_publisher, get_request
from quixote.errors import AccessError, TraversalError
from quixote import form2

from canary.db_model import DBModel, ValueGroup
from canary.qx_defs import MyForm
from canary.ui.admin.admin_ui import title_bar
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found
from canary.ui.pages import has_messages, add_message, render_messages


def _q_index [html] (request):
    header('Value group:')
    """
    <h2>Value Group</h2>
    """
    footer()


class GroupActions:
    
    _q_exports = [
        '_q_index',
        ]
        
    def __init__ (self, group_id):
        self.group_id = group_id
        
    def _q_index [html] (self, request):
        header('Admin: Value Group')
        title_bar('Admin: Value Group')
        footer()

    def _q_lookup (self, request, action):
        try:
            if action == 'delete':
                return delete(self.group_id)
            elif action == 'edit':
                return edit(self.group_id)
            elif action == 'values':
                return values(self.group_id)
            else:
                raise TraversalError
        except:
            return not_found('value group')



class GroupForm (MyForm):
    
    def __init__ (self, context):
        MyForm.__init__(self, context)
        self.add(form2.StringWidget, 'group_name', title='Value group name', 
            size='30', required=True)
        self.add(form2.TextWidget, 'group_description', title='Description',
            rows='2', cols='40', required=False)
        self.add_submit('submit', 'submit')


def create [html] (request):

    context = get_publisher().context
    form = GroupForm(context)
    
    def render [html] ():
        header('Create value group')
        title_bar('Create value group')
        form.render()
        footer()
        
    if not form.is_submitted():
        return render()
    
    db_model = context.get_dbmodel()
    
    group_name = form['group_name']
    if db_model.has_group(group_name):
        form.set_error('group_name', 'Group name already exists, choose another')
        
    if form.has_errors():
        return render()
    
    if form['group_description']:
        group_description = form['group_description']
    else:
        group_description = ''
        
    new_value_group = ValueGroup(group_name, group_description)
    
    try:
        new_value_group.save(context, update_values=False)
        new_db_model = DBModel()
        new_db_model.load(context)
        context.set_dbmodel(new_db_model)
        form.logger.info(str('Created value group'))
        header('Admin: Created value group')
        title_bar('Created value group')
    except:
        form.logger.warn(str('Unable to save new value group'))
        header('Admin: Unable to create value group')
        title_bar('Unable to create value group')
    
    footer()


def delete [html] (group_id):
    
    context = get_publisher().context
    try:
        group_id = int(group_id)
        db_model = context.get_dbmodel()
        group = db_model.get_group(group_id)
        if group == None:
            raise TraversalError('value group not found')
    except:
        return not_found('value group')
        
    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
             title='Are you sure you want to delete this value group?',
             value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete value group')
        title_bar('Delete value group: %s' % group.group_name)
        form.render()
        footer()

    if not form.is_submitted():
        return render()

    are_you_sure = form['are_you_sure']
    if are_you_sure:
        db_model.delete_group(context, group.value_group_id)
        new_db_model = DBModel()
        new_db_model.load(context)
        context.set_dbmodel(new_db_model)
        form.logger.info(str('Deleted value group %s' % group.value_group_id))
        header('Admin: value group deleted')
        title_bar('Value group deleted')
    else:
        form.logger.info(str('Did not delete value group %s' % group.value_group_id))
        header('Admin: value group not deleted')
        title_bar('Value group not deleted')
    footer()



def edit [html] (group_id):

    context = get_publisher().context
    form = GroupForm(context)
    
    try:
        group_id = int(group_id)
        db_model = context.get_dbmodel()
        group = db_model.get_group(group_id)
        if group == None:
            raise TraversalError('value group not found')
    except:
        return not_found('value group')
        
    print 'got group'
    def render [html] ():
        header('Edit value group')
        title_bar('Edit value group: %s' % group.group_name)
        form.render()
        footer()

    if not form.is_submitted():
        form.get_widget('group_name').set_value(group.group_name)
        form.get_widget('group_description').set_value(group.description)
        return render()

    if form.has_errors():
        return render()

    group_name = form['group_name']
    group.group_name = group_name
    
    if form['group_description']:
        group.description = form['group_description']
        
    request = get_request()
        
    try:
        group.save(context)
        new_db_model = DBModel()
        new_db_model.load(context)
        context.set_dbmodel(new_db_model)
        form.logger.info(str('Updated value group %s' % group.value_group_id))
        add_message('Updated group')
        request.redirect(str('/admin/dv_data/'))
    except:
        form.logger.info(str('Did not update value group %s' % group.value_group_id))
        add_message('Did not update group')
        request.redirect(str('/admin/dv_data/'))




def values [html] (group_id):

    context = get_publisher().context
    request = get_request()
    
    try:
        group_id = int(group_id)
        db_model = context.get_dbmodel()
        group = db_model.get_group(group_id)
        if group == None:
            raise TraversalError('value group not found')
    except:
        return not_found('value group')

    header('Values')
    title_bar('Values')

    if has_messages():
        render_messages()
        
    """
    <h3>Values for group '%s' (uid=%s, <a href='/admin/dv_data/group/%s/edit'>edit</a>)</h3>
    """ % (group.group_name, group_id, group_id)

    """
    <table cellspacing='0' class='gentable'>
        <tr>
            <th>number</th>
            <th>description</th>
            <th>action</th>
        </tr>
    """

    values = group.get_values()
    for (serial_number, value) in values:
        """
        <tr>
            <td valign='top'>%s</td>
            <td valign='top'>%s</td>
            <td valign='top'>
                <a href='/admin/dv_data/value/%s/edit'>edit</a> -
                <a href='/admin/dv_data/value/%s/delete'><font size='-1'>delete</font></a>
            </td>
        </tr>
        """ % (value.serial_number, value.description, 
            value.value_id, value.value_id)
        
    """
        <tr>
            <td colspan='3'>
            Add a new value:
            </td>
        </tr>
    """

    """
        <tr>
            <form action='/admin/dv_data/value/create' method='post'>
            <input type='hidden' name='value_group_id' value='%s'>
            <td><input type='text' name='value_serial_number' size='5'></td>
            <td><input type='text' name='value_description' size='30'></td>
            <td><input type='submit' value='create'></td>
            </form>
        </tr>
    """ % (group.value_group_id)

    """
    </table>
    """

    footer()


