# $Id$

from cStringIO import StringIO
import logging
import os
import random
import re
import string
from time import time
import traceback
import urllib

import elementtree.ElementTree as etree
from elementtree.ElementTree import Element, SubElement
import Image

from quixote import get_publisher, get_request, get_session_manager
from quixote import form2
from quixote.errors import AccessError, SessionError
from quixote.util import StaticFile

from canary.qx_defs import NotLoggedInError, MyForm
from canary.ui.pageframe import header, footer
from canary import utils
from canary.loader import QueuedRecord
from canary.study import Study
from canary.user import User, get_user_by_id, get_user_by_email, get_user_by_yale_netid


def _q_index [html] (request):
    request.response.cache = 300
    package_name = str('.').join(__name__.split(str('.'))[:-1])
    module_name = __name__
    module_file = __file__

    header('Index')

    """
<table border='0' cellspacing='0' cellpadding='0'>
    <tr valign='top'>
    <td width='400' valign='top' class='rightspace'>

    <div class="pullquote">
    <!--
    Can animals 
    - like canaries in coal mines -
    warn humans 
    about chemical, infectious, and physical
    environmental hazards?
    -->
    What are the animals trying to tell us about health hazards
    in a changing environment?
    </div>

    <p>
    We select, curate, and index 1000s of scientific studies <!-- from MEDLINE,
    CAB Abstracts, and Agricola --> so you can review the evidence of 
    animals as "early warning" sentinels of human health hazards.
    </p>
    
    <h3>
    Try it now!  Find evidence of animal as sentinels:
    </h3>
    
    
    <p>
    ...for environmental hazards:
    <ul type='circle'>
        <li><a href="/search?q=dogs+lead">Dogs and Lead</a></li>
        <li><a href='/search?q=birds+"west+nile+virus"'>Birds and West Nile Virus</a></li>
    </ul>
    </p>
    
    <p>
    ...for diseases:
    <ul type='circle'>
        <li><a href="/search?q=cancer+whales">Cancer and Whales</a></li>
        <li><a href="/search?q=reproduction+fish">Reproduction and Fish</a></li>
    </ul>
    </p>

    <p>
    ...by location:
    <ul type='circle'>
        <li><a href="/search?q=anthrax+sverdlovsk">Anthrax and Sverdlovsk</a></li>
        <li><a href='/search?q=wnv+"new+york+city"'>West Nile Virus and New York City</a></li>
    </ul>
    </p>

    <p>
    Or, try the <a href="/advanced_search">advanced search</a> page, or read
    more about <a href="/about/how_to_search">how to search</a>.
    </p>
    

    </td>

    <td valign='top'>

    <div class='news'>
        <div class='news-head'>
            <!-- <a href="http://news.canarydatabase.org/">Project News</a> -->
            <a href="http://deohs.washington.edu/cohr/blog">Project News</a>
        </div>
    """
    
    # for item in utils.parse_feed('http://news.canarydatabase.org/feed/')[:3]:
    for item in utils.parse_feed('http://deohs.washington.edu/cohr/blog/rss')[:8]:
        """
        <p class='story'>
        %s
        <br />
        <span class='headline'><a href="%s">%s</a></span>
        </p>
        """ % (item.updated[:-15], item.link, item.title)
            
    """
        <p>
        <!-- See all <a href="http://news.canarydatabase.org/">project news</a>. <br /> -->
        See all <a href="http://deohs.washington.edu/cohr/">project news</a>. <br />
        <!--
        Subscribe to Project News: 
        <a href="http://news.canarydatabase.org/feed/"><img src='/images/feed-icon-16x16.png'
        <a href="http://deohs.washington.edu/cohr/blog/rss"><img src='/images/feed-icon-16x16.png' 
            alt='Project News Subscription Icon' border='0'/></a>
        -->
        </p>

    </div>


    <!--
    <div class='news'>
        <div class='news-head'>
            <a href="http://news.canarydatabase.org/category/publications">Staff Publications</a>
        </div>
    """
    
    for item in utils.parse_feed('http://news.canarydatabase.org/category/publications/feed/')[:3]:
        """
        <p class='story'>
        %s
        <br />
        <span class='headline'><a href="%s">%s</a></span>
        </p>
        """ % (item.updated[:-15], item.link, item.title)
            
    """
        <p>
        See all <a href="http://news.canarydatabase.org/category/publications">project
        staff publications</a>.
        </p>
    </div>
    -->


    </td>
    </tr>
</table>
    """
    footer()


def _q_exception_handler [html] (request, exc=None):
    
    context = get_publisher().context
    err_text = '::'.join((request.get_path(), exc.title, exc.description,))
    context.logger.error('Error %s', err_text)
    
    if isinstance(exc, NotLoggedInError):
        
        path = request.get_path()
        request.redirect(str('/login?go=%s' % (path)))
        
    elif isinstance(exc, AccessError):
        
        request.response.set_status(401, 'Not Authorized')
        path = request.get_path()
        header('Access not allowed')
        """
        <h2>Access not allowed</h2>
        <p>
        The page you have requested is restricted.  If you feel you should
        have access to it, please <a href='/about/contact_us'>contact the
        site administrators</a>.
        </p>
        <p>
        You can <a href='/user'>return to your page</a>.
        </p>
        """
        footer()
        
    elif isinstance(exc, SessionError):
        session_mgr = get_session_manager()
        session_mgr.revoke_session_cookie(request)
        header('Expired or invalid session')
        """
        <h2>Expired or invalid session</h2>
        
        <p>
        Your session is invalid or has expired.  Please log 
        in again to start a new session.
        </p>
        """
        
        path = request.get_path()
        """
        <form method='post' action='/login'>
        
        <b>Your email</b>: <br />
        <input type='text' name='user_email' size='20'> <br />
        
        <b>Password *</b>: <br />
        <input type='password' name='user_pass' size='10'> <br />
        <input type='hidden' name='go' value='%s'>
        <input type='submit' name='login' value='login'>
        </form>
        """ % path

        footer()
        
    else:
        
        request.response.set_status(400, 'Bad Request')
        header('Oops!')
        """
        <h2>Oops!</h2>
        <p>
        Sorry, we were unable to understand your request.  Perhaps you 
        asked for a page that doesn't exist, or perhaps it once existed, 
        but was eaten by the canary.
        </p>
        """
        footer()


def not_found [html] (item_type='item'):
    request = get_request()
    request.response.set_status(404, "Not Found")
    header('%s not found' % item_type.capitalize())
    """
    <h2>%s not found</h2>

    <p>
    The requested %s was not found.
    </p>
    """ % (item_type.capitalize(), item_type)
    footer()


def login_general [html] (request):

    context = get_publisher().context
    # redirect if the user is already logged in
    try:
        if request.session.user != None:
            request.redirect(str('/user'))
    except:
        pass
        
    form = MyForm(context)
    form.method = 'post'
    form.action_url = '/login'
    form.add(form2.StringWidget, 'user_email', 
        title='Your email address',
        size=20, 
        required=True)
    form.add(form2.PasswordWidget, 'user_pass', 
        title='Password',
        size=10, 
        required=True)
    form.add_hidden('go', None)
    form.add_submit('login', 'login')

    form_reset_pass = MyForm(context)
    form_reset_pass.method = 'post'
    form_reset_pass.action_url = '/resetpass'
    form_reset_pass.add(form2.StringWidget, 'user_email',
        title='Your email address',
        size=20,
        required=True)
    form_reset_pass.add_submit('send', 'send')

    def render [html] ():
        header('Log in')
        """
        <h3>Log in:</h3>
        """
        form.render()
        """
        <h3>Forgot your password?</h3>
        
        <p>
        Enter your email address below.  If your address matches your active
        account address, we will reset your password and send you a new one.
        </p>
        """
        form_reset_pass.render()
        footer()

    if not form.is_submitted():
        return render()

    user_email = form['user_email']
    user_pass = form['user_pass']
    user = get_user_by_email(context, user_email)
    if user == None:
        form.logger.error('Invalid user email %s', user_email)
        form.set_error('user_email', 'Invalid user email or password.')
    else:
        if not user.valid_password(user_pass):
            form.logger.error('Invalid password')
            form.set_error('user_email', 'Invalid user email or password')

    if form.has_errors():
        return render()

    session_mgr = get_session_manager()
    request.session.set_user(user)
        
    form.logger.info(str('User %s logged in' % user.id))
        
    if form['go']:
        return request.redirect(form['go'])
    else:
        return request.redirect(str('/user/'))


def login_yale [html] (request):
    context = get_publisher().context
    config = context.config
    
    form = MyForm(context)
    form.method = 'post'
    form.action_url = '/login'
    form.add_hidden('go', None)
    form.add_submit('login', 'login')

    go = str('/user')
    if form.is_submitted() \
        and form['go']:
        go = form['go']
    
    # If they are successfully logged in, then bounce
    if getattr(request.session, str('user'), None):
        request.redirect(go)

    # Otherwise, attempt to validate their ticket
    try:
        ticket = request.get_form_var(str('ticket'), '')
        if ticket:
            validate_url = 'https://secure.its.yale.edu/cas/servlet/validate'
            my_url = config.site_base_url + '/login'
            params = '?service=%s&ticket=%s' % (my_url, ticket)
            cas_data = urllib.URLopener().open(str(validate_url + params))
            test = str(cas_data.readline()).strip()
            if test == 'yes':
                net_id = cas_data.readline().strip()
                user = get_user_by_yale_netid(context, net_id)
                if user:
                    context.logger.debug('Found user: %s', user)
                    session_mgr = get_session_manager()
                    #request.session = session_mgr.get_session(request)
                    request.session.set_user(user)
                    request.redirect(go)
    except:
        import traceback
        context.logger.error('Yale login error: %s', traceback.print_exc())

    cas_url = 'https://secure.its.yale.edu/cas/login'
    params = 'service=%s/login' % config.site_base_url
    login_url = cas_url + '?' + params
    
    from canary.ui.pageframe import header, footer
    header('Log in')
    """
    <h3>Log in</h3>

    <p>
    If you are Canary project staff at Yale,
    please log in through the <a href='%s'>Yale CAS</a>.
    </p>
    """ % login_url
    footer()


def logout [html] (request):

    context = get_publisher().context
    
    if request.session.user is None:
        header('Not logged in.')
        """
        <h2>Not logged in</h2>

        <p>
        You were not logged in.
        </p>

        <p>
        You can <a href='/login'>log in</a>.
        </p>
        """
    else:
        old_user_id = request.session.user.id
        get_session_manager().expire_session(request)
        header('Log out')
        context.logger.info('User %s logged out', old_user_id)
        """
        <h2>Logged out</h2>

        <p>
        You have logged out.
        </p>

        <p>
        You can <a href='/login'>log in</a> again.
        </p>
        """
    footer()



class TempImage:
    """
    Renders a temporarily-stashed image from its string representation
    in the memory cache if the cache is available.  If the cache is
    unavailable, fetch the file from the filesystem.
    """
    
    _q_exports = ['_q_index']
    
    def __init__ (self):
        self.logger = logging.getLogger(str(self.__class__)) 
        
    def _q_index (self):
        return not_found('image')
        
    def _q_lookup (self, request, image_id=None):
        context = get_publisher().context
        request.response.cache = 300
        try:
            # Don't set the mime_type unless we know we have a png
            image_string = context.cache_get('image:%s' % image_id)
            # Verify that the cache get succeeded
            if image_string:
                im = Image.open(StringIO(image_string))
                im_data_encoded = StringIO()
                im.save(im_data_encoded, "png") 
                data = im_data_encoded.getvalue()
                request.response.set_content_type('image/png')
                return data
            else:
                # If it failed, return the file itself.
                # Note: this assumes that the cache set failed as well,
                # so the image save process saved the file.
                path = context.config.temp_image_dir + '/' + image_id
                x = StaticFile(path, mime_type='image/png')
                request.response.set_content_type('image/png')
                return x
        except:
            self.logger.error(traceback.print_exc())
            return not_found('image')


def robots [plain] ():

    request = get_request()  
    request.response.cache = 3600
    request.response.set_content_type('text/plain')  
 
    config = get_publisher().config  
    robots_txt = config.robots_txt  
    for agent, path_list in robots_txt.items():  
        """User-agent: %s\n""" % agent  
        for path in path_list:  
            """Disallow: %s\n""" % path  
        # A little extra whitespace, please  
        """\n"""  


def news [html] (request):
    header('Project News')
    """
    <h2>Canary Database Project News</h2>
    """
    htmltext(utils.load_remote('http://sildin.med.yale.edu/sildincanary'))
    #print page.read()
    footer()


def add_message (msg):
    """
    Add arbitrary text messages (typically warnings) to the session,
    to be rendered on next page view.  Initialize request.session.messages
    if necessary.
    """
    get_request().session.add_message(msg)

def has_messages ():
    return get_request().session.has_messages()
        
def render_messages [html] ():
    # Show any messages added to the session, then remove upon rendering.
    session = get_request().session
    try:
        messages = session.messages.split(str('~~'))
        messages = [m for m in messages if not m == '']
        if len(messages) > 0:
            """
            <p>
            <ul>
            """
            for message in messages:
                """
                <li><span style='color:red;'>%s</span></li>
                """ % message
            """
            </ul>
            </p>
            """
            session.clear_messages()
    except Exception, e:
        context = get_publisher().context
        context.logger.error('Could not render session messages: %s', e)


# unAPI formats and identifier prefix/namespace regexes for Canary

FORMATS = [
    ('endnote', 'text/plain'),
    ('bibtex', 'text/plain'),
    ('ris', 'text/plain'),
    ('mods', 'application/xml'),
    ]

def render_unapi_formats [plain] (id=''):
    root = Element('formats')
    if id:
        root.set('id', id)
    for f, mt in FORMATS:
        format = SubElement(root, 'format')
        format.set('name', f)
        format.set('type', mt)
    return root

def unapi [plain] (request):
    context = get_publisher().context
    request.response.cache = 300
    config = context.config
    id = request.get_form_var(str('id'), '')
    format = request.get_form_var(str('format'), '')

    URI_PREFIXES = [
        ('%s/record/([0-9]+)' % config.site_base_url, 'record'),
        ('^(%s/user/set/$)' % config.site_base_url, 'records'),
        ('%s/user/set/([0-9]+)' % config.site_base_url, 'set'),
        ]
    re_dict = {}
    for regex, type in URI_PREFIXES:
        re_dict[type] = (regex, type, re.compile(regex))
    
    try:
        if id:
            for type in re_dict.keys():
                match = re_dict[type][2].match(id)
                if match:
                    if type == 'record':
                        rec = QueuedRecord(context, match.groups()[0])
                        study = Study(context, rec.study_id)
                        if not study.get_status(text=True) == 'curated' \
                            or study.get_article_type(text=True) == 'irrelevant':
                            return not_found('record')
                        records = [rec]
                    elif type in ('set', 'records'):
                        user = request.session.user
                        if not user:
                            request.response.set_stats(401, 'Not Authorized')
                            """<h1>Not Authorized</h1>"""
                        if type == 'set':
                            set_id = int(match.groups()[0])
                            user_recs = user.record_set_map.get(set_id, [])
                            records = [QueuedRecord(context, r.record_id) for r in user_recs]
                        else:  # type == 'records':
                            records = [QueuedRecord(context, urec.record_id) for urec in user.records.values()]
            if not records:
                return not_found('item')
            if format:
                if format in [f for f, mt in FORMATS]:
                    if format == 'mods':
                        request.response.set_content_type('application/xml')
                    else:
                        request.response.set_content_type('text/plain')
                    utils.rec2format(context, records, format)
                else:
                    request.response.set_status(415, 'Unsupported Media Type')
                    """
                    <h1>Unsupported Media Type</h1>
                    """
            else:
                request.response.set_status(300, 'Multiple Choices')
                request.response.set_content_type('application/xml')
                return etree.tostring(render_unapi_formats(id))
        else:
            request.response.set_content_type('application/xml')
            return etree.tostring(render_unapi_formats())
    except:
        request.response.set_status(400, 'Bad Request')
        """<h1>Bad Request</h1>"""
        print traceback.print_exc()


# FIXME: hide this somehow or at least discourage abuse better?
# NOTE: run this regularly from a cronjob with wget or equiv
def reaper [plain] (request):
    context = get_publisher().context
    utils.clean_temp_image_dir(context)


def register [html] (request):
    context = get_publisher().context
    config = context.config
    
    form = MyForm(context)
    form.action_url = config.site_base_url + form.action_url
    form.add(form2.StringWidget, 'user_email', 
        title='Your email',
        size=20, 
        required=True)
    form.add(form2.StringWidget, 'user_email_verify', 
        title='Your email (again)',
        size=20, 
        required=True)
    form.add(form2.PasswordWidget, 'user_pass', 
        title='Password',
        size=10, 
        required=True)
    form.add(form2.StringWidget, 'user_name', 
        title='Your name',
        size=20, 
        required=False)
    form.add(form2.CheckboxWidget, 'user_news',
        title='Email me site news')
    form.add_submit('register', 'register')
    
    def render [html] ():
        header('Register')
        """
        <h2>Register:</h2>
        
        <p>
        To sign up for an account, fill in the following information,
        an be sure to include a valid email address.  You will receive
        a message at that address with further instructions to follow
        before your account is activated.
        </p>
        
        <p>
        <b>Privacy note</b>: we will never share your address with any
        external party.  We require this information so that we might
        troubleshoot any problems you might encounter in using the site,
        to ensure that we have a working address for sending search
        results, and to send you project news (opt-in only).
        </p>
        """
        form.render()
        footer()
        
    if not form.is_submitted():
        return render()

    user_email = form['user_email']
    user_email_verify = form['user_email_verify']
    user_pass = form['user_pass']
    
    if not user_email or not utils.is_valid_email(user_email):
        form.set_error('user_email', 'Please enter a valid email address.')

    if user_email_verify != user_email:
        form.set_error('user_pass_verify', 'Email address must match')
    
    test_user = get_user_by_email(context, user_email)
    if test_user:
        form.set_error('user_email', 'User with this address already exists.')
    
    if not utils.is_valid_password(user_pass):
        form.set_error('user_pass', 'Please enter a password (min. 4 characters)')
    
    if form.has_errors():
        return render()

    user = User(id=user_email, email=user_email,)
    user.email = user_email
    user.set_password(user_pass)
    
    if form['user_name']:
        user.name = form['user_name']
    
    if form['user_news']:
        user.wants_news = int(True)
    
    # Set a random token for user to verify properly receiving email
    user.unverify()
    user.save(context)
    
    form.logger.info(str('Created user %s' % user_email))

    verify_url = '%s/verify?user_email=%s&t=%s' % \
        (config.site_base_url, user_email, str(user.token))
        
    msg_text = '''
You (or someone using your email address) has signed up 
for an account at %s.  

To complete registration, please verify that you have 
received this message by visiting this link:

    %s

You will be able to log in to the Canary Database after you 
visit the link above.

If you believe this message to be in error, ignore this 
message and the account will be deleted after 48 hours.

Thanks, -Canary Database staff
        ''' % (config.site_base_url, verify_url)

    utils.send_email(config.mail_from,
        user.email, 
        subject='Canary Database: verify account',
        body=msg_text,
        server=config.mail_server)
        

    header('Register: Verification sent')
    """
    <h3>Register: Verification sent</h3>
    <p>
    Your account has been created, but you must verify your email
    address before you can log in.  Follow the instructions you
    receive in the email address you provided.
    </p>
    """
    footer()
    
    
    
def verify [html] (request):
    context = get_publisher().context
    config = context.config
    
    form = MyForm(context, method='get')
    form.action_url = config.site_base_url + form.action_url
    form.add(form2.StringWidget, 'user_email', 
        title='Your email',
        size=20, 
        required=True)
    form.add(form2.StringWidget, 't', 
        title='Token',
        size=10, 
        required=True)
    form.add_submit('verify', 'verify')
    
    def render [html] ():
        header('Verify')
        """
        <h3>Verify:</h3>
        """
        form.render()
        footer()
        
    if not form.is_submitted():
        return render()

    user_email = form['user_email']
    token = form['t']
    
    if user_email:
        user = get_user_by_email(context, user_email)
        if user == None:
            form.set_error('user', 'Invalid user reference.')
        else:
            if not token or token != str(user.token):
                form.set_error('t', 'Invalid verification token.')
                
    if form.has_errors():
        return render()

    success = user.verify(token)
    if success:
        user.save(context)
        form.logger.info(str('Verified user %s' % user_email))

        header('Register: Verified')
        """
        <h3>Register: Verified</h3>
        <p>
        You have successfully verified your account.  You can now 
        <a href='%s/login'>log in</a>!
        </p>
        """ % config.site_base_url
        footer()
    else:
        form.logged.info(str('Failed user verification for %s' % user_email))
        header('Register: Verification failed')
        """
        <h3>Register: Verification failed</h3>
        <p>
        We were unable to verify your account.  Please check your
        email again and be sure the visit the entire URL it contains.
        </p>
        
        <p>
        Don't hesitate to contact us if you are having repeated problems
        verifying your account.
        </p>
        """
        footer()
        
        


def resetpass [html] (request):
    context = get_publisher().context
    config = context.config
    
    form = MyForm(context)
    form.method = 'post'
    form.action_url = '/resetpass'
    form.add(form2.StringWidget, 'user_email',
        title='Your email address',
        size=20,
        required=True)
    form.add_submit('send', 'send')

    def render [html] ():
        header('Request password copy')
        """
        <h3>Forgot your password?</h3>
        
        <p>
        Enter your email address below.  If your address matches your active
        account address, we will reset your password and send you the new one.
        </p>
        """
        form.render()
        footer()


    if not form.is_submitted():
        return render()

    user_email = form['user_email']
    if not utils.is_valid_email(user_email):
        form.set_error('user_email', 'Please specify a valid email address')
        
    user = get_user_by_email(context, user_email)
    if not user:
        form.set_error('user_email', 'Email address not found in database')
        
    if form.has_errors():
        return render()
    
    new_pass = random.randrange(117593, 993825)
    user.set_password(str(new_pass))
    user.save(context)
    
    msg_text = """
You (or someone using your email address) has asked us to reset
your Canary Database password.  

Your new password is:  %s

To log in, visit:

    %s/login

After you log in successfully, you can update your password by
following the "Preferences" link under your email address at left.

Thanks, -Canary Database staff
        """ % (new_pass, config.site_base_url)
        
    utils.send_email(config.mail_from,
        user.email, 
        subject='Canary Database: Reset account',
        body=msg_text,
        server=config.mail_server)
        

    header('Reset your password')
    """
    <h3>Reset your password</h3>
    <p>
    We have reset your password, and sent a copy of the new one to the
    email address "%s".
    </p>
    <p>
    Please check your email inbox for this message.
    """ % user.email
    footer()
