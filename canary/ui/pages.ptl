# $Id$

from cStringIO import StringIO
import logging
import string
from time import time
import urllib

import Image

from quixote import get_publisher, get_request, get_session_manager
from quixote import form2
from quixote.errors import AccessError, SessionError
from quixote.util import StaticFile

from canary.qx_defs import NotLoggedInError, MyForm
from canary.ui.pageframe import header, footer
from canary import utils
from canary.user import get_user_by_id, get_user_by_yale_netid


def _q_index [html] (request):
    package_name = str('.').join(__name__.split(str('.'))[:-1])
    module_name = __name__
    module_file = __file__

    header('Index')

    """
<table border='0' cellspacing='0' cellpadding='0'>
    <tr valign='top'>
    <td width='400' valign='top' class='rightspace'>

    <h1>The Canary Database</h1>
    <p>
    The Canary Database contains studies in the biomedical literature
    that explore the use of wildlife, domestic, and companion animals as
    &quot;sentinels&quot; for the effects of chemical, biological, and 
    physical hazards in the environment that may be a risk to human health.
    </p>

    <h3>
    The Canary Database allows you to locate and visualize patterns
    in sentinel studies according to:
    </h3>

    <table width='70%' border='0' cellspacing='10' cellpadding='5'>
        <tr>
            <td align='left' valign='top'>
                <ul type='circle'>
                    <li>Exposures</li>
                    <li>Disease outcomes (animal)</li>
                    <li>Species (and types)</li>
                </ul>
            </td>
            <td align='left' valign='top'>
                <ul type='circle'>
                    <li>Study methodologies</li>
                    <li>Authors</li>
                    <li>Journals</li>
                    <li>Locations</li>
                </ul>
            </td>
        </tr>
    </table>

    <p>
    You can browse the database by
        <a href='/browse/year'>year</a>,
        <a href='/browse/journal'>journal</a>, or by
        <a href='/browse/methodology'>methodology</a>.
    </p>

    </td>

    <td valign='top'>

    <div class='news'>
        <div class='news-head'>
            Project News
        </div>
        <h3>Related Articles by Canary Database staff</h3>
        <p>
        Our article, "<a href='/about/ecohealth-2005-animals.pdf'>Animals as
        Sentinels of Human Environmental Health Hazards: An Evidence-Based
        Analysis</a>," was recently published as Ecohealth 2(1):26-27,
        2005.
        </p>
        
        <p>
        Previously, "<a href='/about/ecohealth-2004-outfoxing.pdf'>Outfoxing a
        Rash: Clinical Example of Human-Wildlife Interaction</a>," by
        Canary Database curators Rabinowitz and Gordon, was published as
        Ecohealth 1(4):404-407, 2004.
        </p>
        
    </div>

    <div class='news'>
    
        <div class='news-head'>
            Take a tour
        </div>
        <p>
        Take a quick tour of the Canary Database.
    
            <a href='/about/tour' title='Take a tour'>
            <img border='0' src='/images/tour-record-small.jpg' 
            alt='small tour image'/></a>
        </p>
    </div>
    
    </td>
    </tr>
</table>


    <!--
    <h2>Note to Testers!</h2>

    <p>
    Please complete <a href='http://curtis.med.yale.edu/~dlc33/website_tester_feedback_form.doc'>this feedback form</a> (MS Word) and email the form to
    <b>sentinelstudies@yale.edu</b>, or fax to (203) 785-7391.
    Feel free to also attach additional comments where appropriate.
    </p>

    <p>
    Thank you!
    </p>
    -->

    """
    footer()


def _q_exception_handler [html] (request=None, exc):
    
    context = get_publisher().context
    err_text = '::'.join((request.get_path(), exc.title, exc.description,))
    context.logger.error('Error %s', err_text)
    
    if isinstance(exc, NotLoggedInError):
        
        path = request.get_path()
        request.redirect(str('/login?go=%s' % (path)))
        
    elif isinstance(exc, AccessError):
        
        path = request.get_path()
        header('Access not allowed')
        """
        <h2>Access not allowed</h2>
        <p>
        The page you have requested is restricted.  If you feel you should
        have access to it, please <a href='/about/contact_us'>contact the
        site administrators</a>.
        </p>
        <p>
        You can <a href='/user'>return to your page</a>.
        </p>
        """
        footer()
        
    elif isinstance(exc, SessionError):
        session_mgr = get_session_manager()
        session_mgr.revoke_session_cookie(request)
        header('Expired or invalid session')
        """
        <h2>Expired or invalid session</h2>
        
        <p>
        Your session is invalid or has expired.  Please log 
        in again to start a new session.
        </p>
        """
        
        path = request.get_path()
        """
        <form method='post' action='/login'>
        
        <b>Your user id *</b>: <br />
        <input type='text' name='user_id' size='10'> <br />
        
        <b>Password *</b>: <br />
        <input type='password' name='user_pass' size='10'> <br />
        <input type='hidden' name='go' value='%s'>
        <input type='submit' name='login' value='login'>
        </form>
        """ % path

        footer()
        
    else:
        
        header('Oops!')
        """
        <h2>Oops!</h2>
        <p>
        Sorry, we were unable to understand your request.  Perhaps you 
        asked for a page that doesn't exist, or perhaps it once existed, 
        but was eaten by the canary.
        </p>
        """
        footer()


def not_found [html] (item_type='item'):
    header('%s not found' % item_type.capitalize())
    """
    <h2>%s not found</h2>

    <p>
    The requested %s was not found.
    </p>
    """ % (item_type.capitalize(), item_type)
    footer()


def login_general [html] (request):

    context = get_publisher().context
    # redirect if the user is already logged in
    try:
        if request.session.user != None:
            request.redirect(str('/user'))
    except:
        pass
        
    form = MyForm(context)
    form.method = 'post'
    form.action_url = '/login'
    form.add(form2.StringWidget, 'user_id', 
        title='Your user id',
        size=10, 
        required=True)
    form.add(form2.PasswordWidget, 'user_pass', 
        title='Password',
        size=10, 
        required=True)
    form.add_hidden('go', None)
    form.add_submit('login', 'login')


    def render [html] ():
        header('Log in')
        """
        <h3>Log in:</h3>
        
        <p>
        <b>Please note</b> that while the Canary Database is in private beta
        mode, <b>all access must be authorized</b>.  If you have been invited to be
        a beta tester and require access, or are having trouble logging in
        with the access information already provided to you, please 
        <a href='/about/contact_us'>contact us</a> for assistance.
        </p>
        """
        form.render()
        footer()

    if not form.is_submitted():
        return render()

    user_id = form['user_id']
    user_pass = form['user_pass']
    user = get_user_by_id(context, user_id)
    if user == None:
        form.logger.error('Invalid id %s', user_id)
        form.set_error('user_id', 'Invalid user id or password.')
    else:
        if not user.valid_password(user_pass):
            form.logger.error('Invalid password')
            form.set_error('user_id', 'Invalid user id or password')

    if form.has_errors():
        return render()

    session_mgr = get_session_manager()
    request.session.set_user(user)
        
    form.logger.info(str('User %s logged in' % user.id))
        
    if form['go']:
        return request.redirect(form['go'])
    else:
        return request.redirect(str('/user/'))


def login_yale [html] (request):
    context = get_publisher().context
    config = context.config
    
    form = MyForm(context)
    form.method = 'post'
    form.action_url = '/login'
    form.add_hidden('go', None)
    form.add_submit('login', 'login')

    go = str('/user')
    if form.is_submitted() \
        and form['go']:
        go = form['go']
    
    # If they are successfully logged in, then bounce
    if getattr(request.session, str('user'), None):
        request.redirect(go)

    # Otherwise, attempt to validate their ticket
    try:
        ticket = request.get_form_var(str('ticket'), '')
        if ticket:
            validate_url = 'https://secure.its.yale.edu/cas/servlet/validate'
            my_url = config.site_base_url + '/login'
            params = '?service=%s&ticket=%s' % (my_url, ticket)
            cas_data = urllib.URLopener().open(str(validate_url + params))
            test = str(cas_data.readline()).strip()
            if test == 'yes':
                net_id = cas_data.readline().strip()
                user = get_user_by_yale_netid(context, net_id)
                if user:
                    context.logger.debug('Found user: %s', user)
                    session_mgr = get_session_manager()
                    #request.session = session_mgr.get_session(request)
                    request.session.set_user(user)
                    request.redirect(go)
    except:
        import traceback
        context.logger.error('Yale login error: %s', traceback.print_exc())

    cas_url = 'https://secure.its.yale.edu/cas/login'
    params = 'service=%s/login' % config.site_base_url
    login_url = cas_url + '?' + params
    
    from canary.ui.pageframe import header, footer
    header('Log in')
    """
    <h2>You are not logged in</h2>

    <p>
    You are not logged in.  Please log in through the <a href='%s'>Yale CAS</a>.
    </p>
    """ % login_url
    footer()


def logout [html] (request):

    context = get_publisher().context
    
    if request.session.user is None:
        header('Not logged in.')
        """
        <h2>Not logged in</h2>

        <p>
        You were not logged in.
        </p>

        <p>
        You can <a href='/login'>log in</a>.
        </p>
        """
    else:
        old_user_id = request.session.user.id
        get_session_manager().expire_session(request)
        header('Log out')
        context.logger.info('User %s logged out', old_user_id)
        """
        <h2>Logged out</h2>

        <p>
        You have logged out.
        </p>

        <p>
        You can <a href='/login'>log in</a> again.
        </p>
        """
    footer()



class TempImage:
    """
    Renders a temporarily-stashed image from its string representation
    in the memory cache if the cache is available.  If the cache is
    unavailable, fetch the file from the filesystem.
    """
    
    _q_exports = ['_q_index']
    
    def __init__ (self):
        self.logger = logging.getLogger(str(self.__class__)) 
        
    def _q_index (self):
        return not_found('image')
        
    def _q_lookup (self, request, image_id):
        context = get_publisher().context
        try:
            request.response.set_content_type('image/png')
            image_string = context.cache_get('image:%s' % image_id)
            # Verify that the cache get succeeded
            if image_string:
                im = Image.open(StringIO(image_string))
                im_data_encoded = StringIO()
                im.save(im_data_encoded, "png") 
                data = im_data_encoded.getvalue()
                return data
            else:
                # If it failed, return the file itself.
                # Note: this assumes that the cache set failed as well,
                # so the image save process saved the file.
                x = StaticFile(context.config.temp_image_dir +
                    '/%s' % image_id, mime_type='image/png')
                return x
        except OSError, e:
            self.logger.error(e)
            return not_found('image')


def robots [plain] ():

    request = get_request()  
    request.response.set_content_type('text/plain')  
 
    config = get_publisher().config  
    robots_txt = config.robots_txt  
    for agent, path_list in robots_txt.items():  
        """User-agent: %s\n""" % agent  
        for path in path_list:  
            """Disallow: %s\n""" % path  
        # A little extra whitespace, please  
        """\n"""  


def add_message (msg):
    """
    Add arbitrary text messages (typically warnings) to the session,
    to be rendered on next page view.  Initialize request.session.messages
    if necessary.
    """
    get_request().session.add_message(msg)

def has_messages ():
    return get_request().session.has_messages()
        
def render_messages [html] ():
    # Show any messages added to the session, then remove upon rendering.
    session = get_request().session
    try:
        messages = session.messages.split(str('~~'))
        messages = [m for m in messages if not m == '']
        if len(messages) > 0:
            """
            <p>
            <ul>
            """
            for message in messages:
                """
                <li><span style='color:red;'>%s</span></li>
                """ % message
            """
            </ul>
            </p>
            """
            session.clear_messages()
    except Exception, e:
        context = get_publisher().context
        context.logger.error('Could not render session messages: %s', e)


# FIXME: hide this somehow or at least discourage abuse better?
# NOTE: run this regularly from a cronjob with wget or equiv
def reaper [plain] (request):

    context = get_publisher().context
    
    utils.clean_temp_image_dir(context)
    
    # FIXME: Cleaner way of handling realtime config data?
    ##    db_root = context.get_root()
    ##    # 3600 is one hour in seconds
    ##    if db_root.has_key('last_reaper_time') \
    ##        and time() - db_root['last_reaper_time'] < 3600:
    ##        return 'not ok: run too recently'
    ##
    ##    reap_counter = 0
    ##    session_mgr = get_session_manager()
    ##    for session_id in session_mgr.sorted_keys():
    ##        existing_session = session_mgr[session_id]
    ##        # 270000 is 75 hours in seconds, long enough to last a weekend
    ##        if existing_session.get_access_age() > 270000:
    ##            del(session_mgr[session_id])
    ##            reap_counter += 1
    ##
    ##    db_root['last_reaper_time'] = time()
    ##    return 'ok: %s session(s) reaped' % reap_counter
