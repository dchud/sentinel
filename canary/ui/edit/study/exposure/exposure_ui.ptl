# $Id$

_q_exports = [
    '_q_index',
    'delete',
    ]

import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

from canary.loader import QueuedRecord
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_exposures, render_pipeline
from canary.qx_defs import MyForm
from canary.record import SubjectHeading
from canary.study import find_exposures, Exposure, Study



def _q_index [html] (request):
    header('Exposure:')
    """
    <h2>Exposure</h2>
    """
    footer()


class ExposureActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, exposure_id):
        self.exposure_id = exposure_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.exposure_id = int(self.exposure_id)
            if action == 'delete':
                return delete(self.exposure_id)
            else:
                raise TraversalError
        except:
            return not_found('exposure')




def find [html] (request):

    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    study_concepts = getattr(study, str('exposures'))
    
    source_catalog = context.get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = queued_record.get_mapped_metadata(term_map=complete_term_map)
    
    # It's possible (w/qualifiers) that subjects can repeat, so thin out multiples
    subject_list = mapped_metadata['subject'] or []
    subjects = []
    for subject in subject_list:
        heading = SubjectHeading(subject)
        if not heading.term in subjects:
            subjects.append(heading.term)
    
    subjects.sort()
    select_options = [('-', '-', '-')]
    if len(subjects) > 0:
        concept_terms = [c.term for c in study_concepts]
        for subject in subjects:
            if not subject in concept_terms:
                select_options.append((subject, subject, subject))
    
    form = MyForm(context)
    form.add(form2.StringWidget, 'search_term',
        title='Add any exposure:',
        size='30',
        required=False)
    form.add(form2.SingleSelectWidget, 'record_subject',
        title='Or use index term:',
        size=1,
        options=select_options,
        required=True)
    form.add_submit('find_find', 'find')
    form.add_submit('find_add', 'add')
    
        
    def render [html] ():
        header('Find exposure', show_javascript=True)
        """
        <h3>Find exposure</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
    
    if not form['record_subject'] == '-':
        search_term = form['record_subject']
    else:
        search_term = form['search_term']
        
    exposures = find_exposures(context, search_term)
    if len(exposures) == 0:
        form.set_error('search_term', 'No exposures found.')
        
    if form.has_errors() \
        or has_messages():
        return render()

    
    header('Find exposure', show_javascript=True)
    """
    <h3>Find exposure</h3>
    """
    render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
    render_queued_record(queued_record)
    render_messages()
    form.render()
    render_found_exposures(study, exposures, search_term)
    render_unclaim_block()
    footer()





def add [html] (request):
    
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context,queued_record.study_id)
    
    form = MyForm(context)
    form.method = 'get'
    form.action_url = 'add'
    form.add(form2.IntWidget, name='concept_source_id', value=None, required=True)
    form.add(form2.IntWidget, name='concept_id', value=None, required=True)
    form.add(form2.StringWidget, name='term', value=None, required=True)
    form.add_submit('add', 'add')
    
    def render [html] ():
        header('Add exposure', show_javascript=True)
        """
        <h3>Find exposure</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        render_exposures(study)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    exposure = Exposure()
    
    try:
        exposure.concept_id = form['concept_id']
    except:
        form.set_error('concept_id', 'Invalid concept id.')
        
    try:
        if exposure.UMLS_SOURCES.has_key(int(form['concept_source_id'])):
            exposure.concept_source_id = form['concept_source_id']
    except:
        form.set_error('concept_source_id', 'Must be valid concept source.')
    
    exposure.term = form['term']
    
    if form.has_errors():
        return render()
    
    try:
        study.add_exposure(exposure)
        exposure.save(context)
        study.add_history(curator_user_id=request.session.user.get_id(),
            message='Added exposure "%s"' % exposure.term)
        study.save(context)
        form.logger.info(str('Added exposure %s' % exposure.uid))
        add_message('Added exposure')
        request.redirect(str('../curate_three'))
    except:
        import sys
        form.logger.info(str(sys.exc_info()))
        add_message('An error occurred')
        return render()



def delete [html] (exposure_id):
    
    context = get_publisher().context
    request = get_request()
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    exposure = study.get_exposure(exposure_id)

    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this exposure?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete exposure', show_javascript=True)
        """
        <h3>Delete exposure</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('../..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Deleting exposure %s (%s).
        </p>
        """ % (exposure.term, exposure.UMLS_SOURCES[exposure.concept_source_id])
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            study.delete_exposure(context, exposure)
            study.add_history(curator_user_id=request.session.user.get_id(),
                message='Deleted exposure "%s"' % exposure.term)
            study.save(context)
            add_message('Exposure deleted')
            form.logger.info(str('Deleted exposure %s' % exposure_id))
        except:
            add_message('Unable to delete exposure')
            form.logger.error(str('Unable to delete user %s' % exposure_id))
    else:
        add_message('Exposure not deleted')

    request.redirect(str('/edit/study/%s/curate_three' % request.queued_record_id))
    
    
    
def render_found_exposures [html] (study, exposures, search_term):
    
    if len(exposures) == 0:
        return
        
    """
    <h4>Exposures found:</h4>
    
    <table class='gentable' id='exposures'>
        <tr>
            <th>umls id</th>
            <th>source</th>
            <th>preferred term</th>
            <th>synonyms</th>
            <th>actions</th>
        </tr>
    """
    
    for exp in exposures:
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (exp.concept_id, exp.UMLS_SOURCES[exp.concept_source_id], 
            exp.term, '; '.join(exp.synonyms))
        
        if not study.has_exposure(exp):
            """
            <td>
                [<a href='add?concept_source_id=%s&amp;concept_id=%s&amp;term=%s'>add</a>]
            </td>
            """ % (exp.concept_source_id, exp.concept_id, urllib.quote_plus(exp.term))
        else:
            this_exposure = study.get_exposure_from_exposure(exp)
            if not this_exposure == None:
                """
                <td>
                    [<a href='%s/delete'>delete</a>]
                </td>
                """ % this_exposure.uid
            else:
                """
                <td>
                    [error]
                </td>
                """
        
        """
        </tr>
        """
    """
    </table>
    """
    
