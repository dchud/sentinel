# $Id$

_q_exports = [
    '_q_index',
    'create',
    'detail',
    'delete',
    'edit',
    ]


from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.study import Methodology, Study
from canary.utils import is_valid_email, is_valid_password
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_pipeline


def _q_index [html] (request):
    header('Methodology:')
    """
    <h2>Methodology</h2>
    """
    footer()


class MethodologyActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, methodology_id):
        self.methodology_id = methodology_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.methodology_id = int(self.methodology_id)
            if action == 'edit':
                return edit(self.methodology_id)
            elif action == 'detail':
                return detail(self.methodology_id)
            elif action == 'delete':
                return delete(self.methodology_id)
            else:
                raise TraversalError
        except:
            return not_found('methodology')



class MethodologyTypeForm (MyForm):
    
    def __init__ (self, context):
        MyForm.__init__(self, context)
        self.add(form2.RadiobuttonsWidget, 'study_type', 
            value=None,
            title='Study type:',
            hint='Select a study type',
            options=[
                ('disease model', 'Is this a disease model study?', 'disease model'),
                ('experimental', 'Manipulated exposures (experimental)?', 'experimental'),
                ('descriptive', 'A single sample group (descriptive)?', 'descriptive'),
                ('aggregate', 'Exposures measured in aggregate (aggregate)?', 'aggregate'),
                ('cohort', 'Forward directionality (cohort)?', 'cohort'),
                ('case control', 'Backward directionality (case control)?', 'case control'),
                ('cross sectional', 'Simultaneous directionality (cross sectional)?', 'cross sectional'),
                ],
            sort=False,
            required=True)
        self.add_submit('continue', 'continue')
        self.add_submit('cancel', 'cancel')


def create [html] (request):

    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    form = MethodologyTypeForm(context)

    def render [html] ():
        header('Create methodology', show_javascript=True)
        """
        <h3>Create methodology</h3>
        """
        render_pipeline(article_type, step=4, url_prefix='..')
        render_queued_record(queued_record)
        render_messages()
        """
        <form action='create' method='post'>
        """
        # Got to be sure to render the form_token
        #form.get_widget('_form_id').render()
        
        """
        <h3>Disease model?</h3>
        <input type='radio' name='study_type'
            id='disease model' value='disease model' />
        <label for='disease model'>Disease model</label>
        
        <h3>Manipulated exposures?</h3>
        <input type='radio' name='study_type'
            id='experimental' value='experimental' />
        <label for='experimental'>Experimental</label>

        <h3>No group comparisons?</h3>
        <input type='radio' name='study_type'
            id='descriptive' value='descriptive' />
        <label for='descriptive'>Descriptive</label>
    
        <h3>How was exposure measured?</h3>
        
        <div id='exposure-left'>
            <h4>Aggregate</h4>
            <input type='radio' name='study_type'
                id='aggregate' value='aggregate' />
            <label for='aggregate'>Aggregate</label>
        </div>
        
        <div id='exposure-right'>
            <h4>Individual -- Directionality?</h4>
            <input type='radio' name='study_type'
                id='cohort' value='cohort' />
            <label for='cohort'>Forward (cohort)</label>
    
            <input type='radio' name='study_type'
                id='case_control' value='case control' />
            <label for='case_control'>Backward (case control)</label>
    
            <input type='radio' name='study_type'
                id='cross_sectional' value='cross sectional' />
            <label for='cross_sectional'>Simultaneous (cross sectional)</label>
        </div>
        
        <div id='exposure-buttons' style='clear: both'>
            <input type='submit' name='continue' value='continue' />
            <input type='submit' name='cancel' value='cancel' />
        </div>
        
        </form>
        """
        
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
        
    if form.get_submit() == 'cancel':
        add_message('New methodology cancelled')
        request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
    
    if not form['study_type']:
        add_message('Please choose a study type')

    if form.has_errors() \
        or has_messages():
        return render()

    methodology = Methodology()
    methodology.study_id = study.uid
    methodology.set_study_type(form['study_type'])
        
    try:
        study.add_methodology(methodology)
        study.add_history(curator_user_id=request.session.user.get_id(),
            message='Added study type %s' % methodology.get_study_type(text=True))
        study.save(context)
        context.cache_set('%s:%s' % (study.CACHE_KEY, study.uid), study)
        form.logger.info(str('Created methodology %s' % methodology.uid))
        request.redirect(str('%s/detail' % methodology.uid))
    except Exception, e:
        form.logger.error(e)
        add_message('An error occurred')
        return render()


def detail [html] (methodology_id):

    request = get_request()
    context = get_publisher().context
        
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    
    methodology = study.get_methodology(methodology_id)
    if methodology.get_study_type(text=True) == 'disease model':
        request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))

    
    # Get a copy for history comparisons
    methodology_orig = study.get_methodology(methodology_id)
    
    form = methodology.create_form(context)
    
    def render [html] ():
        header('Describe methodology', show_javascript=True)
        """
        <h3>Describe methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
        
    methodology.process_form(form)
    
    if form.has_errors():
        return render()
        
    try:
        methodology.save(context)
        form.logger.info(str('Updated methodology %s' % methodology.uid))
        # Force reload to pick up new methodology
        context.cache_delete('%s:%s' % (study.CACHE_KEY, study.uid))
        if form.get_submit() == 'update':
            return render()
        elif form.get_submit() == 'finish':
            request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
    except Exception, e:
        form.logger.error(e)
        add_message('An error occurred')
        return render()
        
    
def edit [html] (methodology_id):

    request = get_request()
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    methodology = study.get_methodology(methodology_id)
    
    form = methodology.create_form(context)
    form.add_submit('cancel', 'cancel')
    
    def render [html] ():
        header('Edit methodology', show_javascript=True)
        """
        <h3>Edit methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record, )
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
        
    methodology.process_form(form)
    
    if form.has_errors():
        return render()

    try:
        if form.get_submit() in ['update', 'finish']:
            methodology.save(context)
            # Force reload to pick up new methodology
            context.cache_delete('%s:%s' % (study.CACHE_KEY, study.uid))
            form.logger.info(str('Updated methodology %s' % methodology.uid))
            if form.get_submit() == 'update':
                return render()
            elif form.get_submit() == 'finish':
                request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
        elif form.get_submit() == 'cancel':
            request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
    except Exception, e:
        form.logger.error(e)
        add_message('An error occurred')
        return render()



def delete [html] (methodology_id):
    request = get_request()
    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    article_type = study.get_article_type(text=True)
    methodology = study.get_methodology(methodology_id)

    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this methodology?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete methodology', show_javascript=True)
        """
        <h3>Delete methodology (%s)</h3>
        """ % methodology.get_study_type(text=True)
        render_pipeline(article_type, step=4, url_prefix='../..')
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            study.delete_methodology(context,methodology)
            study.add_history(curator_user_id=request.session.user.get_id(),
                message='Deleted study type %s' % methodology.get_study_type(text=True))
            study.save(context)
            add_message('Methodology deleted')
            form.logger.info(str('Deleted methodology %s' % methodology_id))
        except Exception, e:
            add_message('Unable to delete methodology')
            form.logger.error(str('Unable to delete methodology %s', methodology_id))
            form.logger.error(e)
    else:
        add_message('Methodology not deleted')

    request.redirect(str('/edit/study/%s/curate_four' % request.queued_record_id))
