# $Id$

_q_exports = [
    '_q_index',
    'delete',
    ]

import urllib

from quixote import get_publisher, get_request
from quixote.errors import TraversalError
from quixote import form2

from canary.gazeteer import Feature
from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.study import Location, Study
from canary.ui.pageframe import header, footer
from canary.ui.pages import not_found, add_message, has_messages, render_messages
from canary.ui.edit.study.utils import is_same_user, render_queued_record
from canary.ui.edit.study.utils import render_unclaim_block, claimed_by_other_user
from canary.ui.edit.study.utils import render_locations, render_pipeline


def _q_index [html] (request):
    header('Location:')
    """
    <h2>Location</h2>
    """
    footer()


class LocationActions:

    _q_exports = [
        '_q_index',
        ]

    def __init__ (self, location_id):
        self.location_id = location_id

    def _q_index [html] (self, request):
        header('blah')
        """
        blah
        """
        footer()

    def _q_lookup [html] (self, request, action):
        try:
            self.location_id = int(self.location_id)
            if action == 'delete':
                return delete(self.location_id)
            else:
                raise TraversalError
        except:
            return not_found('location')




def find [html] (request):

    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    
    gazeteer = context.get_gazeteer()
    source_catalog = context.get_source_catalog()
    complete_term_map = source_catalog.get_complete_mapping()
    mapped_metadata = queued_record.get_mapped_metadata(term_map=complete_term_map)
    
    form = MyForm(context)
    form.add(form2.StringWidget, 'search_term',
        title='Feature:',
        size='20',
        required=True)
    form.add(form2.StringWidget, 'search_region',
        title='Region:',
        size='10',
        required=False)
    form.add(form2.StringWidget, 'search_country',
        title='Country:',
        size='10',
        required=False)
    form.add_submit('find', 'find')
    
        
    def render [html] ():
        header('Find location', show_javascript=True)
        """
        <h3>Find location</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()
    
    search_term = form['search_term']
    search_region = ''
    search_country = ''
    if form['search_region']:
        search_region = form['search_region']
    if form['search_country']:
        search_country = form['search_country']
    locations = gazeteer.search(context, search_term, region=search_region, 
        country=search_country)
    if len(locations) == 0:
        form.set_error('search_term', 'No locations found.')
        
    if form.has_errors() \
        or has_messages():
        return render()
    
    header('Find location', show_javascript=True)
    """
    <h3>Find location</h3>
    """
    render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
    render_queued_record(queued_record)
    render_messages()
    form.render()
    render_found_features(study, locations, search_term)
    render_unclaim_block()
    footer()





def add [html] (request):

    context = get_publisher().context
    queued_record = QueuedRecord(context, request.queued_record_id)
    
    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    
    form = MyForm(context)
    form.method = 'get'
    form.action_url = 'add'
    form.add(form2.IntWidget, name='feature_id', value=None, required=True)
    form.add_submit('add', 'add')
    
    def render [html] ():
        header('Find location', show_javascript=True)
        """
        <h3>Find location</h3>
        """
        render_pipeline(study.get_article_type(text=True), url_prefix=str('..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        render_locations(study)
        form.render()
        render_unclaim_block()
        footer()
    
    if not form.is_submitted():
        return render()
    
    try:
        feature = Feature(uid=form['feature_id'])
        feature.load(context)
    except:
        form.set_error('feature_id', 'Invalid feature id.')
    
    location = Location()
    location.feature_id = feature.uid
    
    if form.has_errors():
        return render()
    
    try:
        study.add_location(location)
        location.save(context)
        study.add_history(curator_user_id=request.session.user.get_id(),
            message='Added location %s' % location.feature_id)
        study.save(context)
        form.logger.info(str('Added location %s' % location.feature_id))
        add_message('Added location')
        request.redirect(str('../curate_three'))
    except:
        add_message('An error occurred')
        return render()



def delete [html] (location_id):
    
    context = get_publisher().context
    request = get_request()
    queued_record = QueuedRecord(context, request.queued_record_id)

    if queued_record.status == queued_record.STATUS_CLAIMED:
        if not is_same_user(queued_record):
            return claimed_by_other_user()
    
    study = Study(context, queued_record.study_id)
    location = study.get_location(location_id)
    feature = Feature(uid=location.feature_id)
    feature.load(context)
    
    form = MyForm(context)
    form.add(form2.CheckboxWidget, 'are_you_sure',
        title='Are you sure you want to delete this location?',
        value=False)
    form.add_submit('delete', 'delete')

    def render [html] ():
        header('Delete location', show_javascript=True)
        """
        <h3>Delete location</h3>
        """
        render_pipeline(study.get_article_type(text=True), 
            url_prefix=str('../..'), step=3)
        render_queued_record(queued_record)
        render_messages()
        """
        <p>
        Deleting location '%s' (#%s).
        </p>
        """ % (feature.name, location.uid)
        form.render()
        render_unclaim_block()
        footer()

    if not form.is_submitted():
        return render()

    if form.has_errors():
        return render()
    
    if form['are_you_sure']:
        try:
            study.delete_location(context, location)
            study.add_history(curator_user_id=request.session.user.get_id(),
                message='Deleted location %s' % location.feature_id)
            study.save(context)
            add_message('Location deleted')
            form.logger.info(str('Deleted location %s' % location_id))
        except:
            add_message('Unable to delete location')
            form.logger.error(str('Unable to delete location %s' % location_id))
    else:
        add_message('Location not deleted')

    request.redirect(str('/edit/study/%s/curate_three' % request.queued_record_id))
    
    
    
def render_found_features [html] (study, features, search_term):
    
    context = get_publisher().context
    gazeteer = context.get_gazeteer()
    
    if len(features) == 0:
        return
        
    """
    <h4>features found:</h4>
    
    <table class='gentable' id='features'>
        <tr>
            <th>id</th>
            <th>name</th>
            <th>type</th>
            <th>region</th>
            <th>country</th>
            <th>lat/long</th>
            <th>actions</th>
        </tr>
    """
    
    for feature in features:
        region_name = gazeteer.fips_codes.get((feature.country_code, feature.adm1), '')
        """
        <tr>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
            <td>%s</td>
        """ % (feature.uid, 
            feature.name, 
            gazeteer.feature_codes.get(feature.feature_type, 'Unknown'),
            region_name,
            gazeteer.country_codes.get(feature.country_code, 'Unknown'),
            '%.2f / %.2f' % (feature.latitude, feature.longitude))
        
        if not study.has_feature(feature):
            """
            <td>
                [<a href='add?feature_id=%s'>add</a>]
            </td>
            """ % feature.uid
        else:
            this_feature = study.get_location_from_feature(feature)
            if not this_feature == None:
                """
                <td>
                    [<a href='%s/delete'>delete</a>]
                </td>
                """ % this_feature.uid
            else:
                """
                <td>
                    [error]
                </td>
                """
        
        """
        </tr>
        """
    """
    </table>
    """
    
