# $Id$

_q_exports = [
    'search',
    ]

import logging
import traceback
import urllib

from quixote import get_publisher
from quixote import form2

import canary.context
from canary.loader import QueuedRecord
from canary.qx_defs import MyForm
from canary.search import Search, SearchIndex
from canary.study import Study
from canary.ui.browse_ui import BrowseIndex, render_on_this_page
from canary.ui.pageframe import header, footer
from canary.ui.record_ui import render_record_row, data_points
from canary import utils


study_boolvals = ('has_outcomes', 'has_exposures', 'has_relationships', 
    'has_interspecies', 'has_exposure_linkage', 'has_outcome_linkage', 
    'has_genomic')


class SearchForm (MyForm):

    def __init__ (self, context):
        MyForm.__init__(self, context, method='get')
        self.add(form2.StringWidget, 'q',
            title='Search:',
            size=60,
            required=True)
        self.add_submit('go', 'go')


def search [html] (request):

    context = get_publisher().context
    form = SearchForm(context)
    source_catalog = context.get_source_catalog()
    complete_term_mapping = source_catalog.get_complete_mapping()
    
    query = form['q']
    ad_link = '/opensearch/?q=%s' % query
    
    def render [html] ():
        header("Search the database")
        """
        <h3>Search:</h3>
        """
        form.render()
        footer()

    if not form.is_submitted() \
        or form.has_errors():
        return render()
    
    header("Search results", show_javascript=True,
        autodiscovery_links=[ad_link])
    
    try:
        search_index = SearchIndex(context)
        raw_query = utils.fix_double_quotes(query)
        hits, searcher = search_index.search(raw_query, require_visible=True)
        
        result_set = []
        for i, doc in hits:
            uid = doc.get(str('uid'))
            record = QueuedRecord(context, uid)
            if record.status == record.STATUS_CURATED:
                score = hits.score(i)
                result_set.append((record, score))
        searcher.close()
        
        year_count = {}
        for i in range(1965, 2006):
            year_count[i] = 0
        for rec, score in result_set:
            mm = rec.get_mapped_metadata(term_map=complete_term_mapping)
            try:
                year = int(mm['pubdate'][:4])
                year_count[year] += 1
            except:
                # Somehow the first four digits of pubdate aren't YYYY
                continue
        sparkline_image_file = utils.make_sparkline(context, year_count)
        
        studies = [Study(context, rec.study_id) for rec, score in result_set]
        e_image_file = utils.make_sideways_e(context, studies)

        form.render()
        """
        <table style='margin-top:0;' width='100%s' border='0' cellspacing='0' cellpadding='0'>
            <tr>
                <td valign='top'>
        
        <p>
        Record(s): <span style='font-weight:bold;'>%s</span>
        <br/>
        %s of hits by year:
            <span style='font-weight:bold;font-size:x-small;'>1965</span>
            <img border='0' src='/timage/%s' type='image/png' usemap='#sparkmap'/>
            <span style='font-weight:bold;font-size:x-small;'>2005</span>
            &nbsp;
            <acronym title='Linkages between human and animal health'>Linkages</acronym>:
            <img border='0' src='/timage/%s' type='image/png' usemap='#emap'/>
        </p>
        """ % ('%', len(result_set), '%', sparkline_image_file, e_image_file)
        
        if len(result_set) > 0:
            years = year_count.keys()
            years.sort()
            """
            <map name='sparkmap'>
            """
            for year in years:
                count = year_count[year]
                if count > 0:
                    year_index = years.index(year)
                    # Don't allow repeated clicks to grow the query forever
                    try:
                        if raw_query.index(str('%s[date]' % year)):
                            #query_str = urllib.quote_plus(raw_query)
                            query_str = raw_query
                    except ValueError:
                        #query_str = urllib.quote_plus(str('%s%s[date]' % \
                        #    (raw_query, year)))
                        query_str = '%s %s[date]' % (raw_query, year)
                    """
                <area href='/search?q=%s' 
                    shape='rect'
                    coords='%s %s %s %s'
                    alt='%s'
                    title='%s' />
                    """ % (query_str,
                        year_index*3, 0, (year_index*3)+2, 120,
                        'limit to year %s' % year,
                        'limit to year %s' % year)
            """
            </map>
            
            <map name='emap'>
            """
            bar_width = 4
            for att in utils.linkages:
                token = att.replace(str('_'), str('-'))
                hint_text = data_points[utils.linkages.index(att)][1].lower()
                try:
                    if raw_query.index(str('%s' % token)):
                        query_str = raw_query
                except ValueError:
                    query_str = '%s has-%s:1' % (raw_query, token)
                    
                xoffset = 2 + (utils.linkages.index(att)*9)
                """
                <area href='/search?q=%s'
                    shape='rect'
                    coords='%s %s %s %s'
                    alt='%s'
                    title='%s' />
                """ % (query_str,
                    xoffset, 0, xoffset+bar_width, 20,
                    'limit to studies with %s' % hint_text, 
                    'limit to studies with %s' % hint_text)
            
            """
            </map>
            
            
            <div id="search-result">
                <table width="100%" border="0" cellspacing="0" cellpadding="0">
            """
            for rec, score in result_set:
                render_record_row(rec, score)
            """
                </table>
            </div>
                
                </td>
                
                <td width='30%' valign='top'>
            """
            render_on_this_page([(s, r) for r, s in result_set], raw_query)
            """
                </td>
            </tr>
            </table>
            """
        else:
            '<p>Nothing found.</p>'
    except Exception, e:
        form.logger.error('Search error: %s', e)
        form.logger.error(traceback.format_exc())
        """
        <p>
        An error occurred with your search.  It's probably our fault, 
        though... we're very sorry, please try again!
        </p>
        """

    footer()


def advanced_search [html] (request):
    context = get_publisher().context

    form = MyForm(context)
    s_input_fields = ('with_all', 'with_exact', 'with_one', 'with_out')
    for s_input in s_input_fields:
        form.add(form2.StringWidget, s_input,
            size='35',
            required=False)
    form.add(form2.SingleSelectWidget, 'concept_type',
        options=[
            ('-', '-', '-'),
            ('exposures', 'Exposure', 'exposures'),
            ('outcomes', 'Outcome', 'outcomes'),
            ('risk-factors', 'Risk factor', 'risk-factors'),
            ('species', 'Species', 'species'),
            ('location', 'Location', 'location',),
            ],
        sort=False,
        required=False)
    form.add(form2.SingleSelectWidget, 'biblio_type',
        options=[
            ('-', '-', '-'),
            ('title', 'Title', 'title'),
            ('author', 'Author', 'author'),
            ('journal', 'Journal', 'journal'),
            ('pages', 'Page(s)', 'pages'),
            ('subject', 'Subject', 'subject'),
            ],
        sort=False,
        required=False)
    form.add(form2.StringWidget, 'biblio_value',
        size='35',
        required=False)
    form.add(form2.SingleSelectWidget, 'methodology_type',
        options=[
            ('-', '-', '-'),
            ('aggregate', 'Aggregate', 'aggregate'),
            ('case_control', 'Case control', 'case_control'),
            ('cohort', 'Cohort', 'cohort'),
            ('cross_sectional', 'Cross sectional', 'cross_sectional'),
            ('descriptive', 'Descriptive', 'descriptive'),
            ('disease_model', 'Disease model', 'disease_model'),
            ('experimental', 'Experimental', 'experimental'),
            ],
        sort=False,
        required=False)
    form.add(form2.StringWidget, 'concept_value',
        size='35',
        required=False)
    for boolval in study_boolvals:
        form.add(form2.CheckboxWidget, boolval,
            value=False)
    form.add_submit('search', 'Search')
    
    search_tokens = []
    if form.is_submitted():
        if form['with_all']:
            search_tokens.append(form['with_all'])
        if form['with_exact']:
            search_tokens.append('"%s"' % form['with_exact'])
        if form['with_one']:
            search_tokens.append('(%s)' % \
                str(' OR '.join([str(tok) for tok in form['with_one'].split(str(' '))])))
        if form['with_out']:
            search_tokens.append(' '.join(['-%s' % t for t in form['with_out'].split(str(' '))]))
        if form['biblio_type'] \
            and not form['biblio_type'] == '-' \
            and form['biblio_value']:
            search_tokens.append('%s:"%s"' % (form['biblio_type'], 
                form['biblio_value']))
        if form['concept_type'] \
            and not form['concept_type'] == '-' \
            and form['concept_value']:
            search_tokens.extend(['%s:%s' % (form['concept_type'], 
                val) for val in form['concept_value'].split(str(' '))])
        if form['methodology_type'] \
            and not form['methodology_type'] == '-':
            search_tokens.append('methodology:"%s"' % form['methodology_type'])
        for boolval in study_boolvals:
            if form[boolval]:
                boolval_str = boolval.replace(str('_'), str('-'))
                search_tokens.append('%s:1' % boolval_str)
        
        target = str('/search?go=go&q=%s' % \
            ' '.join([str(tok) for tok in search_tokens]))
        target = target.replace(str('&quot;'), str('"'))
        request.redirect(target)


    header('Advanced Search')
    """
    <h3>Advanced Search</h3>
    
    <h4>Find studies:</h4>
    
    <table class='advsearchtable' cellpadding='2' cellspacing='0' width='80%'>
        <tbody>
            <form method='post' action='/advanced_search'>
            <tr>
                <td>
                    <font size='-1'>with <b>all</b> of the words</font>
                </td>
                <td>
                    <input type='text' name='with_all' size='35' value=''>
                </td>
                <td rowspan='7' valign='top'>
                    <input name='submit' value='Search' type='submit'>
                </td>
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'>with the <b>exact phrase</b></font>
                </td>
                <td>
                    <input type='text' name='with_exact' size='35' value=''>
                </td>
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'>with <b>at least one</b> of the words</font>
                </td>
                <td>
                    <input type='text' name='with_one' size='35' value=''>
                </td>
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'><b>without</b> the words</font>
                </td>
                <td>
                    <input type='text' name='with_out' size='35' value=''>
                </td>                
            </tr>
            <tr style='background:#e5e5e5;'>
                <td colspan='3'>
                    &nbsp;
                </td>
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'>with <b>article </b> &nbsp;&nbsp;</font>
                    <select name='biblio_type'>
                        <option value='-' selected='selected'>-</option>
                        <option value='title'>Title</option>
                        <option value='author'>Author</option>
                        <option value='journal'>Journal</option>
                        <option value='pages'>Page(s)</option>
                        <option value='subject'>Subject</option>
                    </select>
                </td>
                <td colspan='2'>
                    <input type='text' name='biblio_value' size='35' value=''>
                </td>                
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'>with <b>Canary </b> &nbsp;&nbsp;</font>
                    <select name='concept_type'>
                        <option value='-' selected='selected'>-</option>
                        <option value='exposures'>Exposure</option>
                        <option value='outcomes'>Outcome</option>
                        <option value='risk-factors'>Risk factor</option>
                        <option value='species'>Species</option>
                        <option value='location'>Location</option>
                    </select>
                </td>
                <td colspan='2'>
                    <input type='text' name='concept_value' size='35' value=''>
                </td>                
            </tr>
            <tr>
                <td nowrap='nowrap'>
                    <font size='-1'>having <b>study type</b> </font>
                </td>
                <td colspan='2'>
                    <select name='methodology_type'>
                        <option value='-' selected='selected'>-</option>
                        <option value='aggregate'>Aggregate</option>
                        <option value='case_control'>Case Control</option>
                        <option value='cohort'>Cohort</option>
                        <option value='cross_sectional'>Cross sectional</option>
                        <option value='descriptive'>Descriptive</option>
                        <option value='disease_model'>Disease model</option>
                        <option value='experimental'>Experimental</option>
                    </select>
                </td>                
            </tr>
            <tr>
                <td nowrap='nowrap' valign='top'>
                    <font size='-1'>providing <b>data about </b></font>
                </td>
                <td colspan='2' valign='top'>
                    <font size='-1'>
                    <input type='checkbox' name='has_relationships' />
                    Cause and effect analysis
                    <br />
                    <input type='checkbox' name='has_interspecies' />
                    Interspecies susceptibility
                    <br />
                    <input type='checkbox' name='has_exposure_linkage' />
                    Shared exposures with humans
                    <br />
                    <input type='checkbox' name='has_outcome_linkage' />
                    Shared outcomes with humans
                    <br />
                    <input type='checkbox' name='has_genomic' />
                    Gene sequences
                    <br />
                    </font>
                </td>
            </tr>
            </form>
        </tbody>
    </table>
    """

    footer()
    
